
iic1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00002da2  00002e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027c0  00000000  00000000  00002e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001619  00000000  00000000  00005640  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000abd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b3a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <main>
      7a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 ec       	ldi	r26, 0xC1	; 193
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 ec       	ldi	r24, 0xC1	; 193
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <USART_Init>:
#include "UART.h"
#define BAUD_PRESCALE ((F_CPU / (UART_BAUDRATE * 8UL))-1)
void USART_Init (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	UCSRA = (1<<U2X);
     b3e:	eb e2       	ldi	r30, 0x2B	; 43
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
     b46:	ea e2       	ldi	r30, 0x2A	; 42
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	88 e1       	ldi	r24, 0x18	; 24
     b4c:	80 83       	st	Z, r24


	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     b4e:	e0 e4       	ldi	r30, 0x40	; 64
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	86 e8       	ldi	r24, 0x86	; 134
     b54:	80 83       	st	Z, r24

	UBRRH = BAUD_PRESCALE >> 8;
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     b5c:	e9 e2       	ldi	r30, 0x29	; 41
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8f ec       	ldi	r24, 0xCF	; 207
     b62:	80 83       	st	Z, r24

}
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <USART_sendByte>:

void USART_sendByte (u8 data)			// Function to send data byte
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	0f 92       	push	r0
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	89 83       	std	Y+1, r24	; 0x01

	UDR = data;
     b76:	ec e2       	ldi	r30, 0x2C	; 44
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA,TXC));
     b7e:	eb e2       	ldi	r30, 0x2B	; 43
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	80 74       	andi	r24, 0x40	; 64
     b8a:	90 70       	andi	r25, 0x00	; 0
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	b9 f3       	breq	.-18     	; 0xb7e <USART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
     b90:	ab e2       	ldi	r26, 0x2B	; 43
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	eb e2       	ldi	r30, 0x2B	; 43
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	8c 93       	st	X, r24

}
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <USART_receiveByte>:

u8 USART_receiveByte (void)				// Function to receive data byte
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA,RXC));	//Polling until UDR register is full with data
     bae:	eb e2       	ldi	r30, 0x2B	; 43
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	88 23       	and	r24, r24
     bb6:	dc f7       	brge	.-10     	; 0xbae <USART_receiveByte+0x8>
	return UDR;							// Return the data from UDR register
     bb8:	ec e2       	ldi	r30, 0x2C	; 44
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <USART_sendString>:

void USART_sendString (const u8 *str)	// Function to send string
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <USART_sendString+0x6>
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	9b 83       	std	Y+3, r25	; 0x03
     bd2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     bd4:	19 82       	std	Y+1, r1	; 0x01
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <USART_sendString+0x30>

	while (str[i] != '\0')
	{
		USART_sendByte(str[i]);
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	fc 01       	movw	r30, r24
     be4:	e2 0f       	add	r30, r18
     be6:	f3 1f       	adc	r31, r19
     be8:	80 81       	ld	r24, Z
     bea:	0e 94 b5 05 	call	0xb6a	; 0xb6a <USART_sendByte>
		i++;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	89 83       	std	Y+1, r24	; 0x01

void USART_sendString (const u8 *str)	// Function to send string
{
	u8 i = 0;

	while (str[i] != '\0')
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	fc 01       	movw	r30, r24
     c00:	e2 0f       	add	r30, r18
     c02:	f3 1f       	adc	r31, r19
     c04:	80 81       	ld	r24, Z
     c06:	88 23       	and	r24, r24
     c08:	39 f7       	brne	.-50     	; 0xbd8 <USART_sendString+0x14>
	{
		USART_sendByte(str[i]);
		i++;
	}
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <USART_receiveString>:

void USART_receiveString (u8 *str)		// Function to receive string
{
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <USART_receiveString+0xa>
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
     c2a:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	9b 81       	ldd	r25, Y+3	; 0x03
     c36:	8c 01       	movw	r16, r24
     c38:	02 0f       	add	r16, r18
     c3a:	13 1f       	adc	r17, r19
     c3c:	0e 94 d3 05 	call	0xba6	; 0xba6 <USART_receiveByte>
     c40:	f8 01       	movw	r30, r16
     c42:	80 83       	st	Z, r24
     c44:	0f c0       	rjmp	.+30     	; 0xc64 <USART_receiveString+0x4e>
	while (str[i] != "#")
	{
		i++;
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	89 83       	std	Y+1, r24	; 0x01
		str[i] =USART_receiveByte();
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	9b 81       	ldd	r25, Y+3	; 0x03
     c56:	8c 01       	movw	r16, r24
     c58:	02 0f       	add	r16, r18
     c5a:	13 1f       	adc	r17, r19
     c5c:	0e 94 d3 05 	call	0xba6	; 0xba6 <USART_receiveByte>
     c60:	f8 01       	movw	r30, r16
     c62:	80 83       	st	Z, r24
void USART_receiveString (u8 *str)		// Function to receive string
{

	u8 i = 0;
	str[i] = USART_receiveByte();
	while (str[i] != "#")
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
     c6e:	fc 01       	movw	r30, r24
     c70:	e2 0f       	add	r30, r18
     c72:	f3 1f       	adc	r31, r19
     c74:	80 81       	ld	r24, Z
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 36       	cpi	r24, 0x60	; 96
     c7e:	9f 07       	cpc	r25, r31
     c80:	11 f7       	brne	.-60     	; 0xc46 <USART_receiveString+0x30>
	{
		i++;
		str[i] =USART_receiveByte();
	}
	str[i] = '\0';
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	9b 81       	ldd	r25, Y+3	; 0x03
     c8c:	fc 01       	movw	r30, r24
     c8e:	e2 0f       	add	r30, r18
     c90:	f3 1f       	adc	r31, r19
     c92:	10 82       	st	Z, r1
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <Set_PinDir>:


//	For Certain Bit

void Set_PinDir (GroupName_t group, PIN_NO_t number, PinDir_t direction)	// Function to set direction of certain bit
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	27 97       	sbiw	r28, 0x07	; 7
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	6a 83       	std	Y+2, r22	; 0x02
     cbc:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == OUTPUT)
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <Set_PinDir+0x22>
     cc4:	6f c0       	rjmp	.+222    	; 0xda4 <Set_PinDir+0x100>
	{
		switch (group)
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3f 83       	std	Y+7, r19	; 0x07
     cce:	2e 83       	std	Y+6, r18	; 0x06
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	9f 81       	ldd	r25, Y+7	; 0x07
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	91 05       	cpc	r25, r1
     cd8:	49 f1       	breq	.+82     	; 0xd2c <Set_PinDir+0x88>
     cda:	2e 81       	ldd	r18, Y+6	; 0x06
     cdc:	3f 81       	ldd	r19, Y+7	; 0x07
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	2c f4       	brge	.+10     	; 0xcee <Set_PinDir+0x4a>
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	61 f0       	breq	.+24     	; 0xd04 <Set_PinDir+0x60>
     cec:	ce c0       	rjmp	.+412    	; 0xe8a <Set_PinDir+0x1e6>
     cee:	2e 81       	ldd	r18, Y+6	; 0x06
     cf0:	3f 81       	ldd	r19, Y+7	; 0x07
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	31 05       	cpc	r19, r1
     cf6:	71 f1       	breq	.+92     	; 0xd54 <Set_PinDir+0xb0>
     cf8:	8e 81       	ldd	r24, Y+6	; 0x06
     cfa:	9f 81       	ldd	r25, Y+7	; 0x07
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	e9 f1       	breq	.+122    	; 0xd7c <Set_PinDir+0xd8>
     d02:	c3 c0       	rjmp	.+390    	; 0xe8a <Set_PinDir+0x1e6>
		{
		case PORT_A:
			SET_BIT(DDRA,number);
     d04:	aa e3       	ldi	r26, 0x3A	; 58
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ea e3       	ldi	r30, 0x3A	; 58
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <Set_PinDir+0x7e>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <Set_PinDir+0x7a>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	af c0       	rjmp	.+350    	; 0xe8a <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			SET_BIT(DDRB,number);
     d2c:	a7 e3       	ldi	r26, 0x37	; 55
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e7 e3       	ldi	r30, 0x37	; 55
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <Set_PinDir+0xa6>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <Set_PinDir+0xa2>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	9b c0       	rjmp	.+310    	; 0xe8a <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			SET_BIT(DDRC,number);
     d54:	a4 e3       	ldi	r26, 0x34	; 52
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <Set_PinDir+0xce>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <Set_PinDir+0xca>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	87 c0       	rjmp	.+270    	; 0xe8a <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			SET_BIT(DDRD,number);
     d7c:	a1 e3       	ldi	r26, 0x31	; 49
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e1 e3       	ldi	r30, 0x31	; 49
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <Set_PinDir+0xf6>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <Set_PinDir+0xf2>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	73 c0       	rjmp	.+230    	; 0xe8a <Set_PinDir+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3d 83       	std	Y+5, r19	; 0x05
     dac:	2c 83       	std	Y+4, r18	; 0x04
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	91 05       	cpc	r25, r1
     db6:	59 f1       	breq	.+86     	; 0xe0e <Set_PinDir+0x16a>
     db8:	2c 81       	ldd	r18, Y+4	; 0x04
     dba:	3d 81       	ldd	r19, Y+5	; 0x05
     dbc:	22 30       	cpi	r18, 0x02	; 2
     dbe:	31 05       	cpc	r19, r1
     dc0:	2c f4       	brge	.+10     	; 0xdcc <Set_PinDir+0x128>
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	9d 81       	ldd	r25, Y+5	; 0x05
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	69 f0       	breq	.+26     	; 0xde4 <Set_PinDir+0x140>
     dca:	5f c0       	rjmp	.+190    	; 0xe8a <Set_PinDir+0x1e6>
     dcc:	2c 81       	ldd	r18, Y+4	; 0x04
     dce:	3d 81       	ldd	r19, Y+5	; 0x05
     dd0:	22 30       	cpi	r18, 0x02	; 2
     dd2:	31 05       	cpc	r19, r1
     dd4:	89 f1       	breq	.+98     	; 0xe38 <Set_PinDir+0x194>
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	9d 81       	ldd	r25, Y+5	; 0x05
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	91 05       	cpc	r25, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <Set_PinDir+0x13e>
     de0:	40 c0       	rjmp	.+128    	; 0xe62 <Set_PinDir+0x1be>
     de2:	53 c0       	rjmp	.+166    	; 0xe8a <Set_PinDir+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(DDRA,number);
     de4:	aa e3       	ldi	r26, 0x3A	; 58
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	ea e3       	ldi	r30, 0x3A	; 58
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <Set_PinDir+0x15e>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <Set_PinDir+0x15a>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	3e c0       	rjmp	.+124    	; 0xe8a <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB,number);
     e0e:	a7 e3       	ldi	r26, 0x37	; 55
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e7 e3       	ldi	r30, 0x37	; 55
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <Set_PinDir+0x188>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <Set_PinDir+0x184>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	29 c0       	rjmp	.+82     	; 0xe8a <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC,number);
     e38:	a4 e3       	ldi	r26, 0x34	; 52
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e3       	ldi	r30, 0x34	; 52
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Set_PinDir+0x1b2>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <Set_PinDir+0x1ae>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD,number);
     e62:	a1 e3       	ldi	r26, 0x31	; 49
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e1 e3       	ldi	r30, 0x31	; 49
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <Set_PinDir+0x1dc>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <Set_PinDir+0x1d8>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
			break;
		}
	}
}
     e8a:	27 96       	adiw	r28, 0x07	; 7
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <Set_PinLevel>:

void Set_PinLevel (GroupName_t group, PIN_NO_t number, PinLevel_t level )	// Function to set level of certain bit
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	27 97       	sbiw	r28, 0x07	; 7
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	6a 83       	std	Y+2, r22	; 0x02
     eb4:	4b 83       	std	Y+3, r20	; 0x03
	if (level == HIGH)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <Set_PinLevel+0x22>
     ebc:	6f c0       	rjmp	.+222    	; 0xf9c <Set_PinLevel+0x100>
	{
		switch (group)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3f 83       	std	Y+7, r19	; 0x07
     ec6:	2e 83       	std	Y+6, r18	; 0x06
     ec8:	8e 81       	ldd	r24, Y+6	; 0x06
     eca:	9f 81       	ldd	r25, Y+7	; 0x07
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	49 f1       	breq	.+82     	; 0xf24 <Set_PinLevel+0x88>
     ed2:	2e 81       	ldd	r18, Y+6	; 0x06
     ed4:	3f 81       	ldd	r19, Y+7	; 0x07
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	2c f4       	brge	.+10     	; 0xee6 <Set_PinLevel+0x4a>
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	61 f0       	breq	.+24     	; 0xefc <Set_PinLevel+0x60>
     ee4:	ce c0       	rjmp	.+412    	; 0x1082 <Set_PinLevel+0x1e6>
     ee6:	2e 81       	ldd	r18, Y+6	; 0x06
     ee8:	3f 81       	ldd	r19, Y+7	; 0x07
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	71 f1       	breq	.+92     	; 0xf4c <Set_PinLevel+0xb0>
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	e9 f1       	breq	.+122    	; 0xf74 <Set_PinLevel+0xd8>
     efa:	c3 c0       	rjmp	.+390    	; 0x1082 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			SET_BIT(PORTA,number);
     efc:	ab e3       	ldi	r26, 0x3B	; 59
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	eb e3       	ldi	r30, 0x3B	; 59
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <Set_PinLevel+0x7e>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <Set_PinLevel+0x7a>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	af c0       	rjmp	.+350    	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			SET_BIT(PORTB,number);
     f24:	a8 e3       	ldi	r26, 0x38	; 56
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e3       	ldi	r30, 0x38	; 56
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <Set_PinLevel+0xa6>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <Set_PinLevel+0xa2>
     f46:	84 2b       	or	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	9b c0       	rjmp	.+310    	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			SET_BIT(PORTC,number);
     f4c:	a5 e3       	ldi	r26, 0x35	; 53
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e3       	ldi	r30, 0x35	; 53
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <Set_PinLevel+0xce>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <Set_PinLevel+0xca>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	87 c0       	rjmp	.+270    	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			SET_BIT(PORTD,number);
     f74:	a2 e3       	ldi	r26, 0x32	; 50
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e2 e3       	ldi	r30, 0x32	; 50
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <Set_PinLevel+0xf6>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <Set_PinLevel+0xf2>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	73 c0       	rjmp	.+230    	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	59 f1       	breq	.+86     	; 0x1006 <Set_PinLevel+0x16a>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <Set_PinLevel+0x128>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f0       	breq	.+26     	; 0xfdc <Set_PinLevel+0x140>
     fc2:	5f c0       	rjmp	.+190    	; 0x1082 <Set_PinLevel+0x1e6>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	89 f1       	breq	.+98     	; 0x1030 <Set_PinLevel+0x194>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <Set_PinLevel+0x13e>
     fd8:	40 c0       	rjmp	.+128    	; 0x105a <Set_PinLevel+0x1be>
     fda:	53 c0       	rjmp	.+166    	; 0x1082 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(PORTA,number);
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <Set_PinLevel+0x15e>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <Set_PinLevel+0x15a>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	3e c0       	rjmp	.+124    	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB,number);
    1006:	a8 e3       	ldi	r26, 0x38	; 56
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <Set_PinLevel+0x188>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <Set_PinLevel+0x184>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	29 c0       	rjmp	.+82     	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC,number);
    1030:	a5 e3       	ldi	r26, 0x35	; 53
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <Set_PinLevel+0x1b2>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <Set_PinLevel+0x1ae>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD,number);
    105a:	a2 e3       	ldi	r26, 0x32	; 50
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <Set_PinLevel+0x1dc>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <Set_PinLevel+0x1d8>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
			break;
		}
	}
}
    1082:	27 96       	adiw	r28, 0x07	; 7
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <Read_PinLevel>:

RET_VALUE_t Read_PinLevel (GroupName_t group, PIN_NO_t number)		// Function to read level of certain bit
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <Read_PinLevel+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <Read_PinLevel+0x8>
    109c:	0f 92       	push	r0
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	8a 83       	std	Y+2, r24	; 0x02
    10a4:	6b 83       	std	Y+3, r22	; 0x03
	RET_VALUE_t ret;
	switch (group)
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3d 83       	std	Y+5, r19	; 0x05
    10ae:	2c 83       	std	Y+4, r18	; 0x04
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	39 f1       	breq	.+78     	; 0x1108 <Read_PinLevel+0x74>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <Read_PinLevel+0x3a>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <Read_PinLevel+0x50>
    10cc:	52 c0       	rjmp	.+164    	; 0x1172 <Read_PinLevel+0xde>
    10ce:	2c 81       	ldd	r18, Y+4	; 0x04
    10d0:	3d 81       	ldd	r19, Y+5	; 0x05
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	51 f1       	breq	.+84     	; 0x112c <Read_PinLevel+0x98>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	b9 f1       	breq	.+110    	; 0x1150 <Read_PinLevel+0xbc>
    10e2:	47 c0       	rjmp	.+142    	; 0x1172 <Read_PinLevel+0xde>
	{
	case PORT_A:
		ret = BIT_IS_SET(PINA,number);
    10e4:	e9 e3       	ldi	r30, 0x39	; 57
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <Read_PinLevel+0x6a>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <Read_PinLevel+0x66>
    1102:	84 23       	and	r24, r20
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	35 c0       	rjmp	.+106    	; 0x1172 <Read_PinLevel+0xde>
		break;
	case PORT_B:
		ret = BIT_IS_SET(PINB,number);
    1108:	e6 e3       	ldi	r30, 0x36	; 54
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <Read_PinLevel+0x8e>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <Read_PinLevel+0x8a>
    1126:	84 23       	and	r24, r20
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	23 c0       	rjmp	.+70     	; 0x1172 <Read_PinLevel+0xde>
		break;
	case PORT_C:
		ret = BIT_IS_SET(PINC,number);
    112c:	e3 e3       	ldi	r30, 0x33	; 51
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <Read_PinLevel+0xb2>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <Read_PinLevel+0xae>
    114a:	84 23       	and	r24, r20
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	11 c0       	rjmp	.+34     	; 0x1172 <Read_PinLevel+0xde>
		break;
	case PORT_D:
		ret = BIT_IS_SET(PIND,number);
    1150:	e0 e3       	ldi	r30, 0x30	; 48
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <Read_PinLevel+0xd6>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <Read_PinLevel+0xd2>
    116e:	84 23       	and	r24, r20
    1170:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <Set_GroupDir>:

//	 For Group Of Pins

void Set_GroupDir (GroupName_t group, u8 value)							// Function to set direction of group of pins
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <Set_GroupDir+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <Set_GroupDir+0x8>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 83       	std	Y+4, r19	; 0x04
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	d1 f0       	breq	.+52     	; 0x11dc <Set_GroupDir+0x58>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <Set_GroupDir+0x38>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <Set_GroupDir+0x4e>
    11ba:	1e c0       	rjmp	.+60     	; 0x11f8 <Set_GroupDir+0x74>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <Set_GroupDir+0x62>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <Set_GroupDir+0x6c>
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <Set_GroupDir+0x74>
	{
	case PORT_A:
		DDRA = value;
    11d2:	ea e3       	ldi	r30, 0x3A	; 58
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <Set_GroupDir+0x74>
		break;
	case PORT_B:
		DDRB = value;
    11dc:	e7 e3       	ldi	r30, 0x37	; 55
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	80 83       	st	Z, r24
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <Set_GroupDir+0x74>
		break;
	case PORT_C:
		DDRC = value;
    11e6:	e4 e3       	ldi	r30, 0x34	; 52
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <Set_GroupDir+0x74>
		break;
	case PORT_D:
		DDRD = value;
    11f0:	e1 e3       	ldi	r30, 0x31	; 49
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
		break;
	}
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <Set_GroupLevel>:

void Set_GroupLevel (GroupName_t group, u8 value)							// Function to set level of group of pins
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <Set_GroupLevel+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <Set_GroupLevel+0x8>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	d1 f0       	breq	.+52     	; 0x125e <Set_GroupLevel+0x58>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <Set_GroupLevel+0x38>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	61 f0       	breq	.+24     	; 0x1254 <Set_GroupLevel+0x4e>
    123c:	1e c0       	rjmp	.+60     	; 0x127a <Set_GroupLevel+0x74>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	81 f0       	breq	.+32     	; 0x1268 <Set_GroupLevel+0x62>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <Set_GroupLevel+0x6c>
    1252:	13 c0       	rjmp	.+38     	; 0x127a <Set_GroupLevel+0x74>
	{
	case PORT_A:
		PORTA = value;
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	80 83       	st	Z, r24
    125c:	0e c0       	rjmp	.+28     	; 0x127a <Set_GroupLevel+0x74>
		break;
	case PORT_B:
		PORTB = value;
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	09 c0       	rjmp	.+18     	; 0x127a <Set_GroupLevel+0x74>
		break;
	case PORT_C:
		PORTC = value;
    1268:	e5 e3       	ldi	r30, 0x35	; 53
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	04 c0       	rjmp	.+8      	; 0x127a <Set_GroupLevel+0x74>
		break;
	case PORT_D:
		PORTD = value;
    1272:	e2 e3       	ldi	r30, 0x32	; 50
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
		break;
	}
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <Keypad_GetPressedKey>:

#endif


u8 Keypad_GetPressedKey (void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <Keypad_GetPressedKey+0x6>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    1292:	19 82       	std	Y+1, r1	; 0x01
    1294:	4c c0       	rjmp	.+152    	; 0x132e <Keypad_GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	80 e1       	ldi	r24, 0x10	; 16
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <Keypad_GetPressedKey+0x22>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	2a 95       	dec	r18
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <Keypad_GetPressedKey+0x1e>
    12ae:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    12b0:	eb e3       	ldi	r30, 0x3B	; 59
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	80 e1       	ldi	r24, 0x10	; 16
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <Keypad_GetPressedKey+0x3e>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <Keypad_GetPressedKey+0x3a>
    12ca:	80 95       	com	r24
    12cc:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    12ce:	1a 82       	std	Y+2, r1	; 0x02
    12d0:	28 c0       	rjmp	.+80     	; 0x1322 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    12d2:	e9 e3       	ldi	r30, 0x39	; 57
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <Keypad_GetPressedKey+0x62>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <Keypad_GetPressedKey+0x5e>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	90 70       	andi	r25, 0x00	; 0
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	91 f4       	brne	.+36     	; 0x131c <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	98 2f       	mov	r25, r24
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	89 0f       	add	r24, r25
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	0e 94 9c 09 	call	0x1338	; 0x1338 <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	a8 f2       	brcs	.-86     	; 0x12d2 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey (void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	08 f4       	brcc	.+2      	; 0x1336 <Keypad_GetPressedKey+0xae>
    1334:	b0 cf       	rjmp	.-160    	; 0x1296 <Keypad_GetPressedKey+0xe>
    1336:	ad cf       	rjmp	.-166    	; 0x1292 <Keypad_GetPressedKey+0xa>

00001338 <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <Keypad_4x4_adjustKeyNumber+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <Keypad_4x4_adjustKeyNumber+0x8>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3c 83       	std	Y+4, r19	; 0x04
    1350:	2b 83       	std	Y+3, r18	; 0x03
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <Keypad_4x4_adjustKeyNumber+0x26>
    135c:	70 c0       	rjmp	.+224    	; 0x143e <Keypad_4x4_adjustKeyNumber+0x106>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	29 30       	cpi	r18, 0x09	; 9
    1364:	31 05       	cpc	r19, r1
    1366:	5c f5       	brge	.+86     	; 0x13be <Keypad_4x4_adjustKeyNumber+0x86>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <Keypad_4x4_adjustKeyNumber+0x3c>
    1372:	59 c0       	rjmp	.+178    	; 0x1426 <Keypad_4x4_adjustKeyNumber+0xee>
    1374:	2b 81       	ldd	r18, Y+3	; 0x03
    1376:	3c 81       	ldd	r19, Y+4	; 0x04
    1378:	25 30       	cpi	r18, 0x05	; 5
    137a:	31 05       	cpc	r19, r1
    137c:	9c f4       	brge	.+38     	; 0x13a4 <Keypad_4x4_adjustKeyNumber+0x6c>
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	91 05       	cpc	r25, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <Keypad_4x4_adjustKeyNumber+0x52>
    1388:	48 c0       	rjmp	.+144    	; 0x141a <Keypad_4x4_adjustKeyNumber+0xe2>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	23 30       	cpi	r18, 0x03	; 3
    1390:	31 05       	cpc	r19, r1
    1392:	0c f0       	brlt	.+2      	; 0x1396 <Keypad_4x4_adjustKeyNumber+0x5e>
    1394:	45 c0       	rjmp	.+138    	; 0x1420 <Keypad_4x4_adjustKeyNumber+0xe8>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <Keypad_4x4_adjustKeyNumber+0x6a>
    13a0:	39 c0       	rjmp	.+114    	; 0x1414 <Keypad_4x4_adjustKeyNumber+0xdc>
    13a2:	67 c0       	rjmp	.+206    	; 0x1472 <Keypad_4x4_adjustKeyNumber+0x13a>
    13a4:	2b 81       	ldd	r18, Y+3	; 0x03
    13a6:	3c 81       	ldd	r19, Y+4	; 0x04
    13a8:	26 30       	cpi	r18, 0x06	; 6
    13aa:	31 05       	cpc	r19, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <Keypad_4x4_adjustKeyNumber+0x78>
    13ae:	41 c0       	rjmp	.+130    	; 0x1432 <Keypad_4x4_adjustKeyNumber+0xfa>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	87 30       	cpi	r24, 0x07	; 7
    13b6:	91 05       	cpc	r25, r1
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <Keypad_4x4_adjustKeyNumber+0x84>
    13ba:	3e c0       	rjmp	.+124    	; 0x1438 <Keypad_4x4_adjustKeyNumber+0x100>
    13bc:	37 c0       	rjmp	.+110    	; 0x142c <Keypad_4x4_adjustKeyNumber+0xf4>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	2c 30       	cpi	r18, 0x0C	; 12
    13c4:	31 05       	cpc	r19, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <Keypad_4x4_adjustKeyNumber+0x92>
    13c8:	46 c0       	rjmp	.+140    	; 0x1456 <Keypad_4x4_adjustKeyNumber+0x11e>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	8d 30       	cpi	r24, 0x0D	; 13
    13d0:	91 05       	cpc	r25, r1
    13d2:	5c f4       	brge	.+22     	; 0x13ea <Keypad_4x4_adjustKeyNumber+0xb2>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	2a 30       	cpi	r18, 0x0A	; 10
    13da:	31 05       	cpc	r19, r1
    13dc:	b1 f1       	breq	.+108    	; 0x144a <Keypad_4x4_adjustKeyNumber+0x112>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	8b 30       	cpi	r24, 0x0B	; 11
    13e4:	91 05       	cpc	r25, r1
    13e6:	a4 f5       	brge	.+104    	; 0x1450 <Keypad_4x4_adjustKeyNumber+0x118>
    13e8:	2d c0       	rjmp	.+90     	; 0x1444 <Keypad_4x4_adjustKeyNumber+0x10c>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	2e 30       	cpi	r18, 0x0E	; 14
    13f0:	31 05       	cpc	r19, r1
    13f2:	b9 f1       	breq	.+110    	; 0x1462 <Keypad_4x4_adjustKeyNumber+0x12a>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	8e 30       	cpi	r24, 0x0E	; 14
    13fa:	91 05       	cpc	r25, r1
    13fc:	7c f1       	brlt	.+94     	; 0x145c <Keypad_4x4_adjustKeyNumber+0x124>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	2f 30       	cpi	r18, 0x0F	; 15
    1404:	31 05       	cpc	r19, r1
    1406:	79 f1       	breq	.+94     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x12e>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	80 31       	cpi	r24, 0x10	; 16
    140e:	91 05       	cpc	r25, r1
    1410:	69 f1       	breq	.+90     	; 0x146c <Keypad_4x4_adjustKeyNumber+0x134>
    1412:	2f c0       	rjmp	.+94     	; 0x1472 <Keypad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:		return 7;
    1414:	97 e0       	ldi	r25, 0x07	; 7
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	2d c0       	rjmp	.+90     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 2:		return 8;
    141a:	28 e0       	ldi	r18, 0x08	; 8
    141c:	2a 83       	std	Y+2, r18	; 0x02
    141e:	2a c0       	rjmp	.+84     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 3:		return 9;
    1420:	39 e0       	ldi	r19, 0x09	; 9
    1422:	3a 83       	std	Y+2, r19	; 0x02
    1424:	27 c0       	rjmp	.+78     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 4:		return '/';
    1426:	8f e2       	ldi	r24, 0x2F	; 47
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	24 c0       	rjmp	.+72     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 5:		return 4;
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	21 c0       	rjmp	.+66     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 6:		return 5;
    1432:	25 e0       	ldi	r18, 0x05	; 5
    1434:	2a 83       	std	Y+2, r18	; 0x02
    1436:	1e c0       	rjmp	.+60     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 7:		return 6;
    1438:	36 e0       	ldi	r19, 0x06	; 6
    143a:	3a 83       	std	Y+2, r19	; 0x02
    143c:	1b c0       	rjmp	.+54     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 8:		return '*';
    143e:	8a e2       	ldi	r24, 0x2A	; 42
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	18 c0       	rjmp	.+48     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 9:		return 1;
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	15 c0       	rjmp	.+42     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 10:	return 2;
    144a:	22 e0       	ldi	r18, 0x02	; 2
    144c:	2a 83       	std	Y+2, r18	; 0x02
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 11:	return 3;
    1450:	33 e0       	ldi	r19, 0x03	; 3
    1452:	3a 83       	std	Y+2, r19	; 0x02
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 12:	return '-';
    1456:	8d e2       	ldi	r24, 0x2D	; 45
    1458:	8a 83       	std	Y+2, r24	; 0x02
    145a:	0c c0       	rjmp	.+24     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 13:	return 'c';
    145c:	93 e6       	ldi	r25, 0x63	; 99
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	09 c0       	rjmp	.+18     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 14:	return 0;
    1462:	1a 82       	std	Y+2, r1	; 0x02
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 15:	return '=';
    1466:	2d e3       	ldi	r18, 0x3D	; 61
    1468:	2a 83       	std	Y+2, r18	; 0x02
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 16:	return '+';
    146c:	3b e2       	ldi	r19, 0x2B	; 43
    146e:	3a 83       	std	Y+2, r19	; 0x02
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <Keypad_4x4_adjustKeyNumber+0x13c>
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <Keypad_4x4_adjustKeyNumber+0x140>
	break;
	}
}
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <LCD_Init>:
#include <stdio.h>
/**************************************************************************************************/
/****************************************Function Definition***************************************/

void LCD_Init (void)				// Function to initialize the LCD
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	e8 97       	sbiw	r28, 0x38	; 56
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
	Set_GroupDir (LCD_DATA_PORT_DIR,0xFF);			//Set PORTC as o/p port
    149e:	e7 e3       	ldi	r30, 0x37	; 55
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	6f ef       	ldi	r22, 0xFF	; 255
    14a6:	0e 94 c2 08 	call	0x1184	; 0x1184 <Set_GroupDir>
	LCD_CTRL_PORT_DIR = (1<<EN) | (1<<RS) | (1<<RW);//Set RS, RW, E pins as o/p port
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 ee       	ldi	r24, 0xE0	; 224
    14b0:	80 83       	st	Z, r24
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a8 e4       	ldi	r26, 0x48	; 72
    14b8:	b2 e4       	ldi	r27, 0x42	; 66
    14ba:	8d ab       	std	Y+53, r24	; 0x35
    14bc:	9e ab       	std	Y+54, r25	; 0x36
    14be:	af ab       	std	Y+55, r26	; 0x37
    14c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6d a9       	ldd	r22, Y+53	; 0x35
    14c4:	7e a9       	ldd	r23, Y+54	; 0x36
    14c6:	8f a9       	ldd	r24, Y+55	; 0x37
    14c8:	98 ad       	ldd	r25, Y+56	; 0x38
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	55 e4       	ldi	r21, 0x45	; 69
    14d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	89 ab       	std	Y+49, r24	; 0x31
    14dc:	9a ab       	std	Y+50, r25	; 0x32
    14de:	ab ab       	std	Y+51, r26	; 0x33
    14e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14e2:	69 a9       	ldd	r22, Y+49	; 0x31
    14e4:	7a a9       	ldd	r23, Y+50	; 0x32
    14e6:	8b a9       	ldd	r24, Y+51	; 0x33
    14e8:	9c a9       	ldd	r25, Y+52	; 0x34
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <LCD_Init+0x7a>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	98 ab       	std	Y+48, r25	; 0x30
    1500:	8f a7       	std	Y+47, r24	; 0x2f
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    1504:	69 a9       	ldd	r22, Y+49	; 0x31
    1506:	7a a9       	ldd	r23, Y+50	; 0x32
    1508:	8b a9       	ldd	r24, Y+51	; 0x33
    150a:	9c a9       	ldd	r25, Y+52	; 0x34
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6d a9       	ldd	r22, Y+53	; 0x35
    151e:	7e a9       	ldd	r23, Y+54	; 0x36
    1520:	8f a9       	ldd	r24, Y+55	; 0x37
    1522:	98 ad       	ldd	r25, Y+56	; 0x38
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	98 ab       	std	Y+48, r25	; 0x30
    1542:	8f a7       	std	Y+47, r24	; 0x2f
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <LCD_Init+0xda>
    1546:	80 e9       	ldi	r24, 0x90	; 144
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	9e a7       	std	Y+46, r25	; 0x2e
    154c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    154e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1550:	9e a5       	ldd	r25, Y+46	; 0x2e
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_Init+0xc8>
    1556:	9e a7       	std	Y+46, r25	; 0x2e
    1558:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8f a5       	ldd	r24, Y+47	; 0x2f
    155c:	98 a9       	ldd	r25, Y+48	; 0x30
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	98 ab       	std	Y+48, r25	; 0x30
    1562:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8f a5       	ldd	r24, Y+47	; 0x2f
    1566:	98 a9       	ldd	r25, Y+48	; 0x30
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <LCD_Init+0xbc>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	69 a9       	ldd	r22, Y+49	; 0x31
    1570:	7a a9       	ldd	r23, Y+50	; 0x32
    1572:	8b a9       	ldd	r24, Y+51	; 0x33
    1574:	9c a9       	ldd	r25, Y+52	; 0x34
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	98 ab       	std	Y+48, r25	; 0x30
    1580:	8f a7       	std	Y+47, r24	; 0x2f
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	9c a7       	std	Y+44, r25	; 0x2c
    1588:	8b a7       	std	Y+43, r24	; 0x2b
    158a:	8b a5       	ldd	r24, Y+43	; 0x2b
    158c:	9c a5       	ldd	r25, Y+44	; 0x2c
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <LCD_Init+0x104>
    1592:	9c a7       	std	Y+44, r25	; 0x2c
    1594:	8b a7       	std	Y+43, r24	; 0x2b
	// OR  Set_GroupDir (LCD_CTRL_PORT,0x6F);
	_delay_ms(50); 								//Delay 50ms before function initialization
	Send_CMD (TWO_LINE_LCD_EIGHT_BIT_MODE);		//Set LCD mode as 8-bit mode, 2-lines, 5*8 Dots
    1596:	88 e3       	ldi	r24, 0x38	; 56
    1598:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e8       	ldi	r26, 0x80	; 128
    15a2:	bf e3       	ldi	r27, 0x3F	; 63
    15a4:	8f a3       	std	Y+39, r24	; 0x27
    15a6:	98 a7       	std	Y+40, r25	; 0x28
    15a8:	a9 a7       	std	Y+41, r26	; 0x29
    15aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	6f a1       	ldd	r22, Y+39	; 0x27
    15ae:	78 a5       	ldd	r23, Y+40	; 0x28
    15b0:	89 a5       	ldd	r24, Y+41	; 0x29
    15b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	55 e4       	ldi	r21, 0x45	; 69
    15bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8b a3       	std	Y+35, r24	; 0x23
    15c6:	9c a3       	std	Y+36, r25	; 0x24
    15c8:	ad a3       	std	Y+37, r26	; 0x25
    15ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15cc:	6b a1       	ldd	r22, Y+35	; 0x23
    15ce:	7c a1       	ldd	r23, Y+36	; 0x24
    15d0:	8d a1       	ldd	r24, Y+37	; 0x25
    15d2:	9e a1       	ldd	r25, Y+38	; 0x26
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <LCD_Init+0x164>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9a a3       	std	Y+34, r25	; 0x22
    15ea:	89 a3       	std	Y+33, r24	; 0x21
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <LCD_Init+0x1e2>
	else if (__tmp > 65535)
    15ee:	6b a1       	ldd	r22, Y+35	; 0x23
    15f0:	7c a1       	ldd	r23, Y+36	; 0x24
    15f2:	8d a1       	ldd	r24, Y+37	; 0x25
    15f4:	9e a1       	ldd	r25, Y+38	; 0x26
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <LCD_Init+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	6f a1       	ldd	r22, Y+39	; 0x27
    1608:	78 a5       	ldd	r23, Y+40	; 0x28
    160a:	89 a5       	ldd	r24, Y+41	; 0x29
    160c:	9a a5       	ldd	r25, Y+42	; 0x2a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
    162e:	0f c0       	rjmp	.+30     	; 0x164e <LCD_Init+0x1c4>
    1630:	80 e9       	ldi	r24, 0x90	; 144
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	98 a3       	std	Y+32, r25	; 0x20
    1636:	8f 8f       	std	Y+31, r24	; 0x1f
    1638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    163a:	98 a1       	ldd	r25, Y+32	; 0x20
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_Init+0x1b2>
    1640:	98 a3       	std	Y+32, r25	; 0x20
    1642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	89 a1       	ldd	r24, Y+33	; 0x21
    1646:	9a a1       	ldd	r25, Y+34	; 0x22
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9a a3       	std	Y+34, r25	; 0x22
    164c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	89 a1       	ldd	r24, Y+33	; 0x21
    1650:	9a a1       	ldd	r25, Y+34	; 0x22
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <LCD_Init+0x1a6>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <LCD_Init+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	6b a1       	ldd	r22, Y+35	; 0x23
    165a:	7c a1       	ldd	r23, Y+36	; 0x24
    165c:	8d a1       	ldd	r24, Y+37	; 0x25
    165e:	9e a1       	ldd	r25, Y+38	; 0x26
    1660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9a a3       	std	Y+34, r25	; 0x22
    166a:	89 a3       	std	Y+33, r24	; 0x21
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	9e 8f       	std	Y+30, r25	; 0x1e
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_Init+0x1ee>
    167c:	9e 8f       	std	Y+30, r25	; 0x1e
    167e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Send_CMD (CURSOR_OFF);						//Choose Cursor as off
    1680:	8c e0       	ldi	r24, 0x0C	; 12
    1682:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e8       	ldi	r26, 0x80	; 128
    168c:	bf e3       	ldi	r27, 0x3F	; 63
    168e:	89 8f       	std	Y+25, r24	; 0x19
    1690:	9a 8f       	std	Y+26, r25	; 0x1a
    1692:	ab 8f       	std	Y+27, r26	; 0x1b
    1694:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	69 8d       	ldd	r22, Y+25	; 0x19
    1698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a e7       	ldi	r20, 0x7A	; 122
    16a4:	55 e4       	ldi	r21, 0x45	; 69
    16a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8d 8b       	std	Y+21, r24	; 0x15
    16b0:	9e 8b       	std	Y+22, r25	; 0x16
    16b2:	af 8b       	std	Y+23, r26	; 0x17
    16b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b6:	6d 89       	ldd	r22, Y+21	; 0x15
    16b8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	98 8d       	ldd	r25, Y+24	; 0x18
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <LCD_Init+0x24e>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 8b       	std	Y+20, r25	; 0x14
    16d4:	8b 8b       	std	Y+19, r24	; 0x13
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <LCD_Init+0x2cc>
	else if (__tmp > 65535)
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <LCD_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	69 8d       	ldd	r22, Y+25	; 0x19
    16f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	8b 8b       	std	Y+19, r24	; 0x13
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <LCD_Init+0x2ae>
    171a:	80 e9       	ldi	r24, 0x90	; 144
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	9a 8b       	std	Y+18, r25	; 0x12
    1720:	89 8b       	std	Y+17, r24	; 0x11
    1722:	89 89       	ldd	r24, Y+17	; 0x11
    1724:	9a 89       	ldd	r25, Y+18	; 0x12
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_Init+0x29c>
    172a:	9a 8b       	std	Y+18, r25	; 0x12
    172c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	8b 89       	ldd	r24, Y+19	; 0x13
    1730:	9c 89       	ldd	r25, Y+20	; 0x14
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	9c 8b       	std	Y+20, r25	; 0x14
    1736:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1738:	8b 89       	ldd	r24, Y+19	; 0x13
    173a:	9c 89       	ldd	r25, Y+20	; 0x14
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <LCD_Init+0x290>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <LCD_Init+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9c 8b       	std	Y+20, r25	; 0x14
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	8b 89       	ldd	r24, Y+19	; 0x13
    1758:	9c 89       	ldd	r25, Y+20	; 0x14
    175a:	98 8b       	std	Y+16, r25	; 0x10
    175c:	8f 87       	std	Y+15, r24	; 0x0f
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	98 89       	ldd	r25, Y+16	; 0x10
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_Init+0x2d8>
    1766:	98 8b       	std	Y+16, r25	; 0x10
    1768:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Send_CMD (CLEAR_COMMAND);					//Clear LCD at initialization
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e4       	ldi	r27, 0x40	; 64
    1778:	8b 87       	std	Y+11, r24	; 0x0b
    177a:	9c 87       	std	Y+12, r25	; 0x0c
    177c:	ad 87       	std	Y+13, r26	; 0x0d
    177e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a e7       	ldi	r20, 0x7A	; 122
    178e:	55 e4       	ldi	r21, 0x45	; 69
    1790:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8f 83       	std	Y+7, r24	; 0x07
    179a:	98 87       	std	Y+8, r25	; 0x08
    179c:	a9 87       	std	Y+9, r26	; 0x09
    179e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_Init+0x338>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_Init+0x3b6>
	else if (__tmp > 65535)
    17c2:	6f 81       	ldd	r22, Y+7	; 0x07
    17c4:	78 85       	ldd	r23, Y+8	; 0x08
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_Init+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_Init+0x398>
    1804:	80 e9       	ldi	r24, 0x90	; 144
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_Init+0x386>
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_Init+0x37a>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <LCD_Init+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_Init+0x3c2>
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1854:	e8 96       	adiw	r28, 0x38	; 56
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <Send_CMD>:

void Send_CMD (u8 cmd)				// Function to send commands to LCD
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	ab 97       	sbiw	r28, 0x2b	; 43
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	8b a7       	std	Y+43, r24	; 0x2b
	CLEAR_BIT(LCD_CTRL_PORT, RS);	//Send RS Pin = 0 (Command Instruction)
    187c:	a2 e3       	ldi	r26, 0x32	; 50
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e2 e3       	ldi	r30, 0x32	; 50
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8f 7d       	andi	r24, 0xDF	; 223
    1888:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//Send RW Pin = 0 (Write Mood)
    188a:	a2 e3       	ldi	r26, 0x32	; 50
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8f 7b       	andi	r24, 0xBF	; 191
    1896:	8c 93       	st	X, r24
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e8       	ldi	r26, 0x80	; 128
    189e:	bf e3       	ldi	r27, 0x3F	; 63
    18a0:	8f a3       	std	Y+39, r24	; 0x27
    18a2:	98 a7       	std	Y+40, r25	; 0x28
    18a4:	a9 a7       	std	Y+41, r26	; 0x29
    18a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6f a1       	ldd	r22, Y+39	; 0x27
    18aa:	78 a5       	ldd	r23, Y+40	; 0x28
    18ac:	89 a5       	ldd	r24, Y+41	; 0x29
    18ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	55 e4       	ldi	r21, 0x45	; 69
    18b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8b a3       	std	Y+35, r24	; 0x23
    18c2:	9c a3       	std	Y+36, r25	; 0x24
    18c4:	ad a3       	std	Y+37, r26	; 0x25
    18c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <Send_CMD+0x84>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9a a3       	std	Y+34, r25	; 0x22
    18e6:	89 a3       	std	Y+33, r24	; 0x21
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <Send_CMD+0x102>
	else if (__tmp > 65535)
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <Send_CMD+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6f a1       	ldd	r22, Y+39	; 0x27
    1904:	78 a5       	ldd	r23, Y+40	; 0x28
    1906:	89 a5       	ldd	r24, Y+41	; 0x29
    1908:	9a a5       	ldd	r25, Y+42	; 0x2a
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9a a3       	std	Y+34, r25	; 0x22
    1928:	89 a3       	std	Y+33, r24	; 0x21
    192a:	0f c0       	rjmp	.+30     	; 0x194a <Send_CMD+0xe4>
    192c:	80 e9       	ldi	r24, 0x90	; 144
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	98 a3       	std	Y+32, r25	; 0x20
    1932:	8f 8f       	std	Y+31, r24	; 0x1f
    1934:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1936:	98 a1       	ldd	r25, Y+32	; 0x20
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <Send_CMD+0xd2>
    193c:	98 a3       	std	Y+32, r25	; 0x20
    193e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9a a3       	std	Y+34, r25	; 0x22
    1948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	89 a1       	ldd	r24, Y+33	; 0x21
    194c:	9a a1       	ldd	r25, Y+34	; 0x22
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <Send_CMD+0xc6>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <Send_CMD+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6b a1       	ldd	r22, Y+35	; 0x23
    1956:	7c a1       	ldd	r23, Y+36	; 0x24
    1958:	8d a1       	ldd	r24, Y+37	; 0x25
    195a:	9e a1       	ldd	r25, Y+38	; 0x26
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9a a3       	std	Y+34, r25	; 0x22
    1966:	89 a3       	std	Y+33, r24	; 0x21
    1968:	89 a1       	ldd	r24, Y+33	; 0x21
    196a:	9a a1       	ldd	r25, Y+34	; 0x22
    196c:	9e 8f       	std	Y+30, r25	; 0x1e
    196e:	8d 8f       	std	Y+29, r24	; 0x1d
    1970:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1972:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <Send_CMD+0x10e>
    1978:	9e 8f       	std	Y+30, r25	; 0x1e
    197a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay 40ns until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Send E Pin = 1 (Enable LCD)
    197c:	a2 e3       	ldi	r26, 0x32	; 50
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 68       	ori	r24, 0x80	; 128
    1988:	8c 93       	st	X, r24
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e8       	ldi	r26, 0x80	; 128
    1990:	bf e3       	ldi	r27, 0x3F	; 63
    1992:	89 8f       	std	Y+25, r24	; 0x19
    1994:	9a 8f       	std	Y+26, r25	; 0x1a
    1996:	ab 8f       	std	Y+27, r26	; 0x1b
    1998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	69 8d       	ldd	r22, Y+25	; 0x19
    199c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	4a e7       	ldi	r20, 0x7A	; 122
    19a8:	55 e4       	ldi	r21, 0x45	; 69
    19aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8d 8b       	std	Y+21, r24	; 0x15
    19b4:	9e 8b       	std	Y+22, r25	; 0x16
    19b6:	af 8b       	std	Y+23, r26	; 0x17
    19b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ba:	6d 89       	ldd	r22, Y+21	; 0x15
    19bc:	7e 89       	ldd	r23, Y+22	; 0x16
    19be:	8f 89       	ldd	r24, Y+23	; 0x17
    19c0:	98 8d       	ldd	r25, Y+24	; 0x18
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ce:	88 23       	and	r24, r24
    19d0:	2c f4       	brge	.+10     	; 0x19dc <Send_CMD+0x176>
		__ticks = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9c 8b       	std	Y+20, r25	; 0x14
    19d8:	8b 8b       	std	Y+19, r24	; 0x13
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <Send_CMD+0x1f4>
	else if (__tmp > 65535)
    19dc:	6d 89       	ldd	r22, Y+21	; 0x15
    19de:	7e 89       	ldd	r23, Y+22	; 0x16
    19e0:	8f 89       	ldd	r24, Y+23	; 0x17
    19e2:	98 8d       	ldd	r25, Y+24	; 0x18
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	4c f5       	brge	.+82     	; 0x1a46 <Send_CMD+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	69 8d       	ldd	r22, Y+25	; 0x19
    19f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	8b 8b       	std	Y+19, r24	; 0x13
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <Send_CMD+0x1d6>
    1a1e:	80 e9       	ldi	r24, 0x90	; 144
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	9a 8b       	std	Y+18, r25	; 0x12
    1a24:	89 8b       	std	Y+17, r24	; 0x11
    1a26:	89 89       	ldd	r24, Y+17	; 0x11
    1a28:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <Send_CMD+0x1c4>
    1a2e:	9a 8b       	std	Y+18, r25	; 0x12
    1a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	9c 8b       	std	Y+20, r25	; 0x14
    1a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <Send_CMD+0x1b8>
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <Send_CMD+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	6d 89       	ldd	r22, Y+21	; 0x15
    1a48:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9c 8b       	std	Y+20, r25	; 0x14
    1a58:	8b 8b       	std	Y+19, r24	; 0x13
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	98 8b       	std	Y+16, r25	; 0x10
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	98 89       	ldd	r25, Y+16	; 0x10
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <Send_CMD+0x200>
    1a6a:	98 8b       	std	Y+16, r25	; 0x10
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay 1500ns until Enable Start
	LCD_DATA_PORT = cmd; 			//Send command through data pins
    1a6e:	e8 e3       	ldi	r30, 0x38	; 56
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a74:	80 83       	st	Z, r24
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e8       	ldi	r26, 0x80	; 128
    1a7c:	bf e3       	ldi	r27, 0x3F	; 63
    1a7e:	8b 87       	std	Y+11, r24	; 0x0b
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	ad 87       	std	Y+13, r26	; 0x0d
    1a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	55 e4       	ldi	r21, 0x45	; 69
    1a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8f 83       	std	Y+7, r24	; 0x07
    1aa0:	98 87       	std	Y+8, r25	; 0x08
    1aa2:	a9 87       	std	Y+9, r26	; 0x09
    1aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <Send_CMD+0x262>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <Send_CMD+0x2e0>
	else if (__tmp > 65535)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <Send_CMD+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <Send_CMD+0x2c2>
    1b0a:	80 e9       	ldi	r24, 0x90	; 144
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <Send_CMD+0x2b0>
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <Send_CMD+0x2a4>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <Send_CMD+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <Send_CMD+0x2ec>
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay 10ns until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Send E Pin = 0 (Disable LCD)
    1b5a:	a2 e3       	ldi	r26, 0x32	; 50
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8f 77       	andi	r24, 0x7F	; 127
    1b66:	8c 93       	st	X, r24
}
    1b68:	ab 96       	adiw	r28, 0x2b	; 43
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <Send_DATA>:

void Send_DATA (u8 data)			// Function to send data to LCD
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	ab 97       	sbiw	r28, 0x2b	; 43
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT(LCD_CTRL_PORT, RS);		//Send RS Pin = 1 (Command Instruction)
    1b90:	a2 e3       	ldi	r26, 0x32	; 50
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e2 e3       	ldi	r30, 0x32	; 50
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 62       	ori	r24, 0x20	; 32
    1b9c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//Send RW Pin = 0 (Write Mood)
    1b9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e2 e3       	ldi	r30, 0x32	; 50
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 7b       	andi	r24, 0xBF	; 191
    1baa:	8c 93       	st	X, r24
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e8       	ldi	r26, 0x80	; 128
    1bb2:	bf e3       	ldi	r27, 0x3F	; 63
    1bb4:	8f a3       	std	Y+39, r24	; 0x27
    1bb6:	98 a7       	std	Y+40, r25	; 0x28
    1bb8:	a9 a7       	std	Y+41, r26	; 0x29
    1bba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a e7       	ldi	r20, 0x7A	; 122
    1bca:	55 e4       	ldi	r21, 0x45	; 69
    1bcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8b a3       	std	Y+35, r24	; 0x23
    1bd6:	9c a3       	std	Y+36, r25	; 0x24
    1bd8:	ad a3       	std	Y+37, r26	; 0x25
    1bda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bde:	7c a1       	ldd	r23, Y+36	; 0x24
    1be0:	8d a1       	ldd	r24, Y+37	; 0x25
    1be2:	9e a1       	ldd	r25, Y+38	; 0x26
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <Send_DATA+0x84>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9a a3       	std	Y+34, r25	; 0x22
    1bfa:	89 a3       	std	Y+33, r24	; 0x21
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <Send_DATA+0x102>
	else if (__tmp > 65535)
    1bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1c00:	7c a1       	ldd	r23, Y+36	; 0x24
    1c02:	8d a1       	ldd	r24, Y+37	; 0x25
    1c04:	9e a1       	ldd	r25, Y+38	; 0x26
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <Send_DATA+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6f a1       	ldd	r22, Y+39	; 0x27
    1c18:	78 a5       	ldd	r23, Y+40	; 0x28
    1c1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <Send_DATA+0xe4>
    1c40:	80 e9       	ldi	r24, 0x90	; 144
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	98 a3       	std	Y+32, r25	; 0x20
    1c46:	8f 8f       	std	Y+31, r24	; 0x1f
    1c48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c4a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <Send_DATA+0xd2>
    1c50:	98 a3       	std	Y+32, r25	; 0x20
    1c52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	89 a1       	ldd	r24, Y+33	; 0x21
    1c56:	9a a1       	ldd	r25, Y+34	; 0x22
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9a a3       	std	Y+34, r25	; 0x22
    1c5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <Send_DATA+0xc6>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <Send_DATA+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
    1c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c80:	9e 8f       	std	Y+30, r25	; 0x1e
    1c82:	8d 8f       	std	Y+29, r24	; 0x1d
    1c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <Send_DATA+0x10e>
    1c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay 40ns until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Send E Pin = 1 (Enable LCD)
    1c90:	a2 e3       	ldi	r26, 0x32	; 50
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e2 e3       	ldi	r30, 0x32	; 50
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	8c 93       	st	X, r24
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e8       	ldi	r26, 0x80	; 128
    1ca4:	bf e3       	ldi	r27, 0x3F	; 63
    1ca6:	89 8f       	std	Y+25, r24	; 0x19
    1ca8:	9a 8f       	std	Y+26, r25	; 0x1a
    1caa:	ab 8f       	std	Y+27, r26	; 0x1b
    1cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	55 e4       	ldi	r21, 0x45	; 69
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8d 8b       	std	Y+21, r24	; 0x15
    1cc8:	9e 8b       	std	Y+22, r25	; 0x16
    1cca:	af 8b       	std	Y+23, r26	; 0x17
    1ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <Send_DATA+0x176>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 8b       	std	Y+20, r25	; 0x14
    1cec:	8b 8b       	std	Y+19, r24	; 0x13
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <Send_DATA+0x1f4>
	else if (__tmp > 65535)
    1cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <Send_DATA+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <Send_DATA+0x1d6>
    1d32:	80 e9       	ldi	r24, 0x90	; 144
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	9a 8b       	std	Y+18, r25	; 0x12
    1d38:	89 8b       	std	Y+17, r24	; 0x11
    1d3a:	89 89       	ldd	r24, Y+17	; 0x11
    1d3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <Send_DATA+0x1c4>
    1d42:	9a 8b       	std	Y+18, r25	; 0x12
    1d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <Send_DATA+0x1b8>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <Send_DATA+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d60:	98 8d       	ldd	r25, Y+24	; 0x18
    1d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
    1d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d70:	9c 89       	ldd	r25, Y+20	; 0x14
    1d72:	98 8b       	std	Y+16, r25	; 0x10
    1d74:	8f 87       	std	Y+15, r24	; 0x0f
    1d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d78:	98 89       	ldd	r25, Y+16	; 0x10
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <Send_DATA+0x200>
    1d7e:	98 8b       	std	Y+16, r25	; 0x10
    1d80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay 1500ns until Enable Start
	LCD_DATA_PORT = data; 			//Send data through data pins
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d88:	80 83       	st	Z, r24
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e8       	ldi	r26, 0x80	; 128
    1d90:	bf e3       	ldi	r27, 0x3F	; 63
    1d92:	8b 87       	std	Y+11, r24	; 0x0b
    1d94:	9c 87       	std	Y+12, r25	; 0x0c
    1d96:	ad 87       	std	Y+13, r26	; 0x0d
    1d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8f 83       	std	Y+7, r24	; 0x07
    1db4:	98 87       	std	Y+8, r25	; 0x08
    1db6:	a9 87       	std	Y+9, r26	; 0x09
    1db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <Send_DATA+0x262>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <Send_DATA+0x2e0>
	else if (__tmp > 65535)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <Send_DATA+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <Send_DATA+0x2c2>
    1e1e:	80 e9       	ldi	r24, 0x90	; 144
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <Send_DATA+0x2b0>
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <Send_DATA+0x2a4>
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <Send_DATA+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <Send_DATA+0x2ec>
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay 10ns until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Send E Pin = 0 (Disable LCD)
    1e6e:	a2 e3       	ldi	r26, 0x32	; 50
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e2 e3       	ldi	r30, 0x32	; 50
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8f 77       	andi	r24, 0x7F	; 127
    1e7a:	8c 93       	st	X, r24
}
    1e7c:	ab 96       	adiw	r28, 0x2b	; 43
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <Display_Str>:

void Display_Str (const u8 *str)	// Function to send data to LCD
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <Display_Str+0x6>
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	9b 83       	std	Y+3, r25	; 0x03
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1e9e:	19 82       	std	Y+1, r1	; 0x01
    1ea0:	0e c0       	rjmp	.+28     	; 0x1ebe <Display_Str+0x30>
	while (str[i] != '\0')
	{
		Send_DATA (str[i]);
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	80 81       	ld	r24, Z
    1eb4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Send_DATA>
		i++;
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	89 83       	std	Y+1, r24	; 0x01
}

void Display_Str (const u8 *str)	// Function to send data to LCD
{
	u8 i=0;
	while (str[i] != '\0')
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 23       	and	r24, r24
    1ed2:	39 f7       	brne	.-50     	; 0x1ea2 <Display_Str+0x14>
	{
		Send_DATA (str[i]);
		i++;
	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <Go_To_Row_Col>:

void Go_To_Row_Col (u8 row, u8 col)	// Function to move to certain column and row on LCD
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <Go_To_Row_Col+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <Go_To_Row_Col+0x8>
    1ee8:	0f 92       	push	r0
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch (row)
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	3d 83       	std	Y+5, r19	; 0x05
    1efa:	2c 83       	std	Y+4, r18	; 0x04
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	91 05       	cpc	r25, r1
    1f04:	c1 f0       	breq	.+48     	; 0x1f36 <Go_To_Row_Col+0x56>
    1f06:	2c 81       	ldd	r18, Y+4	; 0x04
    1f08:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <Go_To_Row_Col+0x3a>
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	61 f0       	breq	.+24     	; 0x1f30 <Go_To_Row_Col+0x50>
    1f18:	19 c0       	rjmp	.+50     	; 0x1f4c <Go_To_Row_Col+0x6c>
    1f1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	69 f0       	breq	.+26     	; 0x1f3e <Go_To_Row_Col+0x5e>
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	9d 81       	ldd	r25, Y+5	; 0x05
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	61 f0       	breq	.+24     	; 0x1f46 <Go_To_Row_Col+0x66>
    1f2e:	0e c0       	rjmp	.+28     	; 0x1f4c <Go_To_Row_Col+0x6c>
	{
	case 0:
		Address = col;
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	0b c0       	rjmp	.+22     	; 0x1f4c <Go_To_Row_Col+0x6c>
		break;
	case 1:
		Address = col + 0x40;
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	80 5c       	subi	r24, 0xC0	; 192
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <Go_To_Row_Col+0x6c>
		break;
	case 2:
		Address = col + 0x10;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	80 5f       	subi	r24, 0xF0	; 240
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <Go_To_Row_Col+0x6c>
		break;
	case 3:
		Address = col + 0x50;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	80 5b       	subi	r24, 0xB0	; 176
    1f4a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	Send_CMD (Address | SET_CURSOR_LOCATION); //To move cursor to the Address location
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	80 68       	ori	r24, 0x80	; 128
    1f50:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <LCD_CLEAR>:

void LCD_CLEAR (void)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	Send_CMD (CLEAR_COMMAND);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <Display_Str_Row_Col>:

void Display_Str_Row_Col (u8 row, u8 col, const u8 *str)	//Display string at specified row and column
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <Display_Str_Row_Col+0x6>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <Display_Str_Row_Col+0x8>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	6a 83       	std	Y+2, r22	; 0x02
    1f88:	5c 83       	std	Y+4, r21	; 0x04
    1f8a:	4b 83       	std	Y+3, r20	; 0x03
	Go_To_Row_Col (row,col);
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f90:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <Go_To_Row_Col>
	Display_Str (str);
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <Integer_TO_String>:

void Integer_TO_String (u8 value)	// Display certain integer value on screen
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	6f 97       	sbiw	r28, 0x1f	; 31
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 number_str[30];
	itoa (value, number_str, 10);
    1fc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9e 01       	movw	r18, r28
    1fc8:	2f 5f       	subi	r18, 0xFF	; 255
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	b9 01       	movw	r22, r18
    1fce:	4a e0       	ldi	r20, 0x0A	; 10
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <itoa>
	Display_Str (number_str);
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>
}
    1fde:	6f 96       	adiw	r28, 0x1f	; 31
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <main>:
#include "../../MCAL/DIO/DIO.h"
#include "../../HAL/Keypad/keypad.h"
#include "../../HAL/Keypad/keypad_config.h"

int main ()
{
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	ca 58       	subi	r28, 0x8A	; 138
    1ffe:	d0 40       	sbci	r29, 0x00	; 0
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	u8 mode = 1;
    200a:	fe 01       	movw	r30, r28
    200c:	e9 57       	subi	r30, 0x79	; 121
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	80 83       	st	Z, r24
	u32 Saved_Pass = 1234;
    2014:	fe 01       	movw	r30, r28
    2016:	eb 57       	subi	r30, 0x7B	; 123
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	82 ed       	ldi	r24, 0xD2	; 210
    201c:	94 e0       	ldi	r25, 0x04	; 4
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
	u32 Temp_Pass = 0;
    2022:	fe 01       	movw	r30, r28
    2024:	ed 57       	subi	r30, 0x7D	; 125
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	11 82       	std	Z+1, r1	; 0x01
    202a:	10 82       	st	Z, r1
	u32 Comp_Pass = 0;
    202c:	fe 01       	movw	r30, r28
    202e:	ef 57       	subi	r30, 0x7F	; 127
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	11 82       	std	Z+1, r1	; 0x01
    2034:	10 82       	st	Z, r1
	u8 motor_steps[2] = {6, 3};
    2036:	fe 01       	movw	r30, r28
    2038:	e7 57       	subi	r30, 0x77	; 119
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	86 e0       	ldi	r24, 0x06	; 6
    203e:	80 83       	st	Z, r24
    2040:	fe 01       	movw	r30, r28
    2042:	e7 57       	subi	r30, 0x77	; 119
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	83 e0       	ldi	r24, 0x03	; 3
    2048:	81 83       	std	Z+1, r24	; 0x01
	u8 incorrectAttempts = 0; // Variable to count incorrect attempts
    204a:	fe 01       	movw	r30, r28
    204c:	e0 58       	subi	r30, 0x80	; 128
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	10 82       	st	Z, r1
	Set_GroupDir(PORT_C, 0x0F);
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	6f e0       	ldi	r22, 0x0F	; 15
    2056:	0e 94 c2 08 	call	0x1184	; 0x1184 <Set_GroupDir>
	Set_GroupLevel(PORT_C, 0xF0);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	60 ef       	ldi	r22, 0xF0	; 240
    205e:	0e 94 03 09 	call	0x1206	; 0x1206 <Set_GroupLevel>
	LCD_Init ();
    2062:	0e 94 45 0a 	call	0x148a	; 0x148a <LCD_Init>
	Display_Str("Welcome Home");
    2066:	82 e6       	ldi	r24, 0x62	; 98
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>
    206e:	fe 01       	movw	r30, r28
    2070:	e5 58       	subi	r30, 0x85	; 133
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	aa ef       	ldi	r26, 0xFA	; 250
    207a:	b3 e4       	ldi	r27, 0x43	; 67
    207c:	80 83       	st	Z, r24
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	a2 83       	std	Z+2, r26	; 0x02
    2082:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	8e 01       	movw	r16, r28
    2086:	09 58       	subi	r16, 0x89	; 137
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	fe 01       	movw	r30, r28
    208c:	e5 58       	subi	r30, 0x85	; 133
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	55 e4       	ldi	r21, 0x45	; 69
    20a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	f8 01       	movw	r30, r16
    20aa:	80 83       	st	Z, r24
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	a2 83       	std	Z+2, r26	; 0x02
    20b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b2:	fe 01       	movw	r30, r28
    20b4:	e9 58       	subi	r30, 0x89	; 137
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	44 f4       	brge	.+16     	; 0x20e0 <main+0xf0>
		__ticks = 1;
    20d0:	fe 01       	movw	r30, r28
    20d2:	eb 58       	subi	r30, 0x8B	; 139
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
    20de:	64 c0       	rjmp	.+200    	; 0x21a8 <main+0x1b8>
	else if (__tmp > 65535)
    20e0:	fe 01       	movw	r30, r28
    20e2:	e9 58       	subi	r30, 0x89	; 137
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <main+0x110>
    20fe:	43 c0       	rjmp	.+134    	; 0x2186 <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	fe 01       	movw	r30, r28
    2102:	e5 58       	subi	r30, 0x85	; 133
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8e 01       	movw	r16, r28
    2120:	0b 58       	subi	r16, 0x8B	; 139
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	f8 01       	movw	r30, r16
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
    2136:	1f c0       	rjmp	.+62     	; 0x2176 <main+0x186>
    2138:	fe 01       	movw	r30, r28
    213a:	ed 58       	subi	r30, 0x8D	; 141
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 e9       	ldi	r24, 0x90	; 144
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	fe 01       	movw	r30, r28
    2148:	ed 58       	subi	r30, 0x8D	; 141
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <main+0x160>
    2154:	fe 01       	movw	r30, r28
    2156:	ed 58       	subi	r30, 0x8D	; 141
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	de 01       	movw	r26, r28
    2160:	ab 58       	subi	r26, 0x8B	; 139
    2162:	bf 4f       	sbci	r27, 0xFF	; 255
    2164:	fe 01       	movw	r30, r28
    2166:	eb 58       	subi	r30, 0x8B	; 139
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	11 96       	adiw	r26, 0x01	; 1
    2172:	9c 93       	st	X, r25
    2174:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	fe 01       	movw	r30, r28
    2178:	eb 58       	subi	r30, 0x8B	; 139
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	d1 f6       	brne	.-76     	; 0x2138 <main+0x148>
    2184:	27 c0       	rjmp	.+78     	; 0x21d4 <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	8e 01       	movw	r16, r28
    2188:	0b 58       	subi	r16, 0x8B	; 139
    218a:	1f 4f       	sbci	r17, 0xFF	; 255
    218c:	fe 01       	movw	r30, r28
    218e:	e9 58       	subi	r30, 0x89	; 137
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	f8 01       	movw	r30, r16
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	de 01       	movw	r26, r28
    21aa:	af 58       	subi	r26, 0x8F	; 143
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	eb 58       	subi	r30, 0x8B	; 139
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	8d 93       	st	X+, r24
    21ba:	9c 93       	st	X, r25
    21bc:	fe 01       	movw	r30, r28
    21be:	ef 58       	subi	r30, 0x8F	; 143
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <main+0x1d6>
    21ca:	fe 01       	movw	r30, r28
    21cc:	ef 58       	subi	r30, 0x8F	; 143
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
	_delay_ms(500);
	while(1)
	{
		LCD_CLEAR();
    21d4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>

		if (mode)
    21d8:	fe 01       	movw	r30, r28
    21da:	e9 57       	subi	r30, 0x79	; 121
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	88 23       	and	r24, r24
    21e2:	c1 f3       	breq	.-16     	; 0x21d4 <main+0x1e4>
		{
			LCD_CLEAR();
    21e4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>
			Display_Str("Password : \n");
    21e8:	8f e6       	ldi	r24, 0x6F	; 111
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>
			for (u8 i = 0; i<4 ;i++)
    21f0:	fe 01       	movw	r30, r28
    21f2:	e1 58       	subi	r30, 0x81	; 129
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	10 82       	st	Z, r1
    21f8:	7a c2       	rjmp	.+1268   	; 0x26ee <main+0x6fe>
			{
				Send_CMD(CURSOR_ON);
    21fa:	8e e0       	ldi	r24, 0x0E	; 14
    21fc:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>
    2200:	fe 01       	movw	r30, r28
    2202:	e3 59       	subi	r30, 0x93	; 147
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a8 ec       	ldi	r26, 0xC8	; 200
    220c:	b2 e4       	ldi	r27, 0x42	; 66
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	8e 01       	movw	r16, r28
    2218:	07 59       	subi	r16, 0x97	; 151
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	e3 59       	subi	r30, 0x93	; 147
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a e7       	ldi	r20, 0x7A	; 122
    2230:	55 e4       	ldi	r21, 0x45	; 69
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	e7 59       	subi	r30, 0x97	; 151
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	44 f4       	brge	.+16     	; 0x2272 <main+0x282>
		__ticks = 1;
    2262:	fe 01       	movw	r30, r28
    2264:	e9 59       	subi	r30, 0x99	; 153
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	64 c0       	rjmp	.+200    	; 0x233a <main+0x34a>
	else if (__tmp > 65535)
    2272:	fe 01       	movw	r30, r28
    2274:	e7 59       	subi	r30, 0x97	; 151
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <main+0x2a2>
    2290:	43 c0       	rjmp	.+134    	; 0x2318 <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	fe 01       	movw	r30, r28
    2294:	e3 59       	subi	r30, 0x93	; 147
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8e 01       	movw	r16, r28
    22b2:	09 59       	subi	r16, 0x99	; 153
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	f8 01       	movw	r30, r16
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	1f c0       	rjmp	.+62     	; 0x2308 <main+0x318>
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 59       	subi	r30, 0x9B	; 155
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 e9       	ldi	r24, 0x90	; 144
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
    22d8:	fe 01       	movw	r30, r28
    22da:	eb 59       	subi	r30, 0x9B	; 155
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <main+0x2f2>
    22e6:	fe 01       	movw	r30, r28
    22e8:	eb 59       	subi	r30, 0x9B	; 155
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	de 01       	movw	r26, r28
    22f2:	a9 59       	subi	r26, 0x99	; 153
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e9 59       	subi	r30, 0x99	; 153
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	9c 93       	st	X, r25
    2306:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	fe 01       	movw	r30, r28
    230a:	e9 59       	subi	r30, 0x99	; 153
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	d1 f6       	brne	.-76     	; 0x22ca <main+0x2da>
    2316:	27 c0       	rjmp	.+78     	; 0x2366 <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	8e 01       	movw	r16, r28
    231a:	09 59       	subi	r16, 0x99	; 153
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	fe 01       	movw	r30, r28
    2320:	e7 59       	subi	r30, 0x97	; 151
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	de 01       	movw	r26, r28
    233c:	ad 59       	subi	r26, 0x9D	; 157
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	fe 01       	movw	r30, r28
    2342:	e9 59       	subi	r30, 0x99	; 153
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	8d 93       	st	X+, r24
    234c:	9c 93       	st	X, r25
    234e:	fe 01       	movw	r30, r28
    2350:	ed 59       	subi	r30, 0x9D	; 157
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <main+0x368>
    235c:	fe 01       	movw	r30, r28
    235e:	ed 59       	subi	r30, 0x9D	; 157
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
				_delay_ms(100);
				Send_CMD(CURSOR_OFF);
    2366:	8c e0       	ldi	r24, 0x0C	; 12
    2368:	0e 94 33 0c 	call	0x1866	; 0x1866 <Send_CMD>

				key = Keypad_GetPressedKey();
    236c:	0e 94 44 09 	call	0x1288	; 0x1288 <Keypad_GetPressedKey>
    2370:	fe 01       	movw	r30, r28
    2372:	e8 57       	subi	r30, 0x78	; 120
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 83       	st	Z, r24
				if ((key >= 0) && (key <= 9))
    2378:	fe 01       	movw	r30, r28
    237a:	e8 57       	subi	r30, 0x78	; 120
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	8a 30       	cpi	r24, 0x0A	; 10
    2382:	08 f0       	brcs	.+2      	; 0x2386 <main+0x396>
    2384:	f6 c0       	rjmp	.+492    	; 0x2572 <main+0x582>
				{
					Integer_TO_String (key);
    2386:	fe 01       	movw	r30, r28
    2388:	e8 57       	subi	r30, 0x78	; 120
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 81       	ld	r24, Z
    238e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Integer_TO_String>
    2392:	fe 01       	movw	r30, r28
    2394:	e1 5a       	subi	r30, 0xA1	; 161
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a8 e4       	ldi	r26, 0x48	; 72
    239e:	b3 e4       	ldi	r27, 0x43	; 67
    23a0:	80 83       	st	Z, r24
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	a2 83       	std	Z+2, r26	; 0x02
    23a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a8:	8e 01       	movw	r16, r28
    23aa:	05 5a       	subi	r16, 0xA5	; 165
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
    23ae:	fe 01       	movw	r30, r28
    23b0:	e1 5a       	subi	r30, 0xA1	; 161
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a e7       	ldi	r20, 0x7A	; 122
    23c2:	55 e4       	ldi	r21, 0x45	; 69
    23c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	f8 01       	movw	r30, r16
    23ce:	80 83       	st	Z, r24
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	a2 83       	std	Z+2, r26	; 0x02
    23d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d6:	fe 01       	movw	r30, r28
    23d8:	e5 5a       	subi	r30, 0xA5	; 165
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23f0:	88 23       	and	r24, r24
    23f2:	44 f4       	brge	.+16     	; 0x2404 <main+0x414>
		__ticks = 1;
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5a       	subi	r30, 0xA7	; 167
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
    2402:	64 c0       	rjmp	.+200    	; 0x24cc <main+0x4dc>
	else if (__tmp > 65535)
    2404:	fe 01       	movw	r30, r28
    2406:	e5 5a       	subi	r30, 0xA5	; 165
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	0c f0       	brlt	.+2      	; 0x2424 <main+0x434>
    2422:	43 c0       	rjmp	.+134    	; 0x24aa <main+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	fe 01       	movw	r30, r28
    2426:	e1 5a       	subi	r30, 0xA1	; 161
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e2       	ldi	r20, 0x20	; 32
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8e 01       	movw	r16, r28
    2444:	07 5a       	subi	r16, 0xA7	; 167
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	f8 01       	movw	r30, r16
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	1f c0       	rjmp	.+62     	; 0x249a <main+0x4aa>
    245c:	fe 01       	movw	r30, r28
    245e:	e9 5a       	subi	r30, 0xA9	; 169
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 e9       	ldi	r24, 0x90	; 144
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	80 83       	st	Z, r24
    246a:	fe 01       	movw	r30, r28
    246c:	e9 5a       	subi	r30, 0xA9	; 169
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <main+0x484>
    2478:	fe 01       	movw	r30, r28
    247a:	e9 5a       	subi	r30, 0xA9	; 169
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	de 01       	movw	r26, r28
    2484:	a7 5a       	subi	r26, 0xA7	; 167
    2486:	bf 4f       	sbci	r27, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	e7 5a       	subi	r30, 0xA7	; 167
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	fe 01       	movw	r30, r28
    249c:	e7 5a       	subi	r30, 0xA7	; 167
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	d1 f6       	brne	.-76     	; 0x245c <main+0x46c>
    24a8:	27 c0       	rjmp	.+78     	; 0x24f8 <main+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24aa:	8e 01       	movw	r16, r28
    24ac:	07 5a       	subi	r16, 0xA7	; 167
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	fe 01       	movw	r30, r28
    24b2:	e5 5a       	subi	r30, 0xA5	; 165
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	f8 01       	movw	r30, r16
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
    24cc:	de 01       	movw	r26, r28
    24ce:	ab 5a       	subi	r26, 0xAB	; 171
    24d0:	bf 4f       	sbci	r27, 0xFF	; 255
    24d2:	fe 01       	movw	r30, r28
    24d4:	e7 5a       	subi	r30, 0xA7	; 167
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	8d 93       	st	X+, r24
    24de:	9c 93       	st	X, r25
    24e0:	fe 01       	movw	r30, r28
    24e2:	eb 5a       	subi	r30, 0xAB	; 171
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <main+0x4fa>
    24ee:	fe 01       	movw	r30, r28
    24f0:	eb 5a       	subi	r30, 0xAB	; 171
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
					_delay_ms(200);
					Display_Str_Row_Col(0, 11+i, "*");
    24f8:	fe 01       	movw	r30, r28
    24fa:	e1 58       	subi	r30, 0x81	; 129
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	98 2f       	mov	r25, r24
    2502:	95 5f       	subi	r25, 0xF5	; 245
    2504:	2c e7       	ldi	r18, 0x7C	; 124
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	69 2f       	mov	r22, r25
    250c:	a9 01       	movw	r20, r18
    250e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Display_Str_Row_Col>
					LCD_CLEAR();
					Display_Str_Row_Col(0, 1, "Invalid Input");
					_delay_ms(500);
					break;
				}
				Comp_Pass += key;
    2512:	fe 01       	movw	r30, r28
    2514:	e8 57       	subi	r30, 0x78	; 120
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	de 01       	movw	r26, r28
    2520:	af 57       	subi	r26, 0x7F	; 127
    2522:	bf 4f       	sbci	r27, 0xFF	; 255
    2524:	fe 01       	movw	r30, r28
    2526:	ef 57       	subi	r30, 0x7F	; 127
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	82 0f       	add	r24, r18
    2530:	93 1f       	adc	r25, r19
    2532:	8d 93       	st	X+, r24
    2534:	9c 93       	st	X, r25
				Comp_Pass = Comp_Pass * 10;
    2536:	de 01       	movw	r26, r28
    2538:	af 57       	subi	r26, 0x7F	; 127
    253a:	bf 4f       	sbci	r27, 0xFF	; 255
    253c:	fe 01       	movw	r30, r28
    253e:	ef 57       	subi	r30, 0x7F	; 127
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	9c 01       	movw	r18, r24
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	c9 01       	movw	r24, r18
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	82 0f       	add	r24, r18
    2558:	93 1f       	adc	r25, r19
    255a:	8d 93       	st	X+, r24
    255c:	9c 93       	st	X, r25

		if (mode)
		{
			LCD_CLEAR();
			Display_Str("Password : \n");
			for (u8 i = 0; i<4 ;i++)
    255e:	de 01       	movw	r26, r28
    2560:	a1 58       	subi	r26, 0x81	; 129
    2562:	bf 4f       	sbci	r27, 0xFF	; 255
    2564:	fe 01       	movw	r30, r28
    2566:	e1 58       	subi	r30, 0x81	; 129
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	8c 93       	st	X, r24
    2570:	be c0       	rjmp	.+380    	; 0x26ee <main+0x6fe>
					_delay_ms(200);
					Display_Str_Row_Col(0, 11+i, "*");
				}
				else
				{
					LCD_CLEAR();
    2572:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>
					Display_Str_Row_Col(0, 1, "Invalid Input");
    2576:	2e e7       	ldi	r18, 0x7E	; 126
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	a9 01       	movw	r20, r18
    2580:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Display_Str_Row_Col>
    2584:	fe 01       	movw	r30, r28
    2586:	ef 5a       	subi	r30, 0xAF	; 175
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	aa ef       	ldi	r26, 0xFA	; 250
    2590:	b3 e4       	ldi	r27, 0x43	; 67
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	8e 01       	movw	r16, r28
    259c:	03 5b       	subi	r16, 0xB3	; 179
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	ef 5a       	subi	r30, 0xAF	; 175
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a e7       	ldi	r20, 0x7A	; 122
    25b4:	55 e4       	ldi	r21, 0x45	; 69
    25b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	80 83       	st	Z, r24
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	a2 83       	std	Z+2, r26	; 0x02
    25c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c8:	fe 01       	movw	r30, r28
    25ca:	e3 5b       	subi	r30, 0xB3	; 179
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	44 f4       	brge	.+16     	; 0x25f6 <main+0x606>
		__ticks = 1;
    25e6:	fe 01       	movw	r30, r28
    25e8:	e5 5b       	subi	r30, 0xB5	; 181
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	64 c0       	rjmp	.+200    	; 0x26be <main+0x6ce>
	else if (__tmp > 65535)
    25f6:	fe 01       	movw	r30, r28
    25f8:	e3 5b       	subi	r30, 0xB3	; 179
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	60 81       	ld	r22, Z
    25fe:	71 81       	ldd	r23, Z+1	; 0x01
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	0c f0       	brlt	.+2      	; 0x2616 <main+0x626>
    2614:	43 c0       	rjmp	.+134    	; 0x269c <main+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	fe 01       	movw	r30, r28
    2618:	ef 5a       	subi	r30, 0xAF	; 175
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8e 01       	movw	r16, r28
    2636:	05 5b       	subi	r16, 0xB5	; 181
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	f8 01       	movw	r30, r16
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	1f c0       	rjmp	.+62     	; 0x268c <main+0x69c>
    264e:	fe 01       	movw	r30, r28
    2650:	e7 5b       	subi	r30, 0xB7	; 183
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 e9       	ldi	r24, 0x90	; 144
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	fe 01       	movw	r30, r28
    265e:	e7 5b       	subi	r30, 0xB7	; 183
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <main+0x676>
    266a:	fe 01       	movw	r30, r28
    266c:	e7 5b       	subi	r30, 0xB7	; 183
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	de 01       	movw	r26, r28
    2676:	a5 5b       	subi	r26, 0xB5	; 181
    2678:	bf 4f       	sbci	r27, 0xFF	; 255
    267a:	fe 01       	movw	r30, r28
    267c:	e5 5b       	subi	r30, 0xB5	; 181
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	11 96       	adiw	r26, 0x01	; 1
    2688:	9c 93       	st	X, r25
    268a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	fe 01       	movw	r30, r28
    268e:	e5 5b       	subi	r30, 0xB5	; 181
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	d1 f6       	brne	.-76     	; 0x264e <main+0x65e>
    269a:	30 c0       	rjmp	.+96     	; 0x26fc <main+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269c:	8e 01       	movw	r16, r28
    269e:	05 5b       	subi	r16, 0xB5	; 181
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	e3 5b       	subi	r30, 0xB3	; 179
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	f8 01       	movw	r30, r16
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	de 01       	movw	r26, r28
    26c0:	a9 5b       	subi	r26, 0xB9	; 185
    26c2:	bf 4f       	sbci	r27, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 5b       	subi	r30, 0xB5	; 181
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	11 96       	adiw	r26, 0x01	; 1
    26d0:	9c 93       	st	X, r25
    26d2:	8e 93       	st	-X, r24
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 5b       	subi	r30, 0xB9	; 185
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <main+0x6ee>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e9 5b       	subi	r30, 0xB9	; 185
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <main+0x70c>

		if (mode)
		{
			LCD_CLEAR();
			Display_Str("Password : \n");
			for (u8 i = 0; i<4 ;i++)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e1 58       	subi	r30, 0x81	; 129
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	84 30       	cpi	r24, 0x04	; 4
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <main+0x70c>
    26fa:	7f cd       	rjmp	.-1282   	; 0x21fa <main+0x20a>
					break;
				}
				Comp_Pass += key;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
    26fc:	8e 01       	movw	r16, r28
    26fe:	0f 57       	subi	r16, 0x7F	; 127
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	ef 57       	subi	r30, 0x7F	; 127
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	2a e0       	ldi	r18, 0x0A	; 10
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__udivmodhi4>
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	fe 01       	movw	r30, r28
    2720:	ed 5b       	subi	r30, 0xBD	; 189
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	aa ef       	ldi	r26, 0xFA	; 250
    272a:	b3 e4       	ldi	r27, 0x43	; 67
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	8e 01       	movw	r16, r28
    2736:	01 5c       	subi	r16, 0xC1	; 193
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	ed 5b       	subi	r30, 0xBD	; 189
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a e7       	ldi	r20, 0x7A	; 122
    274e:	55 e4       	ldi	r21, 0x45	; 69
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2762:	fe 01       	movw	r30, r28
    2764:	ff 96       	adiw	r30, 0x3f	; 63
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <main+0x798>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e af       	std	Y+62, r25	; 0x3e
    2784:	8d af       	std	Y+61, r24	; 0x3d
    2786:	46 c0       	rjmp	.+140    	; 0x2814 <main+0x824>
	else if (__tmp > 65535)
    2788:	fe 01       	movw	r30, r28
    278a:	ff 96       	adiw	r30, 0x3f	; 63
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	64 f5       	brge	.+88     	; 0x27fc <main+0x80c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	fe 01       	movw	r30, r28
    27a6:	ed 5b       	subi	r30, 0xBD	; 189
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9e af       	std	Y+62, r25	; 0x3e
    27d0:	8d af       	std	Y+61, r24	; 0x3d
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <main+0x802>
    27d4:	80 e9       	ldi	r24, 0x90	; 144
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	9c af       	std	Y+60, r25	; 0x3c
    27da:	8b af       	std	Y+59, r24	; 0x3b
    27dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    27de:	9c ad       	ldd	r25, Y+60	; 0x3c
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <main+0x7f0>
    27e4:	9c af       	std	Y+60, r25	; 0x3c
    27e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9e af       	std	Y+62, r25	; 0x3e
    27f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	69 f7       	brne	.-38     	; 0x27d4 <main+0x7e4>
    27fa:	16 c0       	rjmp	.+44     	; 0x2828 <main+0x838>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	fe 01       	movw	r30, r28
    27fe:	ff 96       	adiw	r30, 0x3f	; 63
    2800:	60 81       	ld	r22, Z
    2802:	71 81       	ldd	r23, Z+1	; 0x01
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9e af       	std	Y+62, r25	; 0x3e
    2812:	8d af       	std	Y+61, r24	; 0x3d
    2814:	8d ad       	ldd	r24, Y+61	; 0x3d
    2816:	9e ad       	ldd	r25, Y+62	; 0x3e
    2818:	9a af       	std	Y+58, r25	; 0x3a
    281a:	89 af       	std	Y+57, r24	; 0x39
    281c:	89 ad       	ldd	r24, Y+57	; 0x39
    281e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <main+0x830>
    2824:	9a af       	std	Y+58, r25	; 0x3a
    2826:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			LCD_CLEAR();
    2828:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>
			if (Saved_Pass == Comp_Pass)
    282c:	fe 01       	movw	r30, r28
    282e:	eb 57       	subi	r30, 0x7B	; 123
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	de 01       	movw	r26, r28
    2834:	af 57       	subi	r26, 0x7F	; 127
    2836:	bf 4f       	sbci	r27, 0xFF	; 255
    2838:	20 81       	ld	r18, Z
    283a:	31 81       	ldd	r19, Z+1	; 0x01
    283c:	8d 91       	ld	r24, X+
    283e:	9c 91       	ld	r25, X
    2840:	11 97       	sbiw	r26, 0x01	; 1
    2842:	28 17       	cp	r18, r24
    2844:	39 07       	cpc	r19, r25
    2846:	09 f0       	breq	.+2      	; 0x284a <main+0x85a>
    2848:	a3 c0       	rjmp	.+326    	; 0x2990 <main+0x9a0>
			{
				Display_Str("Welcome Back");
    284a:	8c e8       	ldi	r24, 0x8C	; 140
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>
				PORTC |= (PORTC & 0xF0) | (motor_steps[1] & 0b00001111);  // 90
    2852:	a5 e3       	ldi	r26, 0x35	; 53
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e5 e3       	ldi	r30, 0x35	; 53
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	28 2f       	mov	r18, r24
    285e:	e5 e3       	ldi	r30, 0x35	; 53
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	98 2f       	mov	r25, r24
    2866:	90 7f       	andi	r25, 0xF0	; 240
    2868:	fe 01       	movw	r30, r28
    286a:	e7 57       	subi	r30, 0x77	; 119
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	81 81       	ldd	r24, Z+1	; 0x01
    2870:	8f 70       	andi	r24, 0x0F	; 15
    2872:	89 2b       	or	r24, r25
    2874:	82 2b       	or	r24, r18
    2876:	8c 93       	st	X, r24
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e4       	ldi	r25, 0x40	; 64
    287c:	ac e1       	ldi	r26, 0x1C	; 28
    287e:	b6 e4       	ldi	r27, 0x46	; 70
    2880:	8d ab       	std	Y+53, r24	; 0x35
    2882:	9e ab       	std	Y+54, r25	; 0x36
    2884:	af ab       	std	Y+55, r26	; 0x37
    2886:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6d a9       	ldd	r22, Y+53	; 0x35
    288a:	7e a9       	ldd	r23, Y+54	; 0x36
    288c:	8f a9       	ldd	r24, Y+55	; 0x37
    288e:	98 ad       	ldd	r25, Y+56	; 0x38
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a e7       	ldi	r20, 0x7A	; 122
    2896:	55 e4       	ldi	r21, 0x45	; 69
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	89 ab       	std	Y+49, r24	; 0x31
    28a2:	9a ab       	std	Y+50, r25	; 0x32
    28a4:	ab ab       	std	Y+51, r26	; 0x33
    28a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28a8:	69 a9       	ldd	r22, Y+49	; 0x31
    28aa:	7a a9       	ldd	r23, Y+50	; 0x32
    28ac:	8b a9       	ldd	r24, Y+51	; 0x33
    28ae:	9c a9       	ldd	r25, Y+52	; 0x34
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <main+0x8da>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	98 ab       	std	Y+48, r25	; 0x30
    28c6:	8f a7       	std	Y+47, r24	; 0x2f
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <main+0x958>
	else if (__tmp > 65535)
    28ca:	69 a9       	ldd	r22, Y+49	; 0x31
    28cc:	7a a9       	ldd	r23, Y+50	; 0x32
    28ce:	8b a9       	ldd	r24, Y+51	; 0x33
    28d0:	9c a9       	ldd	r25, Y+52	; 0x34
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <main+0x944>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6d a9       	ldd	r22, Y+53	; 0x35
    28e4:	7e a9       	ldd	r23, Y+54	; 0x36
    28e6:	8f a9       	ldd	r24, Y+55	; 0x37
    28e8:	98 ad       	ldd	r25, Y+56	; 0x38
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	98 ab       	std	Y+48, r25	; 0x30
    2908:	8f a7       	std	Y+47, r24	; 0x2f
    290a:	0f c0       	rjmp	.+30     	; 0x292a <main+0x93a>
    290c:	80 e9       	ldi	r24, 0x90	; 144
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	9e a7       	std	Y+46, r25	; 0x2e
    2912:	8d a7       	std	Y+45, r24	; 0x2d
    2914:	8d a5       	ldd	r24, Y+45	; 0x2d
    2916:	9e a5       	ldd	r25, Y+46	; 0x2e
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <main+0x928>
    291c:	9e a7       	std	Y+46, r25	; 0x2e
    291e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8f a5       	ldd	r24, Y+47	; 0x2f
    2922:	98 a9       	ldd	r25, Y+48	; 0x30
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	98 ab       	std	Y+48, r25	; 0x30
    2928:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8f a5       	ldd	r24, Y+47	; 0x2f
    292c:	98 a9       	ldd	r25, Y+48	; 0x30
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <main+0x91c>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <main+0x96c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	69 a9       	ldd	r22, Y+49	; 0x31
    2936:	7a a9       	ldd	r23, Y+50	; 0x32
    2938:	8b a9       	ldd	r24, Y+51	; 0x33
    293a:	9c a9       	ldd	r25, Y+52	; 0x34
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	98 ab       	std	Y+48, r25	; 0x30
    2946:	8f a7       	std	Y+47, r24	; 0x2f
    2948:	8f a5       	ldd	r24, Y+47	; 0x2f
    294a:	98 a9       	ldd	r25, Y+48	; 0x30
    294c:	9c a7       	std	Y+44, r25	; 0x2c
    294e:	8b a7       	std	Y+43, r24	; 0x2b
    2950:	8b a5       	ldd	r24, Y+43	; 0x2b
    2952:	9c a5       	ldd	r25, Y+44	; 0x2c
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0x964>
    2958:	9c a7       	std	Y+44, r25	; 0x2c
    295a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10000);
				PORTC = (PORTC & 0xF0)  | (motor_steps[0] & 0b00001111);  // 0
    295c:	a5 e3       	ldi	r26, 0x35	; 53
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e5 e3       	ldi	r30, 0x35	; 53
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	98 2f       	mov	r25, r24
    2968:	90 7f       	andi	r25, 0xF0	; 240
    296a:	fe 01       	movw	r30, r28
    296c:	e7 57       	subi	r30, 0x77	; 119
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	8f 70       	andi	r24, 0x0F	; 15
    2974:	89 2b       	or	r24, r25
    2976:	8c 93       	st	X, r24
				LCD_CLEAR();
    2978:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>
				Comp_Pass = 0;
    297c:	fe 01       	movw	r30, r28
    297e:	ef 57       	subi	r30, 0x7F	; 127
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	11 82       	std	Z+1, r1	; 0x01
    2984:	10 82       	st	Z, r1
				incorrectAttempts = 0; // Reset incorrect attempts count
    2986:	fe 01       	movw	r30, r28
    2988:	e0 58       	subi	r30, 0x80	; 128
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	10 82       	st	Z, r1
    298e:	22 cc       	rjmp	.-1980   	; 0x21d4 <main+0x1e4>
			}
			else
			{
				Display_Str_Row_Col(0,1,"Wrong Password");
    2990:	29 e9       	ldi	r18, 0x99	; 153
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	a9 01       	movw	r20, r18
    299a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Display_Str_Row_Col>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a8 e4       	ldi	r26, 0x48	; 72
    29a4:	b2 e4       	ldi	r27, 0x42	; 66
    29a6:	8f a3       	std	Y+39, r24	; 0x27
    29a8:	98 a7       	std	Y+40, r25	; 0x28
    29aa:	a9 a7       	std	Y+41, r26	; 0x29
    29ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	6f a1       	ldd	r22, Y+39	; 0x27
    29b0:	78 a5       	ldd	r23, Y+40	; 0x28
    29b2:	89 a5       	ldd	r24, Y+41	; 0x29
    29b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a e7       	ldi	r20, 0x7A	; 122
    29bc:	55 e4       	ldi	r21, 0x45	; 69
    29be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8b a3       	std	Y+35, r24	; 0x23
    29c8:	9c a3       	std	Y+36, r25	; 0x24
    29ca:	ad a3       	std	Y+37, r26	; 0x25
    29cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ce:	6b a1       	ldd	r22, Y+35	; 0x23
    29d0:	7c a1       	ldd	r23, Y+36	; 0x24
    29d2:	8d a1       	ldd	r24, Y+37	; 0x25
    29d4:	9e a1       	ldd	r25, Y+38	; 0x26
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <main+0xa00>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <main+0xa7e>
	else if (__tmp > 65535)
    29f0:	6b a1       	ldd	r22, Y+35	; 0x23
    29f2:	7c a1       	ldd	r23, Y+36	; 0x24
    29f4:	8d a1       	ldd	r24, Y+37	; 0x25
    29f6:	9e a1       	ldd	r25, Y+38	; 0x26
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <main+0xa6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	6f a1       	ldd	r22, Y+39	; 0x27
    2a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9a a3       	std	Y+34, r25	; 0x22
    2a2e:	89 a3       	std	Y+33, r24	; 0x21
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <main+0xa60>
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	98 a3       	std	Y+32, r25	; 0x20
    2a38:	8f 8f       	std	Y+31, r24	; 0x1f
    2a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <main+0xa4e>
    2a42:	98 a3       	std	Y+32, r25	; 0x20
    2a44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	89 a1       	ldd	r24, Y+33	; 0x21
    2a48:	9a a1       	ldd	r25, Y+34	; 0x22
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	89 a1       	ldd	r24, Y+33	; 0x21
    2a52:	9a a1       	ldd	r25, Y+34	; 0x22
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <main+0xa42>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <main+0xa92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a60:	9e a1       	ldd	r25, Y+38	; 0x26
    2a62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9a a3       	std	Y+34, r25	; 0x22
    2a6c:	89 a3       	std	Y+33, r24	; 0x21
    2a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a70:	9a a1       	ldd	r25, Y+34	; 0x22
    2a72:	9e 8f       	std	Y+30, r25	; 0x1e
    2a74:	8d 8f       	std	Y+29, r24	; 0x1d
    2a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <main+0xa8a>
    2a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a80:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				LCD_CLEAR();
    2a82:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>
				Comp_Pass = 0;
    2a86:	fe 01       	movw	r30, r28
    2a88:	ef 57       	subi	r30, 0x7F	; 127
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	11 82       	std	Z+1, r1	; 0x01
    2a8e:	10 82       	st	Z, r1
				incorrectAttempts++; // Increase incorrect attempts count
    2a90:	de 01       	movw	r26, r28
    2a92:	a0 58       	subi	r26, 0x80	; 128
    2a94:	bf 4f       	sbci	r27, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	e0 58       	subi	r30, 0x80	; 128
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	8c 93       	st	X, r24
				if (incorrectAttempts >= 3) // If 3 or more incorrect attempts, activate the buzzer
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e0 58       	subi	r30, 0x80	; 128
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	83 30       	cpi	r24, 0x03	; 3
    2aac:	08 f4       	brcc	.+2      	; 0x2ab0 <main+0xac0>
    2aae:	92 cb       	rjmp	.-2268   	; 0x21d4 <main+0x1e4>
				{
					LCD_CLEAR();
    2ab0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>

					Display_Str("Alarm On");
    2ab4:	88 ea       	ldi	r24, 0xA8	; 168
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>

					Set_PinLevel(PORT_D,3,HIGH);
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	63 e0       	ldi	r22, 0x03	; 3
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <Set_PinLevel>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	94 e2       	ldi	r25, 0x24	; 36
    2aca:	a4 e7       	ldi	r26, 0x74	; 116
    2acc:	b9 e4       	ldi	r27, 0x49	; 73
    2ace:	89 8f       	std	Y+25, r24	; 0x19
    2ad0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a e7       	ldi	r20, 0x7A	; 122
    2ae4:	55 e4       	ldi	r21, 0x45	; 69
    2ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	8d 8b       	std	Y+21, r24	; 0x15
    2af0:	9e 8b       	std	Y+22, r25	; 0x16
    2af2:	af 8b       	std	Y+23, r26	; 0x17
    2af4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af6:	6d 89       	ldd	r22, Y+21	; 0x15
    2af8:	7e 89       	ldd	r23, Y+22	; 0x16
    2afa:	8f 89       	ldd	r24, Y+23	; 0x17
    2afc:	98 8d       	ldd	r25, Y+24	; 0x18
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <main+0xb28>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9c 8b       	std	Y+20, r25	; 0x14
    2b14:	8b 8b       	std	Y+19, r24	; 0x13
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <main+0xba6>
	else if (__tmp > 65535)
    2b18:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <main+0xb92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	69 8d       	ldd	r22, Y+25	; 0x19
    2b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <main+0xb88>
    2b5a:	80 e9       	ldi	r24, 0x90	; 144
    2b5c:	91 e0       	ldi	r25, 0x01	; 1
    2b5e:	9a 8b       	std	Y+18, r25	; 0x12
    2b60:	89 8b       	std	Y+17, r24	; 0x11
    2b62:	89 89       	ldd	r24, Y+17	; 0x11
    2b64:	9a 89       	ldd	r25, Y+18	; 0x12
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <main+0xb76>
    2b6a:	9a 8b       	std	Y+18, r25	; 0x12
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9c 8b       	std	Y+20, r25	; 0x14
    2b76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <main+0xb6a>
    2b80:	14 c0       	rjmp	.+40     	; 0x2baa <main+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	6d 89       	ldd	r22, Y+21	; 0x15
    2b84:	7e 89       	ldd	r23, Y+22	; 0x16
    2b86:	8f 89       	ldd	r24, Y+23	; 0x17
    2b88:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
    2b96:	8b 89       	ldd	r24, Y+19	; 0x13
    2b98:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9a:	98 8b       	std	Y+16, r25	; 0x10
    2b9c:	8f 87       	std	Y+15, r24	; 0x0f
    2b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba0:	98 89       	ldd	r25, Y+16	; 0x10
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <main+0xbb2>
    2ba6:	98 8b       	std	Y+16, r25	; 0x10
    2ba8:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000000); // Buzzer on
					Set_PinLevel(PORT_D,3,LOW);
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	63 e0       	ldi	r22, 0x03	; 3
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <Set_PinLevel>
					// If 3 or more incorrect attempts, shut down the system
					LCD_CLEAR();
    2bb4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_CLEAR>

					Display_Str("System Shutdown");
    2bb8:	81 eb       	ldi	r24, 0xB1	; 177
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Display_Str>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	aa e7       	ldi	r26, 0x7A	; 122
    2bc6:	b4 e4       	ldi	r27, 0x44	; 68
    2bc8:	8b 87       	std	Y+11, r24	; 0x0b
    2bca:	9c 87       	std	Y+12, r25	; 0x0c
    2bcc:	ad 87       	std	Y+13, r26	; 0x0d
    2bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4a e7       	ldi	r20, 0x7A	; 122
    2bde:	55 e4       	ldi	r21, 0x45	; 69
    2be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	8f 83       	std	Y+7, r24	; 0x07
    2bea:	98 87       	std	Y+8, r25	; 0x08
    2bec:	a9 87       	std	Y+9, r26	; 0x09
    2bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf2:	78 85       	ldd	r23, Y+8	; 0x08
    2bf4:	89 85       	ldd	r24, Y+9	; 0x09
    2bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <main+0xc22>
		__ticks = 1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	3f c0       	rjmp	.+126    	; 0x2c90 <main+0xca0>
	else if (__tmp > 65535)
    2c12:	6f 81       	ldd	r22, Y+7	; 0x07
    2c14:	78 85       	ldd	r23, Y+8	; 0x08
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	4f e7       	ldi	r20, 0x7F	; 127
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c26:	18 16       	cp	r1, r24
    2c28:	4c f5       	brge	.+82     	; 0x2c7c <main+0xc8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	51 e4       	ldi	r21, 0x41	; 65
    2c3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <main+0xc82>
    2c54:	80 e9       	ldi	r24, 0x90	; 144
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <main+0xc70>
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	69 f7       	brne	.-38     	; 0x2c54 <main+0xc64>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <main+0xcb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <main+0xcac>
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	ff cf       	rjmp	.-2      	; 0x2ca4 <main+0xcb4>

00002ca6 <__udivmodhi4>:
    2ca6:	aa 1b       	sub	r26, r26
    2ca8:	bb 1b       	sub	r27, r27
    2caa:	51 e1       	ldi	r21, 0x11	; 17
    2cac:	07 c0       	rjmp	.+14     	; 0x2cbc <__udivmodhi4_ep>

00002cae <__udivmodhi4_loop>:
    2cae:	aa 1f       	adc	r26, r26
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	a6 17       	cp	r26, r22
    2cb4:	b7 07       	cpc	r27, r23
    2cb6:	10 f0       	brcs	.+4      	; 0x2cbc <__udivmodhi4_ep>
    2cb8:	a6 1b       	sub	r26, r22
    2cba:	b7 0b       	sbc	r27, r23

00002cbc <__udivmodhi4_ep>:
    2cbc:	88 1f       	adc	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	5a 95       	dec	r21
    2cc2:	a9 f7       	brne	.-22     	; 0x2cae <__udivmodhi4_loop>
    2cc4:	80 95       	com	r24
    2cc6:	90 95       	com	r25
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	08 95       	ret

00002cce <__prologue_saves__>:
    2cce:	2f 92       	push	r2
    2cd0:	3f 92       	push	r3
    2cd2:	4f 92       	push	r4
    2cd4:	5f 92       	push	r5
    2cd6:	6f 92       	push	r6
    2cd8:	7f 92       	push	r7
    2cda:	8f 92       	push	r8
    2cdc:	9f 92       	push	r9
    2cde:	af 92       	push	r10
    2ce0:	bf 92       	push	r11
    2ce2:	cf 92       	push	r12
    2ce4:	df 92       	push	r13
    2ce6:	ef 92       	push	r14
    2ce8:	ff 92       	push	r15
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	ca 1b       	sub	r28, r26
    2cf8:	db 0b       	sbc	r29, r27
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	09 94       	ijmp

00002d06 <__epilogue_restores__>:
    2d06:	2a 88       	ldd	r2, Y+18	; 0x12
    2d08:	39 88       	ldd	r3, Y+17	; 0x11
    2d0a:	48 88       	ldd	r4, Y+16	; 0x10
    2d0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d18:	b9 84       	ldd	r11, Y+9	; 0x09
    2d1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d1c:	df 80       	ldd	r13, Y+7	; 0x07
    2d1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d20:	fd 80       	ldd	r15, Y+5	; 0x05
    2d22:	0c 81       	ldd	r16, Y+4	; 0x04
    2d24:	1b 81       	ldd	r17, Y+3	; 0x03
    2d26:	aa 81       	ldd	r26, Y+2	; 0x02
    2d28:	b9 81       	ldd	r27, Y+1	; 0x01
    2d2a:	ce 0f       	add	r28, r30
    2d2c:	d1 1d       	adc	r29, r1
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	ed 01       	movw	r28, r26
    2d3a:	08 95       	ret

00002d3c <itoa>:
    2d3c:	fb 01       	movw	r30, r22
    2d3e:	9f 01       	movw	r18, r30
    2d40:	e8 94       	clt
    2d42:	42 30       	cpi	r20, 0x02	; 2
    2d44:	c4 f0       	brlt	.+48     	; 0x2d76 <itoa+0x3a>
    2d46:	45 32       	cpi	r20, 0x25	; 37
    2d48:	b4 f4       	brge	.+44     	; 0x2d76 <itoa+0x3a>
    2d4a:	4a 30       	cpi	r20, 0x0A	; 10
    2d4c:	29 f4       	brne	.+10     	; 0x2d58 <itoa+0x1c>
    2d4e:	97 fb       	bst	r25, 7
    2d50:	1e f4       	brtc	.+6      	; 0x2d58 <itoa+0x1c>
    2d52:	90 95       	com	r25
    2d54:	81 95       	neg	r24
    2d56:	9f 4f       	sbci	r25, 0xFF	; 255
    2d58:	64 2f       	mov	r22, r20
    2d5a:	77 27       	eor	r23, r23
    2d5c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__udivmodhi4>
    2d60:	80 5d       	subi	r24, 0xD0	; 208
    2d62:	8a 33       	cpi	r24, 0x3A	; 58
    2d64:	0c f0       	brlt	.+2      	; 0x2d68 <itoa+0x2c>
    2d66:	89 5d       	subi	r24, 0xD9	; 217
    2d68:	81 93       	st	Z+, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	a1 f7       	brne	.-24     	; 0x2d58 <itoa+0x1c>
    2d70:	16 f4       	brtc	.+4      	; 0x2d76 <itoa+0x3a>
    2d72:	5d e2       	ldi	r21, 0x2D	; 45
    2d74:	51 93       	st	Z+, r21
    2d76:	10 82       	st	Z, r1
    2d78:	c9 01       	movw	r24, r18
    2d7a:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <strrev>

00002d7e <strrev>:
    2d7e:	dc 01       	movw	r26, r24
    2d80:	fc 01       	movw	r30, r24
    2d82:	67 2f       	mov	r22, r23
    2d84:	71 91       	ld	r23, Z+
    2d86:	77 23       	and	r23, r23
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <strrev+0x4>
    2d8a:	32 97       	sbiw	r30, 0x02	; 2
    2d8c:	04 c0       	rjmp	.+8      	; 0x2d96 <strrev+0x18>
    2d8e:	7c 91       	ld	r23, X
    2d90:	6d 93       	st	X+, r22
    2d92:	70 83       	st	Z, r23
    2d94:	62 91       	ld	r22, -Z
    2d96:	ae 17       	cp	r26, r30
    2d98:	bf 07       	cpc	r27, r31
    2d9a:	c8 f3       	brcs	.-14     	; 0x2d8e <strrev+0x10>
    2d9c:	08 95       	ret

00002d9e <_exit>:
    2d9e:	f8 94       	cli

00002da0 <__stop_program>:
    2da0:	ff cf       	rjmp	.-2      	; 0x2da0 <__stop_program>
