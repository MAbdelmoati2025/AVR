
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00003782  00003816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800150  00800150  00003906  2**0
                  ALLOC
  3 .stab         0000366c  00000000  00000000  00003908  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c64  00000000  00000000  00006f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d327  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 28 1a 	call	0x3450	; 0x3450 <main>
      8a:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e3       	ldi	r24, 0x3A	; 58
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:
#include <avr/io.h>
#include <avr/interrupt.h>
static volatile void(*g_callback_ptr) (void)=NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callback_ptr != NULL_PTR)
     b70:	80 91 50 01 	lds	r24, 0x0150
     b74:	90 91 51 01 	lds	r25, 0x0151
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_7+0x40>
	{
		(*g_callback_ptr)();
     b7c:	e0 91 50 01 	lds	r30, 0x0150
     b80:	f0 91 51 01 	lds	r31, 0x0151
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_9>:
ISR(TIMER1_OVF_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(g_callback_ptr != NULL_PTR)
     bd6:	80 91 50 01 	lds	r24, 0x0150
     bda:	90 91 51 01 	lds	r25, 0x0151
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_9+0x40>
	{
		(*g_callback_ptr)();
     be2:	e0 91 50 01 	lds	r30, 0x0150
     be6:	f0 91 51 01 	lds	r31, 0x0151
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer1_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;
     c20:	ac e4       	ldi	r26, 0x4C	; 76
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	9c 93       	st	X, r25
     c30:	8e 93       	st	-X, r24
	OCR1A=Config_Ptr->compare_value;
     c32:	aa e4       	ldi	r26, 0x4A	; 74
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	84 81       	ldd	r24, Z+4	; 0x04
     c3c:	95 81       	ldd	r25, Z+5	; 0x05
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	9c 93       	st	X, r25
     c42:	8e 93       	st	-X, r24
	TCCR1A= (1<<FOC1A)|(1<<FOC1B);
     c44:	ef e4       	ldi	r30, 0x4F	; 79
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	8c e0       	ldi	r24, 0x0C	; 12
     c4a:	80 83       	st	Z, r24
	TCCR1B= (0xFF & Config_Ptr->prescaler);
     c4c:	ae e4       	ldi	r26, 0x4E	; 78
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e9 81       	ldd	r30, Y+1	; 0x01
     c52:	fa 81       	ldd	r31, Y+2	; 0x02
     c54:	80 81       	ld	r24, Z
     c56:	8c 93       	st	X, r24
	if(Config_Ptr->mode==NORMAL_MODE)
     c58:	e9 81       	ldd	r30, Y+1	; 0x01
     c5a:	fa 81       	ldd	r31, Y+2	; 0x02
     c5c:	81 81       	ldd	r24, Z+1	; 0x01
     c5e:	88 23       	and	r24, r24
     c60:	91 f4       	brne	.+36     	; 0xc86 <Timer1_init+0x74>
	{
		TCCR1A|= (Config_Ptr->mode);
     c62:	af e4       	ldi	r26, 0x4F	; 79
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	ef e4       	ldi	r30, 0x4F	; 79
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	90 81       	ld	r25, Z
     c6c:	e9 81       	ldd	r30, Y+1	; 0x01
     c6e:	fa 81       	ldd	r31, Y+2	; 0x02
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	89 2b       	or	r24, r25
     c74:	8c 93       	st	X, r24
		TIMSK|= (1<<TOIE1);
     c76:	a9 e5       	ldi	r26, 0x59	; 89
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e9 e5       	ldi	r30, 0x59	; 89
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	8c 93       	st	X, r24
     c84:	13 c0       	rjmp	.+38     	; 0xcac <Timer1_init+0x9a>
	}
	else if(Config_Ptr->mode==TIMER1_CTC_OCR1A)
     c86:	e9 81       	ldd	r30, Y+1	; 0x01
     c88:	fa 81       	ldd	r31, Y+2	; 0x02
     c8a:	81 81       	ldd	r24, Z+1	; 0x01
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	71 f4       	brne	.+28     	; 0xcac <Timer1_init+0x9a>
	{
		TCCR1B|=(1<<WGM12);
     c90:	ae e4       	ldi	r26, 0x4E	; 78
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ee e4       	ldi	r30, 0x4E	; 78
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	88 60       	ori	r24, 0x08	; 8
     c9c:	8c 93       	st	X, r24
		TIMSK|= (1<<OCIE1A);
     c9e:	a9 e5       	ldi	r26, 0x59	; 89
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e9 e5       	ldi	r30, 0x59	; 89
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 61       	ori	r24, 0x10	; 16
     caa:	8c 93       	st	X, r24
	}
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <Timer1_deInit>:

void Timer1_deInit(void)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	TCCR1B= CLK_STOP;
     cbe:	ee e4       	ldi	r30, 0x4E	; 78
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
	TCNT1=0;
     cc4:	ec e4       	ldi	r30, 0x4C	; 76
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	11 82       	std	Z+1, r1	; 0x01
     cca:	10 82       	st	Z, r1
	OCR1A=0;
     ccc:	ea e4       	ldi	r30, 0x4A	; 74
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	10 82       	st	Z, r1
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <Timer1_setCallBack+0x6>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01
	g_callback_ptr = (volatile void (*)(void))a_ptr;
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	90 93 51 01 	sts	0x0151, r25
     cf0:	80 93 50 01 	sts	0x0150, r24
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <GPIO_setupPinDirection>:
 */
#include <avr/io.h>                       // Include the AVR I/O library.
#include "gpio.h"                         // Include the GPIO header file.
#include "../LIB/common_macros.h"         // Include a file for common macros.

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <GPIO_setupPinDirection+0x6>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <GPIO_setupPinDirection+0x8>
     d06:	0f 92       	push	r0
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	6a 83       	std	Y+2, r22	; 0x02
     d10:	4b 83       	std	Y+3, r20	; 0x03
    if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	08 f0       	brcs	.+2      	; 0xd1a <GPIO_setupPinDirection+0x1c>
     d18:	d5 c0       	rjmp	.+426    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <GPIO_setupPinDirection+0x24>
     d20:	d1 c0       	rjmp	.+418    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
        // Check for valid port and pin numbers.
    }
    else {
        switch (port_num) {
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <GPIO_setupPinDirection+0x3a>
     d36:	43 c0       	rjmp	.+134    	; 0xdbe <GPIO_setupPinDirection+0xc0>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <GPIO_setupPinDirection+0x4e>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <GPIO_setupPinDirection+0x68>
     d4a:	bc c0       	rjmp	.+376    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
     d4c:	2c 81       	ldd	r18, Y+4	; 0x04
     d4e:	3d 81       	ldd	r19, Y+5	; 0x05
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <GPIO_setupPinDirection+0x5a>
     d56:	5f c0       	rjmp	.+190    	; 0xe16 <GPIO_setupPinDirection+0x118>
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <GPIO_setupPinDirection+0x66>
     d62:	85 c0       	rjmp	.+266    	; 0xe6e <GPIO_setupPinDirection+0x170>
     d64:	af c0       	rjmp	.+350    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
            case PORTA_ID:
                if (direction == PIN_INPUT) {
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	88 23       	and	r24, r24
     d6a:	a9 f4       	brne	.+42     	; 0xd96 <GPIO_setupPinDirection+0x98>
                    CLEAR_BIT(DDRA, pin_num);  // Set the pin direction to input.
     d6c:	aa e3       	ldi	r26, 0x3A	; 58
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <GPIO_setupPinDirection+0x8c>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <GPIO_setupPinDirection+0x88>
     d8e:	80 95       	com	r24
     d90:	84 23       	and	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	97 c0       	rjmp	.+302    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                else {
                    SET_BIT(DDRA, pin_num);    // Set the pin direction to output.
     d96:	aa e3       	ldi	r26, 0x3A	; 58
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ea e3       	ldi	r30, 0x3A	; 58
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <GPIO_setupPinDirection+0xb6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <GPIO_setupPinDirection+0xb2>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	83 c0       	rjmp	.+262    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                break;
            case PORTB_ID:
                if (direction == PIN_INPUT) {
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 23       	and	r24, r24
     dc2:	a9 f4       	brne	.+42     	; 0xdee <GPIO_setupPinDirection+0xf0>
                    CLEAR_BIT(DDRB, pin_num);  // Set the pin direction to input.
     dc4:	a7 e3       	ldi	r26, 0x37	; 55
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 e3       	ldi	r30, 0x37	; 55
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <GPIO_setupPinDirection+0xe4>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <GPIO_setupPinDirection+0xe0>
     de6:	80 95       	com	r24
     de8:	84 23       	and	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6b c0       	rjmp	.+214    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                else {
                    SET_BIT(DDRB, pin_num);    // Set the pin direction to output.
     dee:	a7 e3       	ldi	r26, 0x37	; 55
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e7 e3       	ldi	r30, 0x37	; 55
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_setupPinDirection+0x10e>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_setupPinDirection+0x10a>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	57 c0       	rjmp	.+174    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                break;
            case PORTC_ID:
                if (direction == PIN_INPUT) {
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	88 23       	and	r24, r24
     e1a:	a9 f4       	brne	.+42     	; 0xe46 <GPIO_setupPinDirection+0x148>
                    CLEAR_BIT(DDRC, pin_num);  // Set the pin direction to input.
     e1c:	a4 e3       	ldi	r26, 0x34	; 52
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e4 e3       	ldi	r30, 0x34	; 52
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_setupPinDirection+0x13c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_setupPinDirection+0x138>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	3f c0       	rjmp	.+126    	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                else {
                    SET_BIT(DDRC, pin_num);    // Set the pin direction to output.
     e46:	a4 e3       	ldi	r26, 0x34	; 52
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e4 e3       	ldi	r30, 0x34	; 52
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_setupPinDirection+0x166>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_setupPinDirection+0x162>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	2b c0       	rjmp	.+86     	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                break;
            case PORTD_ID:
                if (direction == PIN_INPUT) {
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 23       	and	r24, r24
     e72:	a9 f4       	brne	.+42     	; 0xe9e <GPIO_setupPinDirection+0x1a0>
                    CLEAR_BIT(DDRD, pin_num);  // Set the pin direction to input.
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_setupPinDirection+0x194>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_setupPinDirection+0x190>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	13 c0       	rjmp	.+38     	; 0xec4 <GPIO_setupPinDirection+0x1c6>
                }
                else {
                    SET_BIT(DDRD, pin_num);    // Set the pin direction to output.
     e9e:	a1 e3       	ldi	r26, 0x31	; 49
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e1 e3       	ldi	r30, 0x31	; 49
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <GPIO_setupPinDirection+0x1be>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <GPIO_setupPinDirection+0x1ba>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
                }
                break;
        }
    }
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <GPIO_writePin+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <GPIO_writePin+0x8>
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	6a 83       	std	Y+2, r22	; 0x02
     ee6:	4b 83       	std	Y+3, r20	; 0x03
    if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	08 f0       	brcs	.+2      	; 0xef0 <GPIO_writePin+0x1c>
     eee:	d5 c0       	rjmp	.+426    	; 0x109a <GPIO_writePin+0x1c6>
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	88 30       	cpi	r24, 0x08	; 8
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <GPIO_writePin+0x24>
     ef6:	d1 c0       	rjmp	.+418    	; 0x109a <GPIO_writePin+0x1c6>
        // Check for valid port and pin numbers.
    }
    else {
        switch (port_num) {
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3d 83       	std	Y+5, r19	; 0x05
     f00:	2c 83       	std	Y+4, r18	; 0x04
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <GPIO_writePin+0x3a>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <GPIO_writePin+0xc0>
     f0e:	2c 81       	ldd	r18, Y+4	; 0x04
     f10:	3d 81       	ldd	r19, Y+5	; 0x05
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	2c f4       	brge	.+10     	; 0xf22 <GPIO_writePin+0x4e>
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	71 f0       	breq	.+28     	; 0xf3c <GPIO_writePin+0x68>
     f20:	bc c0       	rjmp	.+376    	; 0x109a <GPIO_writePin+0x1c6>
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	3d 81       	ldd	r19, Y+5	; 0x05
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	09 f4       	brne	.+2      	; 0xf2e <GPIO_writePin+0x5a>
     f2c:	5f c0       	rjmp	.+190    	; 0xfec <GPIO_writePin+0x118>
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <GPIO_writePin+0x66>
     f38:	85 c0       	rjmp	.+266    	; 0x1044 <GPIO_writePin+0x170>
     f3a:	af c0       	rjmp	.+350    	; 0x109a <GPIO_writePin+0x1c6>
            case PORTA_ID:
                if (value == LOGIC_HIGH) {
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <GPIO_writePin+0x96>
                    SET_BIT(PORTA, pin_num);  // Set the pin to logic high.
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_writePin+0x8c>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_writePin+0x88>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	98 c0       	rjmp	.+304    	; 0x109a <GPIO_writePin+0x1c6>
                }
                else {
                    CLEAR_BIT(PORTA, pin_num);  // Set the pin to logic low.
     f6a:	ab e3       	ldi	r26, 0x3B	; 59
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <GPIO_writePin+0xb4>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <GPIO_writePin+0xb0>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	83 c0       	rjmp	.+262    	; 0x109a <GPIO_writePin+0x1c6>
                }
                break;
            case PORTB_ID:
                if (value == LOGIC_HIGH) {
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	a1 f4       	brne	.+40     	; 0xfc2 <GPIO_writePin+0xee>
                    SET_BIT(PORTB, pin_num);  // Set the pin to logic high.
     f9a:	a8 e3       	ldi	r26, 0x38	; 56
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e8 e3       	ldi	r30, 0x38	; 56
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_writePin+0xe4>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_writePin+0xe0>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	6c c0       	rjmp	.+216    	; 0x109a <GPIO_writePin+0x1c6>
                }
                else {
                    CLEAR_BIT(PORTB, pin_num);  // Set the pin to logic low.
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <GPIO_writePin+0x10c>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <GPIO_writePin+0x108>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	57 c0       	rjmp	.+174    	; 0x109a <GPIO_writePin+0x1c6>
                }
                break;
            case PORTC_ID:
                if (value == LOGIC_HIGH) {
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	a1 f4       	brne	.+40     	; 0x101a <GPIO_writePin+0x146>
                    SET_BIT(PORTC, pin_num);  // Set the pin to logic high.
     ff2:	a5 e3       	ldi	r26, 0x35	; 53
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e3       	ldi	r30, 0x35	; 53
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <GPIO_writePin+0x13c>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <GPIO_writePin+0x138>
    1014:	84 2b       	or	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	40 c0       	rjmp	.+128    	; 0x109a <GPIO_writePin+0x1c6>
                }
                else {
                    CLEAR_BIT(PORTC, pin_num);  // Set the pin to logic low.
    101a:	a5 e3       	ldi	r26, 0x35	; 53
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e3       	ldi	r30, 0x35	; 53
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_writePin+0x164>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <GPIO_writePin+0x160>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	2b c0       	rjmp	.+86     	; 0x109a <GPIO_writePin+0x1c6>
                }
                break;
            case PORTD_ID:
                if (value == LOGIC_HIGH) {
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	a1 f4       	brne	.+40     	; 0x1072 <GPIO_writePin+0x19e>
                    SET_BIT(PORTD, pin_num);  // Set the pin to logic high.
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <GPIO_writePin+0x194>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <GPIO_writePin+0x190>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	14 c0       	rjmp	.+40     	; 0x109a <GPIO_writePin+0x1c6>
                }
                else {
                    CLEAR_BIT(PORTD, pin_num);  // Set the pin to logic low.
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_writePin+0x1bc>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_writePin+0x1b8>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
                }
                break;
        }
    }
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <GPIO_readPin+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <GPIO_readPin+0x8>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	84 30       	cpi	r24, 0x04	; 4
    10c0:	18 f4       	brcc	.+6      	; 0x10c8 <GPIO_readPin+0x1e>
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	10 f0       	brcs	.+4      	; 0x10cc <GPIO_readPin+0x22>
        return LOGIC_LOW;  // Return logic low for invalid port or pin.
    10c8:	1d 82       	std	Y+5, r1	; 0x05
    10ca:	82 c0       	rjmp	.+260    	; 0x11d0 <GPIO_readPin+0x126>
    }
    else {
        switch (port_num) {
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
    10d6:	4b 81       	ldd	r20, Y+3	; 0x03
    10d8:	5c 81       	ldd	r21, Y+4	; 0x04
    10da:	41 30       	cpi	r20, 0x01	; 1
    10dc:	51 05       	cpc	r21, r1
    10de:	79 f1       	breq	.+94     	; 0x113e <GPIO_readPin+0x94>
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <GPIO_readPin+0x4c>
    10ea:	2b 81       	ldd	r18, Y+3	; 0x03
    10ec:	3c 81       	ldd	r19, Y+4	; 0x04
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	69 f0       	breq	.+26     	; 0x110e <GPIO_readPin+0x64>
    10f4:	6c c0       	rjmp	.+216    	; 0x11ce <GPIO_readPin+0x124>
    10f6:	4b 81       	ldd	r20, Y+3	; 0x03
    10f8:	5c 81       	ldd	r21, Y+4	; 0x04
    10fa:	42 30       	cpi	r20, 0x02	; 2
    10fc:	51 05       	cpc	r21, r1
    10fe:	b9 f1       	breq	.+110    	; 0x116e <GPIO_readPin+0xc4>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <GPIO_readPin+0x62>
    110a:	49 c0       	rjmp	.+146    	; 0x119e <GPIO_readPin+0xf4>
    110c:	60 c0       	rjmp	.+192    	; 0x11ce <GPIO_readPin+0x124>
            case PORTA_ID:
                if (BIT_IS_SET(PINA, pin_num)) {
    110e:	e9 e3       	ldi	r30, 0x39	; 57
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a9 01       	movw	r20, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_readPin+0x7c>
    1122:	55 95       	asr	r21
    1124:	47 95       	ror	r20
    1126:	8a 95       	dec	r24
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_readPin+0x78>
    112a:	ca 01       	movw	r24, r20
    112c:	81 70       	andi	r24, 0x01	; 1
    112e:	90 70       	andi	r25, 0x00	; 0
    1130:	88 23       	and	r24, r24
    1132:	19 f0       	breq	.+6      	; 0x113a <GPIO_readPin+0x90>
                    return LOGIC_HIGH;  // Return logic high if the pin is set.
    1134:	51 e0       	ldi	r21, 0x01	; 1
    1136:	5d 83       	std	Y+5, r21	; 0x05
    1138:	4b c0       	rjmp	.+150    	; 0x11d0 <GPIO_readPin+0x126>
                }
                else {
                    return LOGIC_LOW;   // Return logic low if the pin is clear.
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	49 c0       	rjmp	.+146    	; 0x11d0 <GPIO_readPin+0x126>
                }
                break;
            case PORTB_ID:
                if (BIT_IS_SET(PINB, pin_num)) {
    113e:	e6 e3       	ldi	r30, 0x36	; 54
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_readPin+0xac>
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_readPin+0xa8>
    115a:	ca 01       	movw	r24, r20
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	90 70       	andi	r25, 0x00	; 0
    1160:	88 23       	and	r24, r24
    1162:	19 f0       	breq	.+6      	; 0x116a <GPIO_readPin+0xc0>
                    return LOGIC_HIGH;  // Return logic high if the pin is set.
    1164:	51 e0       	ldi	r21, 0x01	; 1
    1166:	5d 83       	std	Y+5, r21	; 0x05
    1168:	33 c0       	rjmp	.+102    	; 0x11d0 <GPIO_readPin+0x126>
                }
                else {
                    return LOGIC_LOW;   // Return logic low if the pin is clear.
    116a:	1d 82       	std	Y+5, r1	; 0x05
    116c:	31 c0       	rjmp	.+98     	; 0x11d0 <GPIO_readPin+0x126>
                }
                break;
            case PORTC_ID:
                if (BIT_IS_SET(PINC, pin_num)) {
    116e:	e3 e3       	ldi	r30, 0x33	; 51
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <GPIO_readPin+0xdc>
    1182:	55 95       	asr	r21
    1184:	47 95       	ror	r20
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <GPIO_readPin+0xd8>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	88 23       	and	r24, r24
    1192:	19 f0       	breq	.+6      	; 0x119a <GPIO_readPin+0xf0>
                    return LOGIC_HIGH;  // Return logic high if the pin is set.
    1194:	51 e0       	ldi	r21, 0x01	; 1
    1196:	5d 83       	std	Y+5, r21	; 0x05
    1198:	1b c0       	rjmp	.+54     	; 0x11d0 <GPIO_readPin+0x126>
                }
                else {
                    return LOGIC_LOW;   // Return logic low if the pin is clear.
    119a:	1d 82       	std	Y+5, r1	; 0x05
    119c:	19 c0       	rjmp	.+50     	; 0x11d0 <GPIO_readPin+0x126>
                }
                break;
            case PORTD_ID:
                if (BIT_IS_SET(PIND, pin_num)) {
    119e:	e0 e3       	ldi	r30, 0x30	; 48
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_readPin+0x10c>
    11b2:	55 95       	asr	r21
    11b4:	47 95       	ror	r20
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_readPin+0x108>
    11ba:	ca 01       	movw	r24, r20
    11bc:	81 70       	andi	r24, 0x01	; 1
    11be:	90 70       	andi	r25, 0x00	; 0
    11c0:	88 23       	and	r24, r24
    11c2:	19 f0       	breq	.+6      	; 0x11ca <GPIO_readPin+0x120>
                    return LOGIC_HIGH;  // Return logic high if the pin is set.
    11c4:	51 e0       	ldi	r21, 0x01	; 1
    11c6:	5d 83       	std	Y+5, r21	; 0x05
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <GPIO_readPin+0x126>
                }
                else {
                    return LOGIC_LOW;   // Return logic low if the pin is clear.
    11ca:	1d 82       	std	Y+5, r1	; 0x05
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <GPIO_readPin+0x126>
                }
                break;
        }
    }
    return LOGIC_LOW;
    11ce:	1d 82       	std	Y+5, r1	; 0x05
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <GPIO_setupPortDirection+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <GPIO_setupPortDirection+0x8>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num >= NUM_OF_PORTS) {
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	90 f5       	brcc	.+100    	; 0x125c <GPIO_setupPortDirection+0x7a>
        // Check for a valid port number.
    }
    else {
        switch (port_num) {
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3c 83       	std	Y+4, r19	; 0x04
    1200:	2b 83       	std	Y+3, r18	; 0x03
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	d1 f0       	breq	.+52     	; 0x1240 <GPIO_setupPortDirection+0x5e>
    120c:	2b 81       	ldd	r18, Y+3	; 0x03
    120e:	3c 81       	ldd	r19, Y+4	; 0x04
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	2c f4       	brge	.+10     	; 0x1220 <GPIO_setupPortDirection+0x3e>
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	61 f0       	breq	.+24     	; 0x1236 <GPIO_setupPortDirection+0x54>
    121e:	1e c0       	rjmp	.+60     	; 0x125c <GPIO_setupPortDirection+0x7a>
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	3c 81       	ldd	r19, Y+4	; 0x04
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	81 f0       	breq	.+32     	; 0x124a <GPIO_setupPortDirection+0x68>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	91 05       	cpc	r25, r1
    1232:	81 f0       	breq	.+32     	; 0x1254 <GPIO_setupPortDirection+0x72>
    1234:	13 c0       	rjmp	.+38     	; 0x125c <GPIO_setupPortDirection+0x7a>
            case PORTA_ID:
                DDRA = direction;  // Set the direction of all pins of Port A.
    1236:	ea e3       	ldi	r30, 0x3A	; 58
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
    123e:	0e c0       	rjmp	.+28     	; 0x125c <GPIO_setupPortDirection+0x7a>
                break;
            case PORTB_ID:
                DDRB = direction;  // Set the direction of all pins of Port B.
    1240:	e7 e3       	ldi	r30, 0x37	; 55
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
    1248:	09 c0       	rjmp	.+18     	; 0x125c <GPIO_setupPortDirection+0x7a>
                break;
            case PORTC_ID:
                DDRC = direction;  // Set the direction of all pins of Port C.
    124a:	e4 e3       	ldi	r30, 0x34	; 52
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
    1252:	04 c0       	rjmp	.+8      	; 0x125c <GPIO_setupPortDirection+0x7a>
                break;
            case PORTD_ID:
                DDRD = direction;  // Set the direction of all pins of Port D.
    1254:	e1 e3       	ldi	r30, 0x31	; 49
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	80 83       	st	Z, r24
                break;
        }
    }
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value) {
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <GPIO_writePort+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_writePort+0x8>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num >= NUM_OF_PORTS) {
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	90 f5       	brcc	.+100    	; 0x12e4 <GPIO_writePort+0x7a>
        // Check for a valid port number.
    }
    else {
        switch (port_num) {
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3c 83       	std	Y+4, r19	; 0x04
    1288:	2b 83       	std	Y+3, r18	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <GPIO_writePort+0x5e>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <GPIO_writePort+0x3e>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <GPIO_writePort+0x54>
    12a6:	1e c0       	rjmp	.+60     	; 0x12e4 <GPIO_writePort+0x7a>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <GPIO_writePort+0x68>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <GPIO_writePort+0x72>
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <GPIO_writePort+0x7a>
            case PORTA_ID:
                PORTA = value;  // Set the output value for all pins of Port A.
    12be:	eb e3       	ldi	r30, 0x3B	; 59
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <GPIO_writePort+0x7a>
                break;
            case PORTB_ID:
                PORTB = value;  // Set the output value for all pins of Port B.
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <GPIO_writePort+0x7a>
                break;
            case PORTC_ID:
                PORTC = value;  // Set the output value for all pins of Port C.
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <GPIO_writePort+0x7a>
                break;
            case PORTD_ID:
                PORTD = value;  // Set the output value for all pins of Port D.
    12dc:	e2 e3       	ldi	r30, 0x32	; 50
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
                break;
        }
    }
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num) {
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_readPort+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_readPort+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    if (port_num >= NUM_OF_PORTS) {
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	98 f5       	brcc	.+102    	; 0x136c <GPIO_readPort+0x7a>
        // Check for a valid port number.
    }
    else {
        switch (port_num) {
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	3c 83       	std	Y+4, r19	; 0x04
    130e:	2b 83       	std	Y+3, r18	; 0x03
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	91 05       	cpc	r25, r1
    1318:	d1 f0       	breq	.+52     	; 0x134e <GPIO_readPort+0x5c>
    131a:	2b 81       	ldd	r18, Y+3	; 0x03
    131c:	3c 81       	ldd	r19, Y+4	; 0x04
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	2c f4       	brge	.+10     	; 0x132e <GPIO_readPort+0x3c>
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	61 f0       	breq	.+24     	; 0x1344 <GPIO_readPort+0x52>
    132c:	1f c0       	rjmp	.+62     	; 0x136c <GPIO_readPort+0x7a>
    132e:	2b 81       	ldd	r18, Y+3	; 0x03
    1330:	3c 81       	ldd	r19, Y+4	; 0x04
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	81 f0       	breq	.+32     	; 0x1358 <GPIO_readPort+0x66>
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	91 05       	cpc	r25, r1
    1340:	81 f0       	breq	.+32     	; 0x1362 <GPIO_readPort+0x70>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <GPIO_readPort+0x7a>
            case PORTA_ID:
                return PORTA;  // Return the value of all pins in Port A.
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	90 81       	ld	r25, Z
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	10 c0       	rjmp	.+32     	; 0x136e <GPIO_readPort+0x7c>
            case PORTB_ID:
                return PORTB;  // Return the value of all pins in Port B.
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	20 81       	ld	r18, Z
    1354:	2a 83       	std	Y+2, r18	; 0x02
    1356:	0b c0       	rjmp	.+22     	; 0x136e <GPIO_readPort+0x7c>
            case PORTC_ID:
                return PORTC;  // Return the value of all pins in Port C.
    1358:	e5 e3       	ldi	r30, 0x35	; 53
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	30 81       	ld	r19, Z
    135e:	3a 83       	std	Y+2, r19	; 0x02
    1360:	06 c0       	rjmp	.+12     	; 0x136e <GPIO_readPort+0x7c>
            case PORTD_ID:
                return PORTD;  // Return the value of all pins in Port D.
    1362:	e2 e3       	ldi	r30, 0x32	; 50
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	01 c0       	rjmp	.+2      	; 0x136e <GPIO_readPort+0x7c>
        }
    }
    return LOGIC_LOW;
    136c:	1a 82       	std	Y+2, r1	; 0x02
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <UART_init>:
#include "avr/io.h" /* To use the UART Registers */
#include "uart.h"
#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <UART_init+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <UART_init+0x8>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    138e:	1a 82       	std	Y+2, r1	; 0x02
    1390:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X);
    1392:	eb e2       	ldi	r30, 0x2B	; 43
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    139a:	ea e2       	ldi	r30, 0x2A	; 42
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	88 e1       	ldi	r24, 0x18	; 24
    13a0:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL);
    13a2:	e0 e4       	ldi	r30, 0x40	; 64
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	80 83       	st	Z, r24

	UCSRC = (UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    13aa:	a0 e4       	ldi	r26, 0x40	; 64
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e0 e4       	ldi	r30, 0x40	; 64
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	2f 7c       	andi	r18, 0xCF	; 207
    13b8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ba:	fc 81       	ldd	r31, Y+4	; 0x04
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	82 95       	swap	r24
    13c4:	92 95       	swap	r25
    13c6:	90 7f       	andi	r25, 0xF0	; 240
    13c8:	98 27       	eor	r25, r24
    13ca:	80 7f       	andi	r24, 0xF0	; 240
    13cc:	98 27       	eor	r25, r24
    13ce:	82 2b       	or	r24, r18
    13d0:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((Config_Ptr->stop_bit)<<3);
    13d2:	a0 e4       	ldi	r26, 0x40	; 64
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e0 e4       	ldi	r30, 0x40	; 64
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	28 2f       	mov	r18, r24
    13de:	27 7f       	andi	r18, 0xF7	; 247
    13e0:	eb 81       	ldd	r30, Y+3	; 0x03
    13e2:	fc 81       	ldd	r31, Y+4	; 0x04
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	82 2b       	or	r24, r18
    13f8:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    13fa:	a0 e4       	ldi	r26, 0x40	; 64
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e0 e4       	ldi	r30, 0x40	; 64
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	28 2f       	mov	r18, r24
    1406:	29 7f       	andi	r18, 0xF9	; 249
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	80 81       	ld	r24, Z
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	82 2b       	or	r24, r18
    1418:	8c 93       	st	X, r24
	UCSRB = (UCSRB&0xFB)|((Config_Ptr->bit_data) & 0x04);//for Reserved1 , Rreserved2 ,Rreserved3 and ninebit
    141a:	aa e2       	ldi	r26, 0x2A	; 42
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ea e2       	ldi	r30, 0x2A	; 42
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	98 2f       	mov	r25, r24
    1426:	9b 7f       	andi	r25, 0xFB	; 251
    1428:	eb 81       	ldd	r30, Y+3	; 0x03
    142a:	fc 81       	ldd	r31, Y+4	; 0x04
    142c:	80 81       	ld	r24, Z
    142e:	84 70       	andi	r24, 0x04	; 4
    1430:	89 2b       	or	r24, r25
    1432:	8c 93       	st	X, r24


	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1434:	eb 81       	ldd	r30, Y+3	; 0x03
    1436:	fc 81       	ldd	r31, Y+4	; 0x04
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	94 81       	ldd	r25, Z+4	; 0x04
    143c:	a5 81       	ldd	r26, Z+5	; 0x05
    143e:	b6 81       	ldd	r27, Z+6	; 0x06
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	aa 1f       	adc	r26, r26
    1446:	bb 1f       	adc	r27, r27
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	aa 1f       	adc	r26, r26
    144e:	bb 1f       	adc	r27, r27
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	aa 1f       	adc	r26, r26
    1456:	bb 1f       	adc	r27, r27
    1458:	9c 01       	movw	r18, r24
    145a:	ad 01       	movw	r20, r26
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	92 e1       	ldi	r25, 0x12	; 18
    1460:	aa e7       	ldi	r26, 0x7A	; 122
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 21 1b 	call	0x3642	; 0x3642 <__udivmodsi4>
    146c:	da 01       	movw	r26, r20
    146e:	c9 01       	movw	r24, r18
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    1476:	e0 e4       	ldi	r30, 0x40	; 64
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	89 2f       	mov	r24, r25
    1480:	99 27       	eor	r25, r25
    1482:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1484:	e9 e2       	ldi	r30, 0x29	; 41
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	80 83       	st	Z, r24
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <UART_sendByte>:


void UART_sendByte(const uint8 data)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    14a6:	eb e2       	ldi	r30, 0x2B	; 43
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	80 72       	andi	r24, 0x20	; 32
    14b2:	90 70       	andi	r25, 0x00	; 0
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	b9 f3       	breq	.-18     	; 0x14a6 <UART_sendByte+0xc>

	UDR = data;
    14b8:	ec e2       	ldi	r30, 0x2C	; 44
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	80 83       	st	Z, r24

}
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    14d0:	eb e2       	ldi	r30, 0x2B	; 43
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 23       	and	r24, r24
    14d8:	dc f7       	brge	.-10     	; 0x14d0 <UART_recieveByte+0x8>

	return UDR;
    14da:	ec e2       	ldi	r30, 0x2C	; 44
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
}
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <UART_sendString+0x6>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9b 83       	std	Y+3, r25	; 0x03
    14f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	fc 01       	movw	r30, r24
    1506:	e2 0f       	add	r30, r18
    1508:	f3 1f       	adc	r31, r19
    150a:	80 81       	ld	r24, Z
    150c:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
		i++;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	fc 01       	movw	r30, r24
    1522:	e2 0f       	add	r30, r18
    1524:	f3 1f       	adc	r31, r19
    1526:	80 81       	ld	r24, Z
    1528:	88 23       	and	r24, r24
    152a:	39 f7       	brne	.-50     	; 0x14fa <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <UART_receiveString+0xa>
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	9b 83       	std	Y+3, r25	; 0x03
    154a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    154c:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	8c 01       	movw	r16, r24
    155a:	02 0f       	add	r16, r18
    155c:	13 1f       	adc	r17, r19
    155e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    1562:	f8 01       	movw	r30, r16
    1564:	80 83       	st	Z, r24
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <UART_receiveString+0x4e>

	while(Str[i] != '#')
	{
		i++;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	8c 01       	movw	r16, r24
    157a:	02 0f       	add	r16, r18
    157c:	13 1f       	adc	r17, r19
    157e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    1582:	f8 01       	movw	r30, r16
    1584:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_recieveByte();

	while(Str[i] != '#')
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	fc 01       	movw	r30, r24
    1592:	e2 0f       	add	r30, r18
    1594:	f3 1f       	adc	r31, r19
    1596:	80 81       	ld	r24, Z
    1598:	83 32       	cpi	r24, 0x23	; 35
    159a:	31 f7       	brne	.-52     	; 0x1568 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	Str[i] = '\0';
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	9b 81       	ldd	r25, Y+3	; 0x03
    15a6:	fc 01       	movw	r30, r24
    15a8:	e2 0f       	add	r30, r18
    15aa:	f3 1f       	adc	r31, r19
    15ac:	10 82       	st	Z, r1
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	08 95       	ret

000015be <KEYPAD_getPressedKey>:
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);

#endif

#endif
uint8 KEYPAD_getPressedKey(void){
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	60 97       	sbiw	r28, 0x10	; 16
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
	uint8 row , col ;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	63 e0       	ldi	r22, 0x03	; 3
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	64 e0       	ldi	r22, 0x04	; 4
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	65 e0       	ldi	r22, 0x05	; 5
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	66 e0       	ldi	r22, 0x06	; 6
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
#if(NUM_OF_COLUMNS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	67 e0       	ldi	r22, 0x07	; 7
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
#endif
	while(1){
		for(row=0 ; row < NUM_OF_ROWS ; row++){
    1622:	18 8a       	std	Y+16, r1	; 0x10
    1624:	ab c0       	rjmp	.+342    	; 0x177c <KEYPAD_getPressedKey+0x1be>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	68 89       	ldd	r22, Y+16	; 0x10
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,KEYPAD_BUTTON_PRESSED);
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>

			for(col = 0 ; col <NUM_OF_COLUMNS ;col++){
    163a:	1f 86       	std	Y+15, r1	; 0x0f
    163c:	22 c0       	rjmp	.+68     	; 0x1682 <KEYPAD_getPressedKey+0xc4>
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    163e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1640:	98 2f       	mov	r25, r24
    1642:	9c 5f       	subi	r25, 0xFC	; 252
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	69 2f       	mov	r22, r25
    1648:	0e 94 55 08 	call	0x10aa	; 0x10aa <GPIO_readPin>
    164c:	88 23       	and	r24, r24
    164e:	b1 f4       	brne	.+44     	; 0x167c <KEYPAD_getPressedKey+0xbe>
#endif
#elif (NUM_OF_COLUMNS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*NUM_OF_COLUMNS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COLUMNS)+col+1);
    1650:	88 89       	ldd	r24, Y+16	; 0x10
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	98 2f       	mov	r25, r24
    1660:	8f 85       	ldd	r24, Y+15	; 0x0f
    1662:	89 0f       	add	r24, r25
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	0e 94 c3 0b 	call	0x1786	; 0x1786 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    166a:	60 96       	adiw	r28, 0x10	; 16
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret
		for(row=0 ; row < NUM_OF_ROWS ; row++){

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col <NUM_OF_COLUMNS ;col++){
    167c:	8f 85       	ldd	r24, Y+15	; 0x0f
    167e:	8f 5f       	subi	r24, 0xFF	; 255
    1680:	8f 87       	std	Y+15, r24	; 0x0f
    1682:	8f 85       	ldd	r24, Y+15	; 0x0f
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	d8 f2       	brcs	.-74     	; 0x163e <KEYPAD_getPressedKey+0x80>
					return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COLUMNS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	68 89       	ldd	r22, Y+16	; 0x10
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 ea       	ldi	r26, 0xA0	; 160
    1698:	b0 e4       	ldi	r27, 0x40	; 64
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a ef       	ldi	r20, 0xFA	; 250
    16b0:	54 e4       	ldi	r21, 0x44	; 68
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <KEYPAD_getPressedKey+0x186>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <KEYPAD_getPressedKey+0x174>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <KEYPAD_getPressedKey+0x168>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <KEYPAD_getPressedKey+0x1b0>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
#if(NUM_OF_COLUMNS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif
	while(1){
		for(row=0 ; row < NUM_OF_ROWS ; row++){
    1776:	88 89       	ldd	r24, Y+16	; 0x10
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	88 8b       	std	Y+16, r24	; 0x10
    177c:	88 89       	ldd	r24, Y+16	; 0x10
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	08 f4       	brcc	.+2      	; 0x1784 <KEYPAD_getPressedKey+0x1c6>
    1782:	51 cf       	rjmp	.-350    	; 0x1626 <KEYPAD_getPressedKey+0x68>
    1784:	4e cf       	rjmp	.-356    	; 0x1622 <KEYPAD_getPressedKey+0x64>

00001786 <KEYPAD_4x4_adjustKeyNumber>:
		}
	}
}
#ifndef STANDARD_KEYPAD
#if(NUM_OF_COLUMNS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <KEYPAD_4x4_adjustKeyNumber+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <KEYPAD_4x4_adjustKeyNumber+0x8>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	8a 83       	std	Y+2, r24	; 0x02
	uint8 adjustedKey=0;
    1794:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number){
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3c 83       	std	Y+4, r19	; 0x04
    179e:	2b 83       	std	Y+3, r18	; 0x03
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	91 05       	cpc	r25, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <KEYPAD_4x4_adjustKeyNumber+0x26>
    17aa:	70 c0       	rjmp	.+224    	; 0x188c <KEYPAD_4x4_adjustKeyNumber+0x106>
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	3c 81       	ldd	r19, Y+4	; 0x04
    17b0:	29 30       	cpi	r18, 0x09	; 9
    17b2:	31 05       	cpc	r19, r1
    17b4:	5c f5       	brge	.+86     	; 0x180c <KEYPAD_4x4_adjustKeyNumber+0x86>
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    17c0:	59 c0       	rjmp	.+178    	; 0x1874 <KEYPAD_4x4_adjustKeyNumber+0xee>
    17c2:	2b 81       	ldd	r18, Y+3	; 0x03
    17c4:	3c 81       	ldd	r19, Y+4	; 0x04
    17c6:	25 30       	cpi	r18, 0x05	; 5
    17c8:	31 05       	cpc	r19, r1
    17ca:	9c f4       	brge	.+38     	; 0x17f2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	91 05       	cpc	r25, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    17d6:	48 c0       	rjmp	.+144    	; 0x1868 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	23 30       	cpi	r18, 0x03	; 3
    17de:	31 05       	cpc	r19, r1
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    17e2:	45 c0       	rjmp	.+138    	; 0x186e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    17ee:	39 c0       	rjmp	.+114    	; 0x1862 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    17f0:	67 c0       	rjmp	.+206    	; 0x18c0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    17f2:	2b 81       	ldd	r18, Y+3	; 0x03
    17f4:	3c 81       	ldd	r19, Y+4	; 0x04
    17f6:	26 30       	cpi	r18, 0x06	; 6
    17f8:	31 05       	cpc	r19, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <KEYPAD_4x4_adjustKeyNumber+0x78>
    17fc:	41 c0       	rjmp	.+130    	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	87 30       	cpi	r24, 0x07	; 7
    1804:	91 05       	cpc	r25, r1
    1806:	0c f0       	brlt	.+2      	; 0x180a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1808:	3e c0       	rjmp	.+124    	; 0x1886 <KEYPAD_4x4_adjustKeyNumber+0x100>
    180a:	37 c0       	rjmp	.+110    	; 0x187a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    180c:	2b 81       	ldd	r18, Y+3	; 0x03
    180e:	3c 81       	ldd	r19, Y+4	; 0x04
    1810:	2c 30       	cpi	r18, 0x0C	; 12
    1812:	31 05       	cpc	r19, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1816:	46 c0       	rjmp	.+140    	; 0x18a4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	8d 30       	cpi	r24, 0x0D	; 13
    181e:	91 05       	cpc	r25, r1
    1820:	5c f4       	brge	.+22     	; 0x1838 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	2a 30       	cpi	r18, 0x0A	; 10
    1828:	31 05       	cpc	r19, r1
    182a:	b1 f1       	breq	.+108    	; 0x1898 <KEYPAD_4x4_adjustKeyNumber+0x112>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	8b 30       	cpi	r24, 0x0B	; 11
    1832:	91 05       	cpc	r25, r1
    1834:	a4 f5       	brge	.+104    	; 0x189e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1836:	2d c0       	rjmp	.+90     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1838:	2b 81       	ldd	r18, Y+3	; 0x03
    183a:	3c 81       	ldd	r19, Y+4	; 0x04
    183c:	2e 30       	cpi	r18, 0x0E	; 14
    183e:	31 05       	cpc	r19, r1
    1840:	b9 f1       	breq	.+110    	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	8e 30       	cpi	r24, 0x0E	; 14
    1848:	91 05       	cpc	r25, r1
    184a:	7c f1       	brlt	.+94     	; 0x18aa <KEYPAD_4x4_adjustKeyNumber+0x124>
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	2f 30       	cpi	r18, 0x0F	; 15
    1852:	31 05       	cpc	r19, r1
    1854:	79 f1       	breq	.+94     	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	80 31       	cpi	r24, 0x10	; 16
    185c:	91 05       	cpc	r25, r1
    185e:	69 f1       	breq	.+90     	; 0x18ba <KEYPAD_4x4_adjustKeyNumber+0x134>
    1860:	2f c0       	rjmp	.+94     	; 0x18c0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1: adjustedKey = 7;
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	2e c0       	rjmp	.+92     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: adjustedKey = 8;
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	2b c0       	rjmp	.+86     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: adjustedKey = 9;
    186e:	89 e0       	ldi	r24, 0x09	; 9
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	28 c0       	rjmp	.+80     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: adjustedKey = '%'; // ASCII Code of %
    1874:	85 e2       	ldi	r24, 0x25	; 37
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	25 c0       	rjmp	.+74     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: adjustedKey = 4;
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	22 c0       	rjmp	.+68     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: adjustedKey = 5;
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	1f c0       	rjmp	.+62     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: adjustedKey = 6;
    1886:	86 e0       	ldi	r24, 0x06	; 6
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	1c c0       	rjmp	.+56     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: adjustedKey = '*'; /* ASCII Code of '*' */
    188c:	8a e2       	ldi	r24, 0x2A	; 42
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	19 c0       	rjmp	.+50     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9:adjustedKey = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	16 c0       	rjmp	.+44     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: adjustedKey = 2;
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	13 c0       	rjmp	.+38     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: adjustedKey = 3;
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	10 c0       	rjmp	.+32     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12:adjustedKey  = '-'; /* ASCII Code of '-' */
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: adjustedKey = 13;  /* ASCII of Enter */
    18aa:	8d e0       	ldi	r24, 0x0D	; 13
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14:adjustedKey  = 0;
    18b0:	19 82       	std	Y+1, r1	; 0x01
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: adjustedKey = '='; /* ASCII Code of '=' */
    18b4:	8d e3       	ldi	r24, 0x3D	; 61
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: adjustedKey = '+'; /* ASCII Code of '+' */
    18ba:	8b e2       	ldi	r24, 0x2B	; 43
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default:adjustedKey= button_number;
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return adjustedKey;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <LCD_init>:
#include <util/delay.h>            // Include the delay library for _delay_ms function.
#include "../MCAL/gpio.h"          // Include the GPIO header file.
#include "../HAL/lcd.h"            // Include the LCD header file.
#include "../LIB/common_macros.h"  // Include common macros for bit manipulation.

void LCD_init(void){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	2e 97       	sbiw	r28, 0x0e	; 14
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    // Initialize the LCD module.

    // Set the direction of RS and E pins as output.
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    18e8:	83 e0       	ldi	r24, 0x03	; 3
    18ea:	64 e0       	ldi	r22, 0x04	; 4
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	65 e0       	ldi	r22, 0x05	; 5
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <GPIO_setupPinDirection>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 ea       	ldi	r26, 0xA0	; 160
    1902:	b1 e4       	ldi	r27, 0x41	; 65
    1904:	8b 87       	std	Y+11, r24	; 0x0b
    1906:	9c 87       	std	Y+12, r25	; 0x0c
    1908:	ad 87       	std	Y+13, r26	; 0x0d
    190a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8f 83       	std	Y+7, r24	; 0x07
    1926:	98 87       	std	Y+8, r25	; 0x08
    1928:	a9 87       	std	Y+9, r26	; 0x09
    192a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <LCD_init+0x7a>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <LCD_init+0xf8>
	else if (__tmp > 65535)
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <LCD_init+0xda>
    1990:	88 ec       	ldi	r24, 0xC8	; 200
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_init+0xc8>
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <LCD_init+0xbc>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_init+0x104>
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01

#endif

#if (LCD_DATA_BITS_MODE == 8)
    // If using 8-bit data mode, set the direction of the data port as output.
    GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	6f ef       	ldi	r22, 0xFF	; 255
    19e4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <GPIO_setupPortDirection>

    // Send initialization command for 8-bit mode.
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    19e8:	88 e3       	ldi	r24, 0x38	; 56
    19ea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_sendCommand>

#endif
    // Turn off the cursor.
    LCD_sendCommand(LCD_CURSOR_OFF);
    19ee:	8c e0       	ldi	r24, 0x0C	; 12
    19f0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_sendCommand>

    // Clear the screen.
    LCD_sendCommand(LCD_CLEAR_COMMAND);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_sendCommand>
}
    19fa:	2e 96       	adiw	r28, 0x0e	; 14
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	e9 97       	sbiw	r28, 0x39	; 57
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	89 af       	std	Y+57, r24	; 0x39
    // Send a command to the LCD.

    // Set RS pin to low to indicate a command.
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	64 e0       	ldi	r22, 0x04	; 4
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e8       	ldi	r26, 0x80	; 128
    1a32:	bf e3       	ldi	r27, 0x3F	; 63
    1a34:	8d ab       	std	Y+53, r24	; 0x35
    1a36:	9e ab       	std	Y+54, r25	; 0x36
    1a38:	af ab       	std	Y+55, r26	; 0x37
    1a3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a40:	8f a9       	ldd	r24, Y+55	; 0x37
    1a42:	98 ad       	ldd	r25, Y+56	; 0x38
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a ef       	ldi	r20, 0xFA	; 250
    1a4a:	54 e4       	ldi	r21, 0x44	; 68
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	89 ab       	std	Y+49, r24	; 0x31
    1a56:	9a ab       	std	Y+50, r25	; 0x32
    1a58:	ab ab       	std	Y+51, r26	; 0x33
    1a5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a60:	8b a9       	ldd	r24, Y+51	; 0x33
    1a62:	9c a9       	ldd	r25, Y+52	; 0x34
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_sendCommand+0x72>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	98 ab       	std	Y+48, r25	; 0x30
    1a7a:	8f a7       	std	Y+47, r24	; 0x2f
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a80:	7a a9       	ldd	r23, Y+50	; 0x32
    1a82:	8b a9       	ldd	r24, Y+51	; 0x33
    1a84:	9c a9       	ldd	r25, Y+52	; 0x34
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	6d a9       	ldd	r22, Y+53	; 0x35
    1a98:	7e a9       	ldd	r23, Y+54	; 0x36
    1a9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	98 ab       	std	Y+48, r25	; 0x30
    1abc:	8f a7       	std	Y+47, r24	; 0x2f
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_sendCommand+0xd2>
    1ac0:	88 ec       	ldi	r24, 0xC8	; 200
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e a7       	std	Y+46, r25	; 0x2e
    1ac6:	8d a7       	std	Y+45, r24	; 0x2d
    1ac8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aca:	9e a5       	ldd	r25, Y+46	; 0x2e
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_sendCommand+0xc0>
    1ad0:	9e a7       	std	Y+46, r25	; 0x2e
    1ad2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	98 ab       	std	Y+48, r25	; 0x30
    1adc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_sendCommand+0xb4>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aea:	7a a9       	ldd	r23, Y+50	; 0x32
    1aec:	8b a9       	ldd	r24, Y+51	; 0x33
    1aee:	9c a9       	ldd	r25, Y+52	; 0x34
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	98 ab       	std	Y+48, r25	; 0x30
    1afa:	8f a7       	std	Y+47, r24	; 0x2f
    1afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1afe:	98 a9       	ldd	r25, Y+48	; 0x30
    1b00:	9c a7       	std	Y+44, r25	; 0x2c
    1b02:	8b a7       	std	Y+43, r24	; 0x2b
    1b04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_sendCommand+0xfc>
    1b0c:	9c a7       	std	Y+44, r25	; 0x2c
    1b0e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);

    // Set E pin to high to enable the LCD.
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	65 e0       	ldi	r22, 0x05	; 5
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e8       	ldi	r26, 0x80	; 128
    1b20:	bf e3       	ldi	r27, 0x3F	; 63
    1b22:	8f a3       	std	Y+39, r24	; 0x27
    1b24:	98 a7       	std	Y+40, r25	; 0x28
    1b26:	a9 a7       	std	Y+41, r26	; 0x29
    1b28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a ef       	ldi	r20, 0xFA	; 250
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8b a3       	std	Y+35, r24	; 0x23
    1b44:	9c a3       	std	Y+36, r25	; 0x24
    1b46:	ad a3       	std	Y+37, r26	; 0x25
    1b48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b50:	9e a1       	ldd	r25, Y+38	; 0x26
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <LCD_sendCommand+0x160>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b70:	8d a1       	ldd	r24, Y+37	; 0x25
    1b72:	9e a1       	ldd	r25, Y+38	; 0x26
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6f a1       	ldd	r22, Y+39	; 0x27
    1b86:	78 a5       	ldd	r23, Y+40	; 0x28
    1b88:	89 a5       	ldd	r24, Y+41	; 0x29
    1b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9a a3       	std	Y+34, r25	; 0x22
    1baa:	89 a3       	std	Y+33, r24	; 0x21
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_sendCommand+0x1c0>
    1bae:	88 ec       	ldi	r24, 0xC8	; 200
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	98 a3       	std	Y+32, r25	; 0x20
    1bb4:	8f 8f       	std	Y+31, r24	; 0x1f
    1bb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bb8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_sendCommand+0x1ae>
    1bbe:	98 a3       	std	Y+32, r25	; 0x20
    1bc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9a a3       	std	Y+34, r25	; 0x22
    1bca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bce:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_sendCommand+0x1a2>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bda:	8d a1       	ldd	r24, Y+37	; 0x25
    1bdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9a a3       	std	Y+34, r25	; 0x22
    1be8:	89 a3       	std	Y+33, r24	; 0x21
    1bea:	89 a1       	ldd	r24, Y+33	; 0x21
    1bec:	9a a1       	ldd	r25, Y+34	; 0x22
    1bee:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf0:	8d 8f       	std	Y+29, r24	; 0x1d
    1bf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_sendCommand+0x1ea>
    1bfa:	9e 8f       	std	Y+30, r25	; 0x1e
    1bfc:	8d 8f       	std	Y+29, r24	; 0x1d

#if (LCD_DATA_BITS_MODE == 8)
    // If using 8-bit data mode, send the entire byte as a command.

    // Send the entire command byte to the data port.
    GPIO_writePort(LCD_DATA_PORT_ID, command);
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	69 ad       	ldd	r22, Y+57	; 0x39
    1c02:	0e 94 35 09 	call	0x126a	; 0x126a <GPIO_writePort>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e8       	ldi	r26, 0x80	; 128
    1c0c:	bf e3       	ldi	r27, 0x3F	; 63
    1c0e:	89 8f       	std	Y+25, r24	; 0x19
    1c10:	9a 8f       	std	Y+26, r25	; 0x1a
    1c12:	ab 8f       	std	Y+27, r26	; 0x1b
    1c14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c16:	69 8d       	ldd	r22, Y+25	; 0x19
    1c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4a ef       	ldi	r20, 0xFA	; 250
    1c24:	54 e4       	ldi	r21, 0x44	; 68
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8d 8b       	std	Y+21, r24	; 0x15
    1c30:	9e 8b       	std	Y+22, r25	; 0x16
    1c32:	af 8b       	std	Y+23, r26	; 0x17
    1c34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c36:	6d 89       	ldd	r22, Y+21	; 0x15
    1c38:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 8b       	std	Y+20, r25	; 0x14
    1c54:	8b 8b       	std	Y+19, r24	; 0x13
    1c56:	3f c0       	rjmp	.+126    	; 0x1cd6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1c58:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	4f e7       	ldi	r20, 0x7F	; 127
    1c66:	57 e4       	ldi	r21, 0x47	; 71
    1c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6c:	18 16       	cp	r1, r24
    1c6e:	4c f5       	brge	.+82     	; 0x1cc2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c70:	69 8d       	ldd	r22, Y+25	; 0x19
    1c72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e2       	ldi	r20, 0x20	; 32
    1c7e:	51 e4       	ldi	r21, 0x41	; 65
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9c 8b       	std	Y+20, r25	; 0x14
    1c96:	8b 8b       	std	Y+19, r24	; 0x13
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <LCD_sendCommand+0x2ac>
    1c9a:	88 ec       	ldi	r24, 0xC8	; 200
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ca0:	89 8b       	std	Y+17, r24	; 0x11
    1ca2:	89 89       	ldd	r24, Y+17	; 0x11
    1ca4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_sendCommand+0x29a>
    1caa:	9a 8b       	std	Y+18, r25	; 0x12
    1cac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cae:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	9c 8b       	std	Y+20, r25	; 0x14
    1cb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	69 f7       	brne	.-38     	; 0x1c9a <LCD_sendCommand+0x28e>
    1cc0:	14 c0       	rjmp	.+40     	; 0x1cea <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
    1cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cda:	98 8b       	std	Y+16, r25	; 0x10
    1cdc:	8f 87       	std	Y+15, r24	; 0x0f
    1cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce0:	98 89       	ldd	r25, Y+16	; 0x10
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <LCD_sendCommand+0x2d6>
    1ce6:	98 8b       	std	Y+16, r25	; 0x10
    1ce8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);

    // Clear the E pin to disable the LCD.
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	65 e0       	ldi	r22, 0x05	; 5
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e8       	ldi	r26, 0x80	; 128
    1cfa:	bf e3       	ldi	r27, 0x3F	; 63
    1cfc:	8b 87       	std	Y+11, r24	; 0x0b
    1cfe:	9c 87       	std	Y+12, r25	; 0x0c
    1d00:	ad 87       	std	Y+13, r26	; 0x0d
    1d02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a ef       	ldi	r20, 0xFA	; 250
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8f 83       	std	Y+7, r24	; 0x07
    1d1e:	98 87       	std	Y+8, r25	; 0x08
    1d20:	a9 87       	std	Y+9, r26	; 0x09
    1d22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <LCD_sendCommand+0x39a>
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 83       	std	Y+4, r25	; 0x04
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_sendCommand+0x388>
    1d98:	9c 83       	std	Y+4, r25	; 0x04
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <LCD_sendCommand+0x37c>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	6f 81       	ldd	r22, Y+7	; 0x07
    1db2:	78 85       	ldd	r23, Y+8	; 0x08
    1db4:	89 85       	ldd	r24, Y+9	; 0x09
    1db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_sendCommand+0x3c4>
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

#endif
}
    1dd8:	e9 96       	adiw	r28, 0x39	; 57
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	e9 97       	sbiw	r28, 0x39	; 57
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	89 af       	std	Y+57, r24	; 0x39
    // Display a character on the LCD.

    // Set RS pin to high to indicate data (character).
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e8       	ldi	r26, 0x80	; 128
    1e10:	bf e3       	ldi	r27, 0x3F	; 63
    1e12:	8d ab       	std	Y+53, r24	; 0x35
    1e14:	9e ab       	std	Y+54, r25	; 0x36
    1e16:	af ab       	std	Y+55, r26	; 0x37
    1e18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e20:	98 ad       	ldd	r25, Y+56	; 0x38
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a ef       	ldi	r20, 0xFA	; 250
    1e28:	54 e4       	ldi	r21, 0x44	; 68
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	89 ab       	std	Y+49, r24	; 0x31
    1e34:	9a ab       	std	Y+50, r25	; 0x32
    1e36:	ab ab       	std	Y+51, r26	; 0x33
    1e38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e40:	9c a9       	ldd	r25, Y+52	; 0x34
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <LCD_displayCharacter+0x72>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	98 ab       	std	Y+48, r25	; 0x30
    1e58:	8f a7       	std	Y+47, r24	; 0x2f
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e60:	8b a9       	ldd	r24, Y+51	; 0x33
    1e62:	9c a9       	ldd	r25, Y+52	; 0x34
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	6d a9       	ldd	r22, Y+53	; 0x35
    1e76:	7e a9       	ldd	r23, Y+54	; 0x36
    1e78:	8f a9       	ldd	r24, Y+55	; 0x37
    1e7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	98 ab       	std	Y+48, r25	; 0x30
    1e9a:	8f a7       	std	Y+47, r24	; 0x2f
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <LCD_displayCharacter+0xd2>
    1e9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e a7       	std	Y+46, r25	; 0x2e
    1ea4:	8d a7       	std	Y+45, r24	; 0x2d
    1ea6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_displayCharacter+0xc0>
    1eae:	9e a7       	std	Y+46, r25	; 0x2e
    1eb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	98 ab       	std	Y+48, r25	; 0x30
    1eba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <LCD_displayCharacter+0xb4>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	9c a7       	std	Y+44, r25	; 0x2c
    1ee0:	8b a7       	std	Y+43, r24	; 0x2b
    1ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_displayCharacter+0xfc>
    1eea:	9c a7       	std	Y+44, r25	; 0x2c
    1eec:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);

    // Set E pin to high to enable the LCD.
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	65 e0       	ldi	r22, 0x05	; 5
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e8       	ldi	r26, 0x80	; 128
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	8f a3       	std	Y+39, r24	; 0x27
    1f02:	98 a7       	std	Y+40, r25	; 0x28
    1f04:	a9 a7       	std	Y+41, r26	; 0x29
    1f06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a ef       	ldi	r20, 0xFA	; 250
    1f16:	54 e4       	ldi	r21, 0x44	; 68
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8b a3       	std	Y+35, r24	; 0x23
    1f22:	9c a3       	std	Y+36, r25	; 0x24
    1f24:	ad a3       	std	Y+37, r26	; 0x25
    1f26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f28:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <LCD_displayCharacter+0x160>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9a a3       	std	Y+34, r25	; 0x22
    1f46:	89 a3       	std	Y+33, r24	; 0x21
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f50:	9e a1       	ldd	r25, Y+38	; 0x26
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6f a1       	ldd	r22, Y+39	; 0x27
    1f64:	78 a5       	ldd	r23, Y+40	; 0x28
    1f66:	89 a5       	ldd	r24, Y+41	; 0x29
    1f68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9a a3       	std	Y+34, r25	; 0x22
    1f88:	89 a3       	std	Y+33, r24	; 0x21
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_displayCharacter+0x1c0>
    1f8c:	88 ec       	ldi	r24, 0xC8	; 200
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	98 a3       	std	Y+32, r25	; 0x20
    1f92:	8f 8f       	std	Y+31, r24	; 0x1f
    1f94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f96:	98 a1       	ldd	r25, Y+32	; 0x20
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_displayCharacter+0x1ae>
    1f9c:	98 a3       	std	Y+32, r25	; 0x20
    1f9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9a a3       	std	Y+34, r25	; 0x22
    1fa8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	89 a1       	ldd	r24, Y+33	; 0x21
    1fac:	9a a1       	ldd	r25, Y+34	; 0x22
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <LCD_displayCharacter+0x1a2>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fba:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9a a3       	std	Y+34, r25	; 0x22
    1fc6:	89 a3       	std	Y+33, r24	; 0x21
    1fc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fca:	9a a1       	ldd	r25, Y+34	; 0x22
    1fcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fce:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_displayCharacter+0x1ea>
    1fd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fda:	8d 8f       	std	Y+29, r24	; 0x1d

#if (LCD_DATA_BITS_MODE == 8)
    // If using 8-bit data mode, send the entire character byte as data.

    // Send the entire character byte to the data port.
    GPIO_writePort(LCD_DATA_PORT_ID, character);
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	69 ad       	ldd	r22, Y+57	; 0x39
    1fe0:	0e 94 35 09 	call	0x126a	; 0x126a <GPIO_writePort>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e8       	ldi	r26, 0x80	; 128
    1fea:	bf e3       	ldi	r27, 0x3F	; 63
    1fec:	89 8f       	std	Y+25, r24	; 0x19
    1fee:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8d 8b       	std	Y+21, r24	; 0x15
    200e:	9e 8b       	std	Y+22, r25	; 0x16
    2010:	af 8b       	std	Y+23, r26	; 0x17
    2012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9c 8b       	std	Y+20, r25	; 0x14
    2032:	8b 8b       	std	Y+19, r24	; 0x13
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2036:	6d 89       	ldd	r22, Y+21	; 0x15
    2038:	7e 89       	ldd	r23, Y+22	; 0x16
    203a:	8f 89       	ldd	r24, Y+23	; 0x17
    203c:	98 8d       	ldd	r25, Y+24	; 0x18
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	69 8d       	ldd	r22, Y+25	; 0x19
    2050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <LCD_displayCharacter+0x2ac>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9a 8b       	std	Y+18, r25	; 0x12
    207e:	89 8b       	std	Y+17, r24	; 0x11
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	9a 89       	ldd	r25, Y+18	; 0x12
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_displayCharacter+0x29a>
    2088:	9a 8b       	std	Y+18, r25	; 0x12
    208a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <LCD_displayCharacter+0x28e>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6d 89       	ldd	r22, Y+21	; 0x15
    20a2:	7e 89       	ldd	r23, Y+22	; 0x16
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	98 8b       	std	Y+16, r25	; 0x10
    20ba:	8f 87       	std	Y+15, r24	; 0x0f
    20bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20be:	98 89       	ldd	r25, Y+16	; 0x10
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_displayCharacter+0x2d6>
    20c4:	98 8b       	std	Y+16, r25	; 0x10
    20c6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);

    // Clear the E pin to disable the LCD.
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	65 e0       	ldi	r22, 0x05	; 5
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 6a 07 	call	0xed4	; 0xed4 <GPIO_writePin>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e8       	ldi	r26, 0x80	; 128
    20d8:	bf e3       	ldi	r27, 0x3F	; 63
    20da:	8b 87       	std	Y+11, r24	; 0x0b
    20dc:	9c 87       	std	Y+12, r25	; 0x0c
    20de:	ad 87       	std	Y+13, r26	; 0x0d
    20e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8f 83       	std	Y+7, r24	; 0x07
    20fc:	98 87       	std	Y+8, r25	; 0x08
    20fe:	a9 87       	std	Y+9, r26	; 0x09
    2100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <LCD_displayCharacter+0x39a>
    2166:	88 ec       	ldi	r24, 0xC8	; 200
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9c 83       	std	Y+4, r25	; 0x04
    216c:	8b 83       	std	Y+3, r24	; 0x03
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_displayCharacter+0x388>
    2176:	9c 83       	std	Y+4, r25	; 0x04
    2178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <LCD_displayCharacter+0x37c>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_displayCharacter+0x3c4>
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

#endif
}
    21b6:	e9 96       	adiw	r28, 0x39	; 57
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <LCD_dispalyString>:

void LCD_dispalyString(const char *str){
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <LCD_dispalyString+0x6>
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	0b c0       	rjmp	.+22     	; 0x21ee <LCD_dispalyString+0x26>
    // Display a string on the LCD.

    while (*str != '\0') {
        // Iterate through each character in the string and display it.
        LCD_displayCharacter(*str++);
    21d8:	e9 81       	ldd	r30, Y+1	; 0x01
    21da:	fa 81       	ldd	r31, Y+2	; 0x02
    21dc:	20 81       	ld	r18, Z
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	82 2f       	mov	r24, r18
    21ea:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_displayCharacter>
}

void LCD_dispalyString(const char *str){
    // Display a string on the LCD.

    while (*str != '\0') {
    21ee:	e9 81       	ldd	r30, Y+1	; 0x01
    21f0:	fa 81       	ldd	r31, Y+2	; 0x02
    21f2:	80 81       	ld	r24, Z
    21f4:	88 23       	and	r24, r24
    21f6:	81 f7       	brne	.-32     	; 0x21d8 <LCD_dispalyString+0x10>
        // Iterate through each character in the string and display it.
        LCD_displayCharacter(*str++);
    }
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 column){
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <LCD_moveCursor+0x6>
    2208:	00 d0       	rcall	.+0      	; 0x220a <LCD_moveCursor+0x8>
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	8a 83       	std	Y+2, r24	; 0x02
    2212:	6b 83       	std	Y+3, r22	; 0x03
    // Move the cursor to a specific row and column on the LCD.

    uint8 LCD_CursorPosition = 0;
    2214:	19 82       	std	Y+1, r1	; 0x01

    // Calculate the cursor position based on the row and column.
    switch (row) {
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	3d 83       	std	Y+5, r19	; 0x05
    221e:	2c 83       	std	Y+4, r18	; 0x04
    2220:	8c 81       	ldd	r24, Y+4	; 0x04
    2222:	9d 81       	ldd	r25, Y+5	; 0x05
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	91 05       	cpc	r25, r1
    2228:	c1 f0       	breq	.+48     	; 0x225a <LCD_moveCursor+0x58>
    222a:	2c 81       	ldd	r18, Y+4	; 0x04
    222c:	3d 81       	ldd	r19, Y+5	; 0x05
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	2c f4       	brge	.+10     	; 0x223e <LCD_moveCursor+0x3c>
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	9d 81       	ldd	r25, Y+5	; 0x05
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	61 f0       	breq	.+24     	; 0x2254 <LCD_moveCursor+0x52>
    223c:	19 c0       	rjmp	.+50     	; 0x2270 <LCD_moveCursor+0x6e>
    223e:	2c 81       	ldd	r18, Y+4	; 0x04
    2240:	3d 81       	ldd	r19, Y+5	; 0x05
    2242:	22 30       	cpi	r18, 0x02	; 2
    2244:	31 05       	cpc	r19, r1
    2246:	69 f0       	breq	.+26     	; 0x2262 <LCD_moveCursor+0x60>
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	9d 81       	ldd	r25, Y+5	; 0x05
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	91 05       	cpc	r25, r1
    2250:	61 f0       	breq	.+24     	; 0x226a <LCD_moveCursor+0x68>
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <LCD_moveCursor+0x6e>
        case 0:
            LCD_CursorPosition = column + (0x00);
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	0b c0       	rjmp	.+22     	; 0x2270 <LCD_moveCursor+0x6e>
            break;
        case 1:
            LCD_CursorPosition = column + (0x40);
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	80 5c       	subi	r24, 0xC0	; 192
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	07 c0       	rjmp	.+14     	; 0x2270 <LCD_moveCursor+0x6e>
            break;
        case 2:
            LCD_CursorPosition = column + (0x10);
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	80 5f       	subi	r24, 0xF0	; 240
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <LCD_moveCursor+0x6e>
            break;
        case 3:
            LCD_CursorPosition = column + (0x50);
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	80 5b       	subi	r24, 0xB0	; 176
    226e:	89 83       	std	Y+1, r24	; 0x01
            break;
    }

    // Send the command to set the cursor position.
    LCD_sendCommand(LCD_CursorPosition | 0x80);
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	80 68       	ori	r24, 0x80	; 128
    2274:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_sendCommand>
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *str){
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <LCD_displayStringRowColumn+0x6>
    228e:	00 d0       	rcall	.+0      	; 0x2290 <LCD_displayStringRowColumn+0x8>
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	6a 83       	std	Y+2, r22	; 0x02
    2298:	5c 83       	std	Y+4, r21	; 0x04
    229a:	4b 83       	std	Y+3, r20	; 0x03
    // Display a string at a specific row and column on the LCD.
    LCD_moveCursor(row, col);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	6a 81       	ldd	r22, Y+2	; 0x02
    22a0:	0e 94 01 11 	call	0x2202	; 0x2202 <LCD_moveCursor>
    LCD_dispalyString(str);
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_dispalyString>
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <LCD_clearScreen>:

void LCD_clearScreen(void){
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    // Clear the entire LCD screen.
    LCD_sendCommand(LCD_CLEAR_COMMAND);
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_sendCommand>
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LCD_intgerToString>:

void LCD_intgerToString(int data){
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	62 97       	sbiw	r28, 0x12	; 18
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	9a 8b       	std	Y+18, r25	; 0x12
    22e4:	89 8b       	std	Y+17, r24	; 0x11
    // Convert an integer to a string and display it on the LCD.
    char buff[16];
    itoa(data, buff, 10);
    22e6:	89 89       	ldd	r24, Y+17	; 0x11
    22e8:	9a 89       	ldd	r25, Y+18	; 0x12
    22ea:	9e 01       	movw	r18, r28
    22ec:	2f 5f       	subi	r18, 0xFF	; 255
    22ee:	3f 4f       	sbci	r19, 0xFF	; 255
    22f0:	b9 01       	movw	r22, r18
    22f2:	4a e0       	ldi	r20, 0x0A	; 10
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <itoa>
    LCD_dispalyString(buff);
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_dispalyString>
}
    2302:	62 96       	adiw	r28, 0x12	; 18
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <OpenDoor_Flag>:
uint8 stayhere = 0;
uint8 counter = 0;

// Function to indicate that the door should open
void OpenDoor_Flag(void)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	doorOpenCounter++;
    231c:	80 91 63 01 	lds	r24, 0x0163
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	80 93 63 01 	sts	0x0163, r24
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <CheckPassword>:
void CheckPassword (void)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	6e 97       	sbiw	r28, 0x1e	; 30
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2340:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz Enter Pass:");
    2344:	20 e6       	ldi	r18, 0x60	; 96
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	a9 01       	movw	r20, r18
    234e:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>

	LCD_moveCursor(1,0);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	0e 94 01 11 	call	0x2202	; 0x2202 <LCD_moveCursor>

	for (uint8 i = 0; i < 5; i++)
    235a:	1e 8e       	std	Y+30, r1	; 0x1e
    235c:	08 c1       	rjmp	.+528    	; 0x256e <CheckPassword+0x242>
	{

		key = KEYPAD_getPressedKey();
    235e:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    2362:	80 93 61 01 	sts	0x0161, r24
    2366:	76 c0       	rjmp	.+236    	; 0x2454 <CheckPassword+0x128>

		while (!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    2368:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    236c:	80 93 61 01 	sts	0x0161, r24
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a8 e4       	ldi	r26, 0x48	; 72
    2376:	b2 e4       	ldi	r27, 0x42	; 66
    2378:	89 8f       	std	Y+25, r24	; 0x19
    237a:	9a 8f       	std	Y+26, r25	; 0x1a
    237c:	ab 8f       	std	Y+27, r26	; 0x1b
    237e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	69 8d       	ldd	r22, Y+25	; 0x19
    2382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a ef       	ldi	r20, 0xFA	; 250
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8d 8b       	std	Y+21, r24	; 0x15
    239a:	9e 8b       	std	Y+22, r25	; 0x16
    239c:	af 8b       	std	Y+23, r26	; 0x17
    239e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23a0:	6d 89       	ldd	r22, Y+21	; 0x15
    23a2:	7e 89       	ldd	r23, Y+22	; 0x16
    23a4:	8f 89       	ldd	r24, Y+23	; 0x17
    23a6:	98 8d       	ldd	r25, Y+24	; 0x18
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <CheckPassword+0x96>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	8b 8b       	std	Y+19, r24	; 0x13
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <CheckPassword+0x114>
	else if (__tmp > 65535)
    23c2:	6d 89       	ldd	r22, Y+21	; 0x15
    23c4:	7e 89       	ldd	r23, Y+22	; 0x16
    23c6:	8f 89       	ldd	r24, Y+23	; 0x17
    23c8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <CheckPassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	69 8d       	ldd	r22, Y+25	; 0x19
    23dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9c 8b       	std	Y+20, r25	; 0x14
    2400:	8b 8b       	std	Y+19, r24	; 0x13
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <CheckPassword+0xf6>
    2404:	88 ec       	ldi	r24, 0xC8	; 200
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9a 8b       	std	Y+18, r25	; 0x12
    240a:	89 8b       	std	Y+17, r24	; 0x11
    240c:	89 89       	ldd	r24, Y+17	; 0x11
    240e:	9a 89       	ldd	r25, Y+18	; 0x12
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <CheckPassword+0xe4>
    2414:	9a 8b       	std	Y+18, r25	; 0x12
    2416:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8b 89       	ldd	r24, Y+19	; 0x13
    241a:	9c 89       	ldd	r25, Y+20	; 0x14
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <CheckPassword+0xd8>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <CheckPassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	6d 89       	ldd	r22, Y+21	; 0x15
    242e:	7e 89       	ldd	r23, Y+22	; 0x16
    2430:	8f 89       	ldd	r24, Y+23	; 0x17
    2432:	98 8d       	ldd	r25, Y+24	; 0x18
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	98 8b       	std	Y+16, r25	; 0x10
    2446:	8f 87       	std	Y+15, r24	; 0x0f
    2448:	8f 85       	ldd	r24, Y+15	; 0x0f
    244a:	98 89       	ldd	r25, Y+16	; 0x10
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <CheckPassword+0x120>
    2450:	98 8b       	std	Y+16, r25	; 0x10
    2452:	8f 87       	std	Y+15, r24	; 0x0f
	for (uint8 i = 0; i < 5; i++)
	{

		key = KEYPAD_getPressedKey();

		while (!((key >= 0) && (key <= 9)))
    2454:	80 91 61 01 	lds	r24, 0x0161
    2458:	8a 30       	cpi	r24, 0x0A	; 10
    245a:	08 f0       	brcs	.+2      	; 0x245e <CheckPassword+0x132>
    245c:	85 cf       	rjmp	.-246    	; 0x2368 <CheckPassword+0x3c>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		passcheck[i]=key;
    245e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	20 91 61 01 	lds	r18, 0x0161
    2468:	fc 01       	movw	r30, r24
    246a:	e4 5a       	subi	r30, 0xA4	; 164
    246c:	fe 4f       	sbci	r31, 0xFE	; 254
    246e:	20 83       	st	Z, r18
		LCD_displayStringRowColumn(1,i+5,"*");
    2470:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2472:	98 2f       	mov	r25, r24
    2474:	9b 5f       	subi	r25, 0xFB	; 251
    2476:	20 e7       	ldi	r18, 0x70	; 112
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	69 2f       	mov	r22, r25
    247e:	a9 01       	movw	r20, r18
    2480:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	aa e7       	ldi	r26, 0x7A	; 122
    248a:	b3 e4       	ldi	r27, 0x43	; 67
    248c:	8b 87       	std	Y+11, r24	; 0x0b
    248e:	9c 87       	std	Y+12, r25	; 0x0c
    2490:	ad 87       	std	Y+13, r26	; 0x0d
    2492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	6b 85       	ldd	r22, Y+11	; 0x0b
    2496:	7c 85       	ldd	r23, Y+12	; 0x0c
    2498:	8d 85       	ldd	r24, Y+13	; 0x0d
    249a:	9e 85       	ldd	r25, Y+14	; 0x0e
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8f 83       	std	Y+7, r24	; 0x07
    24ae:	98 87       	std	Y+8, r25	; 0x08
    24b0:	a9 87       	std	Y+9, r26	; 0x09
    24b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <CheckPassword+0x1aa>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <CheckPassword+0x228>
	else if (__tmp > 65535)
    24d6:	6f 81       	ldd	r22, Y+7	; 0x07
    24d8:	78 85       	ldd	r23, Y+8	; 0x08
    24da:	89 85       	ldd	r24, Y+9	; 0x09
    24dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <CheckPassword+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <CheckPassword+0x20a>
    2518:	88 ec       	ldi	r24, 0xC8	; 200
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <CheckPassword+0x1f8>
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9e 83       	std	Y+6, r25	; 0x06
    2534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <CheckPassword+0x1ec>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <CheckPassword+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <CheckPassword+0x234>
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz Enter Pass:");

	LCD_moveCursor(1,0);

	for (uint8 i = 0; i < 5; i++)
    2568:	8e 8d       	ldd	r24, Y+30	; 0x1e
    256a:	8f 5f       	subi	r24, 0xFF	; 255
    256c:	8e 8f       	std	Y+30, r24	; 0x1e
    256e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2570:	85 30       	cpi	r24, 0x05	; 5
    2572:	08 f4       	brcc	.+2      	; 0x2576 <CheckPassword+0x24a>
    2574:	f4 ce       	rjmp	.-536    	; 0x235e <CheckPassword+0x32>
		LCD_displayStringRowColumn(1,i+5,"*");
		_delay_ms(250);

	}

	UART_sendByte(ReadyForPassCheckPassword);
    2576:	81 e2       	ldi	r24, 0x21	; 33
    2578:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
	while(UART_recieveByte() != M2_READY);
    257c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2580:	81 31       	cpi	r24, 0x11	; 17
    2582:	e1 f7       	brne	.-8      	; 0x257c <CheckPassword+0x250>

	for(uint8 k = 0 ; k <= 4 ; k++)
    2584:	1d 8e       	std	Y+29, r1	; 0x1d
    2586:	0c c0       	rjmp	.+24     	; 0x25a0 <CheckPassword+0x274>
	{
		UART_sendByte(passcheck[k]);
    2588:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	fc 01       	movw	r30, r24
    2590:	e4 5a       	subi	r30, 0xA4	; 164
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	80 81       	ld	r24, Z
    2596:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
	}

	UART_sendByte(ReadyForPassCheckPassword);
	while(UART_recieveByte() != M2_READY);

	for(uint8 k = 0 ; k <= 4 ; k++)
    259a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	8d 8f       	std	Y+29, r24	; 0x1d
    25a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a2:	85 30       	cpi	r24, 0x05	; 5
    25a4:	88 f3       	brcs	.-30     	; 0x2588 <CheckPassword+0x25c>
	{
		UART_sendByte(passcheck[k]);
	}

	while (UART_recieveByte() != WAIT);
    25a6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    25aa:	86 31       	cpi	r24, 0x16	; 22
    25ac:	e1 f7       	brne	.-8      	; 0x25a6 <CheckPassword+0x27a>

}
    25ae:	6e 96       	adiw	r28, 0x1e	; 30
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <DetermineAccess2>:
uint8 DetermineAccess2(void){
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	2f 97       	sbiw	r28, 0x0f	; 15
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
	if(UART_recieveByte() == Matched)
    25d4:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    25d8:	85 32       	cpi	r24, 0x25	; 37
    25da:	19 f4       	brne	.+6      	; 0x25e2 <DetermineAccess2+0x22>
	{

		return 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	8f 87       	std	Y+15, r24	; 0x0f
    25e0:	7c c0       	rjmp	.+248    	; 0x26da <DetermineAccess2+0x11a>


	}
	else
	{
		LCD_clearScreen();
    25e2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"INCORRECT PASS");
    25e6:	22 e7       	ldi	r18, 0x72	; 114
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	a9 01       	movw	r20, r18
    25f0:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	aa ef       	ldi	r26, 0xFA	; 250
    25fa:	b3 e4       	ldi	r27, 0x43	; 67
    25fc:	8b 87       	std	Y+11, r24	; 0x0b
    25fe:	9c 87       	std	Y+12, r25	; 0x0c
    2600:	ad 87       	std	Y+13, r26	; 0x0d
    2602:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a ef       	ldi	r20, 0xFA	; 250
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8f 83       	std	Y+7, r24	; 0x07
    261e:	98 87       	std	Y+8, r25	; 0x08
    2620:	a9 87       	std	Y+9, r26	; 0x09
    2622:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <DetermineAccess2+0x86>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <DetermineAccess2+0x104>
	else if (__tmp > 65535)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <DetermineAccess2+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <DetermineAccess2+0xe6>
    2688:	88 ec       	ldi	r24, 0xC8	; 200
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <DetermineAccess2+0xd4>
    2698:	9c 83       	std	Y+4, r25	; 0x04
    269a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <DetermineAccess2+0xc8>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <DetermineAccess2+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <DetermineAccess2+0x110>
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		return 0;
    26d8:	1f 86       	std	Y+15, r1	; 0x0f
    26da:	8f 85       	ldd	r24, Y+15	; 0x0f

	}
}
    26dc:	2f 96       	adiw	r28, 0x0f	; 15
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <Open_Door>:
void Open_Door(const Timer1_ConfigType * Config_Ptr)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <Open_Door+0x6>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(doorReady);
    26fc:	82 e2       	ldi	r24, 0x22	; 34
    26fe:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>

	LCD_clearScreen();
    2702:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	Timer1_init(Config_Ptr);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
	doorOpenCounter =0;
    270e:	10 92 63 01 	sts	0x0163, r1
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <Open_Door+0x34>
	while(doorOpenCounter != 3)
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
    2714:	21 e8       	ldi	r18, 0x81	; 129
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	a9 01       	movw	r20, r18
    271e:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
	UART_sendByte(doorReady);

	LCD_clearScreen();
	Timer1_init(Config_Ptr);
	doorOpenCounter =0;
	while(doorOpenCounter != 3)
    2722:	80 91 63 01 	lds	r24, 0x0163
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	a9 f7       	brne	.-22     	; 0x2714 <Open_Door+0x26>
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
	}

	LCD_clearScreen();
    272a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	doorOpenCounter =0;
    272e:	10 92 63 01 	sts	0x0163, r1
    2732:	07 c0       	rjmp	.+14     	; 0x2742 <Open_Door+0x54>

	while(doorOpenCounter != 3)
	{
		LCD_displayStringRowColumn(0,0,"Door Opened");
    2734:	20 e9       	ldi	r18, 0x90	; 144
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	a9 01       	movw	r20, r18
    273e:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
	}

	LCD_clearScreen();
	doorOpenCounter =0;

	while(doorOpenCounter != 3)
    2742:	80 91 63 01 	lds	r24, 0x0163
    2746:	83 30       	cpi	r24, 0x03	; 3
    2748:	a9 f7       	brne	.-22     	; 0x2734 <Open_Door+0x46>
	{
		LCD_displayStringRowColumn(0,0,"Door Opened");
	}

	LCD_clearScreen();
    274a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	doorOpenCounter =0;
    274e:	10 92 63 01 	sts	0x0163, r1
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <Open_Door+0x74>

	while(doorOpenCounter!= 3)
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
    2754:	2c e9       	ldi	r18, 0x9C	; 156
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	a9 01       	movw	r20, r18
    275e:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
	}

	LCD_clearScreen();
	doorOpenCounter =0;

	while(doorOpenCounter!= 3)
    2762:	80 91 63 01 	lds	r24, 0x0163
    2766:	83 30       	cpi	r24, 0x03	; 3
    2768:	a9 f7       	brne	.-22     	; 0x2754 <Open_Door+0x66>
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
	}
}
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <ManageSecurityOptions>:
void ManageSecurityOptions(const Timer1_ConfigType * Config_Ptr){
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	af 97       	sbiw	r28, 0x2f	; 47
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	9f a7       	std	Y+47, r25	; 0x2f
    278a:	8e a7       	std	Y+46, r24	; 0x2e
    278c:	16 c2       	rjmp	.+1068   	; 0x2bba <ManageSecurityOptions+0x446>
	while(stayhere == 0){
		LCD_clearScreen();
    278e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    2792:	2b ea       	ldi	r18, 0xAB	; 171
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	a9 01       	movw	r20, r18
    279c:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    27a0:	29 eb       	ldi	r18, 0xB9	; 185
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	a9 01       	movw	r20, r18
    27aa:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
		key = KEYPAD_getPressedKey();
    27ae:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    27b2:	80 93 61 01 	sts	0x0161, r24
    27b6:	76 c0       	rjmp	.+236    	; 0x28a4 <ManageSecurityOptions+0x130>

		while (!((key == '+') || (key == '-')))
		{
			key = KEYPAD_getPressedKey();
    27b8:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    27bc:	80 93 61 01 	sts	0x0161, r24
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a8 e4       	ldi	r26, 0x48	; 72
    27c6:	b2 e4       	ldi	r27, 0x42	; 66
    27c8:	8f a3       	std	Y+39, r24	; 0x27
    27ca:	98 a7       	std	Y+40, r25	; 0x28
    27cc:	a9 a7       	std	Y+41, r26	; 0x29
    27ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6f a1       	ldd	r22, Y+39	; 0x27
    27d2:	78 a5       	ldd	r23, Y+40	; 0x28
    27d4:	89 a5       	ldd	r24, Y+41	; 0x29
    27d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8b a3       	std	Y+35, r24	; 0x23
    27ea:	9c a3       	std	Y+36, r25	; 0x24
    27ec:	ad a3       	std	Y+37, r26	; 0x25
    27ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27f0:	6b a1       	ldd	r22, Y+35	; 0x23
    27f2:	7c a1       	ldd	r23, Y+36	; 0x24
    27f4:	8d a1       	ldd	r24, Y+37	; 0x25
    27f6:	9e a1       	ldd	r25, Y+38	; 0x26
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <ManageSecurityOptions+0x9e>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9a a3       	std	Y+34, r25	; 0x22
    280e:	89 a3       	std	Y+33, r24	; 0x21
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <ManageSecurityOptions+0x11c>
	else if (__tmp > 65535)
    2812:	6b a1       	ldd	r22, Y+35	; 0x23
    2814:	7c a1       	ldd	r23, Y+36	; 0x24
    2816:	8d a1       	ldd	r24, Y+37	; 0x25
    2818:	9e a1       	ldd	r25, Y+38	; 0x26
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <ManageSecurityOptions+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6f a1       	ldd	r22, Y+39	; 0x27
    282c:	78 a5       	ldd	r23, Y+40	; 0x28
    282e:	89 a5       	ldd	r24, Y+41	; 0x29
    2830:	9a a5       	ldd	r25, Y+42	; 0x2a
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9a a3       	std	Y+34, r25	; 0x22
    2850:	89 a3       	std	Y+33, r24	; 0x21
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <ManageSecurityOptions+0xfe>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	98 a3       	std	Y+32, r25	; 0x20
    285a:	8f 8f       	std	Y+31, r24	; 0x1f
    285c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    285e:	98 a1       	ldd	r25, Y+32	; 0x20
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <ManageSecurityOptions+0xec>
    2864:	98 a3       	std	Y+32, r25	; 0x20
    2866:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	89 a1       	ldd	r24, Y+33	; 0x21
    286a:	9a a1       	ldd	r25, Y+34	; 0x22
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9a a3       	std	Y+34, r25	; 0x22
    2870:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	89 a1       	ldd	r24, Y+33	; 0x21
    2874:	9a a1       	ldd	r25, Y+34	; 0x22
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <ManageSecurityOptions+0xe0>
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <ManageSecurityOptions+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	6b a1       	ldd	r22, Y+35	; 0x23
    287e:	7c a1       	ldd	r23, Y+36	; 0x24
    2880:	8d a1       	ldd	r24, Y+37	; 0x25
    2882:	9e a1       	ldd	r25, Y+38	; 0x26
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9a a3       	std	Y+34, r25	; 0x22
    288e:	89 a3       	std	Y+33, r24	; 0x21
    2890:	89 a1       	ldd	r24, Y+33	; 0x21
    2892:	9a a1       	ldd	r25, Y+34	; 0x22
    2894:	9e 8f       	std	Y+30, r25	; 0x1e
    2896:	8d 8f       	std	Y+29, r24	; 0x1d
    2898:	8d 8d       	ldd	r24, Y+29	; 0x1d
    289a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <ManageSecurityOptions+0x128>
    28a0:	9e 8f       	std	Y+30, r25	; 0x1e
    28a2:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
		key = KEYPAD_getPressedKey();

		while (!((key == '+') || (key == '-')))
    28a4:	80 91 61 01 	lds	r24, 0x0161
    28a8:	8b 32       	cpi	r24, 0x2B	; 43
    28aa:	29 f0       	breq	.+10     	; 0x28b6 <ManageSecurityOptions+0x142>
    28ac:	80 91 61 01 	lds	r24, 0x0161
    28b0:	8d 32       	cpi	r24, 0x2D	; 45
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <ManageSecurityOptions+0x142>
    28b4:	81 cf       	rjmp	.-254    	; 0x27b8 <ManageSecurityOptions+0x44>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		if(key == '+')
    28b6:	80 91 61 01 	lds	r24, 0x0161
    28ba:	8b 32       	cpi	r24, 0x2B	; 43
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <ManageSecurityOptions+0x14c>
    28be:	ba c0       	rjmp	.+372    	; 0x2a34 <ManageSecurityOptions+0x2c0>
		{
			uint8 counter1 = 0;
    28c0:	1d a6       	std	Y+45, r1	; 0x2d
			CheckPassword();
    28c2:	0e 94 96 11 	call	0x232c	; 0x232c <CheckPassword>
			int x=DetermineAccess2();
    28c6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <DetermineAccess2>
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c a7       	std	Y+44, r25	; 0x2c
    28d0:	8b a7       	std	Y+43, r24	; 0x2b

			if(x == 1)
    28d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	91 05       	cpc	r25, r1
    28da:	09 f0       	breq	.+2      	; 0x28de <ManageSecurityOptions+0x16a>
    28dc:	a7 c0       	rjmp	.+334    	; 0x2a2c <ManageSecurityOptions+0x2b8>
			{
				counter1 = 0;
    28de:	1d a6       	std	Y+45, r1	; 0x2d
				Open_Door(Config_Ptr);
    28e0:	8e a5       	ldd	r24, Y+46	; 0x2e
    28e2:	9f a5       	ldd	r25, Y+47	; 0x2f
    28e4:	0e 94 77 13 	call	0x26ee	; 0x26ee <Open_Door>
    28e8:	a5 c0       	rjmp	.+330    	; 0x2a34 <ManageSecurityOptions+0x2c0>
			}
			else
			{
				while(counter1 <= 2 )
				{
					CheckPassword();
    28ea:	0e 94 96 11 	call	0x232c	; 0x232c <CheckPassword>
					if(DetermineAccess2() == 1)
    28ee:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <DetermineAccess2>
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	39 f4       	brne	.+14     	; 0x2904 <ManageSecurityOptions+0x190>
					{
						Open_Door(Config_Ptr);
    28f6:	8e a5       	ldd	r24, Y+46	; 0x2e
    28f8:	9f a5       	ldd	r25, Y+47	; 0x2f
    28fa:	0e 94 77 13 	call	0x26ee	; 0x26ee <Open_Door>
						counter1 = 3;
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	8d a7       	std	Y+45, r24	; 0x2d
    2902:	91 c0       	rjmp	.+290    	; 0x2a26 <ManageSecurityOptions+0x2b2>
					}
					else if(counter1 == 1)
    2904:	8d a5       	ldd	r24, Y+45	; 0x2d
    2906:	81 30       	cpi	r24, 0x01	; 1
    2908:	09 f0       	breq	.+2      	; 0x290c <ManageSecurityOptions+0x198>
    290a:	8d c0       	rjmp	.+282    	; 0x2a26 <ManageSecurityOptions+0x2b2>
					{
						UART_sendByte(BuzzerReady);
    290c:	83 e2       	ldi	r24, 0x23	; 35
    290e:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
						while(UART_recieveByte() != M2_READY);
    2912:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2916:	81 31       	cpi	r24, 0x11	; 17
    2918:	e1 f7       	brne	.-8      	; 0x2912 <ManageSecurityOptions+0x19e>

						LCD_clearScreen();
    291a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>

							LCD_clearScreen();
    291e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 4, "WARNNING");
    2922:	29 ec       	ldi	r18, 0xC9	; 201
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	64 e0       	ldi	r22, 0x04	; 4
    292a:	a9 01       	movw	r20, r18
    292c:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 5, "BUZZER");
    2930:	22 ed       	ldi	r18, 0xD2	; 210
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	65 e0       	ldi	r22, 0x05	; 5
    2938:	a9 01       	movw	r20, r18
    293a:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e4       	ldi	r25, 0x40	; 64
    2942:	ac e9       	ldi	r26, 0x9C	; 156
    2944:	b5 e4       	ldi	r27, 0x45	; 69
    2946:	89 8f       	std	Y+25, r24	; 0x19
    2948:	9a 8f       	std	Y+26, r25	; 0x1a
    294a:	ab 8f       	std	Y+27, r26	; 0x1b
    294c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	69 8d       	ldd	r22, Y+25	; 0x19
    2950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a ef       	ldi	r20, 0xFA	; 250
    295c:	54 e4       	ldi	r21, 0x44	; 68
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8d 8b       	std	Y+21, r24	; 0x15
    2968:	9e 8b       	std	Y+22, r25	; 0x16
    296a:	af 8b       	std	Y+23, r26	; 0x17
    296c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    296e:	6d 89       	ldd	r22, Y+21	; 0x15
    2970:	7e 89       	ldd	r23, Y+22	; 0x16
    2972:	8f 89       	ldd	r24, Y+23	; 0x17
    2974:	98 8d       	ldd	r25, Y+24	; 0x18
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <ManageSecurityOptions+0x21c>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c 8b       	std	Y+20, r25	; 0x14
    298c:	8b 8b       	std	Y+19, r24	; 0x13
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <ManageSecurityOptions+0x29a>
	else if (__tmp > 65535)
    2990:	6d 89       	ldd	r22, Y+21	; 0x15
    2992:	7e 89       	ldd	r23, Y+22	; 0x16
    2994:	8f 89       	ldd	r24, Y+23	; 0x17
    2996:	98 8d       	ldd	r25, Y+24	; 0x18
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <ManageSecurityOptions+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	69 8d       	ldd	r22, Y+25	; 0x19
    29aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9c 8b       	std	Y+20, r25	; 0x14
    29ce:	8b 8b       	std	Y+19, r24	; 0x13
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <ManageSecurityOptions+0x27c>
    29d2:	88 ec       	ldi	r24, 0xC8	; 200
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9a 8b       	std	Y+18, r25	; 0x12
    29d8:	89 8b       	std	Y+17, r24	; 0x11
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	9a 89       	ldd	r25, Y+18	; 0x12
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <ManageSecurityOptions+0x26a>
    29e2:	9a 8b       	std	Y+18, r25	; 0x12
    29e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8b 89       	ldd	r24, Y+19	; 0x13
    29e8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9c 8b       	std	Y+20, r25	; 0x14
    29ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8b 89       	ldd	r24, Y+19	; 0x13
    29f2:	9c 89       	ldd	r25, Y+20	; 0x14
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <ManageSecurityOptions+0x25e>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <ManageSecurityOptions+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6d 89       	ldd	r22, Y+21	; 0x15
    29fc:	7e 89       	ldd	r23, Y+22	; 0x16
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
    2a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a10:	9c 89       	ldd	r25, Y+20	; 0x14
    2a12:	98 8b       	std	Y+16, r25	; 0x10
    2a14:	8f 87       	std	Y+15, r24	; 0x0f
    2a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a18:	98 89       	ldd	r25, Y+16	; 0x10
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <ManageSecurityOptions+0x2a6>
    2a1e:	98 8b       	std	Y+16, r25	; 0x10
    2a20:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(5000);

						counter1 = 3;
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	8d a7       	std	Y+45, r24	; 0x2d
					}
					counter1++;
    2a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a28:	8f 5f       	subi	r24, 0xFF	; 255
    2a2a:	8d a7       	std	Y+45, r24	; 0x2d
				counter1 = 0;
				Open_Door(Config_Ptr);
			}
			else
			{
				while(counter1 <= 2 )
    2a2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	08 f4       	brcc	.+2      	; 0x2a34 <ManageSecurityOptions+0x2c0>
    2a32:	5b cf       	rjmp	.-330    	; 0x28ea <ManageSecurityOptions+0x176>
					counter1++;
				}
			}

		}
		if(key == '-')
    2a34:	80 91 61 01 	lds	r24, 0x0161
    2a38:	8d 32       	cpi	r24, 0x2D	; 45
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <ManageSecurityOptions+0x2ca>
    2a3c:	be c0       	rjmp	.+380    	; 0x2bba <ManageSecurityOptions+0x446>
		{

			CheckPassword();
    2a3e:	0e 94 96 11 	call	0x232c	; 0x232c <CheckPassword>
			if(DetermineAccess2() == 1)
    2a42:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <DetermineAccess2>
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <ManageSecurityOptions+0x2d8>
    2a4a:	b0 c0       	rjmp	.+352    	; 0x2bac <ManageSecurityOptions+0x438>
			{
				stayhere=1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	80 93 64 01 	sts	0x0164, r24
				flag=0;
    2a52:	10 92 62 01 	sts	0x0162, r1
    2a56:	b1 c0       	rjmp	.+354    	; 0x2bba <ManageSecurityOptions+0x446>
			}
			else
			{
				while(counter <= 3)
				{
					CheckPassword();
    2a58:	0e 94 96 11 	call	0x232c	; 0x232c <CheckPassword>
					if(DetermineAccess2() == 1)
    2a5c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <DetermineAccess2>
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	49 f4       	brne	.+18     	; 0x2a76 <ManageSecurityOptions+0x302>
					{
						stayhere=1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 93 64 01 	sts	0x0164, r24
						flag=0;
    2a6a:	10 92 62 01 	sts	0x0162, r1
						counter = 4;
    2a6e:	84 e0       	ldi	r24, 0x04	; 4
    2a70:	80 93 65 01 	sts	0x0165, r24
    2a74:	96 c0       	rjmp	.+300    	; 0x2ba2 <ManageSecurityOptions+0x42e>
					}
					else if(counter == 1){
    2a76:	80 91 65 01 	lds	r24, 0x0165
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <ManageSecurityOptions+0x30c>
    2a7e:	91 c0       	rjmp	.+290    	; 0x2ba2 <ManageSecurityOptions+0x42e>
						UART_sendByte(BuzzerReady);
    2a80:	83 e2       	ldi	r24, 0x23	; 35
    2a82:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
						while(UART_recieveByte() != M2_READY);
    2a86:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2a8a:	81 31       	cpi	r24, 0x11	; 17
    2a8c:	e1 f7       	brne	.-8      	; 0x2a86 <ManageSecurityOptions+0x312>

							LCD_clearScreen();
    2a8e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 4, "WARNNING");
    2a92:	29 ec       	ldi	r18, 0xC9	; 201
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	64 e0       	ldi	r22, 0x04	; 4
    2a9a:	a9 01       	movw	r20, r18
    2a9c:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 5, "BUZZER");
    2aa0:	22 ed       	ldi	r18, 0xD2	; 210
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	65 e0       	ldi	r22, 0x05	; 5
    2aa8:	a9 01       	movw	r20, r18
    2aaa:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	90 e4       	ldi	r25, 0x40	; 64
    2ab2:	ac e9       	ldi	r26, 0x9C	; 156
    2ab4:	b5 e4       	ldi	r27, 0x45	; 69
    2ab6:	8b 87       	std	Y+11, r24	; 0x0b
    2ab8:	9c 87       	std	Y+12, r25	; 0x0c
    2aba:	ad 87       	std	Y+13, r26	; 0x0d
    2abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	4a ef       	ldi	r20, 0xFA	; 250
    2acc:	54 e4       	ldi	r21, 0x44	; 68
    2ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	8f 83       	std	Y+7, r24	; 0x07
    2ad8:	98 87       	std	Y+8, r25	; 0x08
    2ada:	a9 87       	std	Y+9, r26	; 0x09
    2adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e8       	ldi	r20, 0x80	; 128
    2aec:	5f e3       	ldi	r21, 0x3F	; 63
    2aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af2:	88 23       	and	r24, r24
    2af4:	2c f4       	brge	.+10     	; 0x2b00 <ManageSecurityOptions+0x38c>
		__ticks = 1;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9e 83       	std	Y+6, r25	; 0x06
    2afc:	8d 83       	std	Y+5, r24	; 0x05
    2afe:	3f c0       	rjmp	.+126    	; 0x2b7e <ManageSecurityOptions+0x40a>
	else if (__tmp > 65535)
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	3f ef       	ldi	r19, 0xFF	; 255
    2b0c:	4f e7       	ldi	r20, 0x7F	; 127
    2b0e:	57 e4       	ldi	r21, 0x47	; 71
    2b10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b14:	18 16       	cp	r1, r24
    2b16:	4c f5       	brge	.+82     	; 0x2b6a <ManageSecurityOptions+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e2       	ldi	r20, 0x20	; 32
    2b26:	51 e4       	ldi	r21, 0x41	; 65
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <ManageSecurityOptions+0x3ec>
    2b42:	88 ec       	ldi	r24, 0xC8	; 200
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	9c 83       	std	Y+4, r25	; 0x04
    2b48:	8b 83       	std	Y+3, r24	; 0x03
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <ManageSecurityOptions+0x3da>
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	69 f7       	brne	.-38     	; 0x2b42 <ManageSecurityOptions+0x3ce>
    2b68:	14 c0       	rjmp	.+40     	; 0x2b92 <ManageSecurityOptions+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	9e 81       	ldd	r25, Y+6	; 0x06
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <ManageSecurityOptions+0x416>
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(5000);

						stayhere=0;
    2b92:	10 92 64 01 	sts	0x0164, r1
						flag=1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	80 93 62 01 	sts	0x0162, r24
						counter = 4;
    2b9c:	84 e0       	ldi	r24, 0x04	; 4
    2b9e:	80 93 65 01 	sts	0x0165, r24
					}
					counter++;
    2ba2:	80 91 65 01 	lds	r24, 0x0165
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 65 01 	sts	0x0165, r24
				flag=0;

			}
			else
			{
				while(counter <= 3)
    2bac:	80 91 65 01 	lds	r24, 0x0165
    2bb0:	84 30       	cpi	r24, 0x04	; 4
    2bb2:	08 f4       	brcc	.+2      	; 0x2bb6 <ManageSecurityOptions+0x442>
    2bb4:	51 cf       	rjmp	.-350    	; 0x2a58 <ManageSecurityOptions+0x2e4>
						flag=1;
						counter = 4;
					}
					counter++;
				}
				counter = 0 ;
    2bb6:	10 92 65 01 	sts	0x0165, r1
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
	}
}
void ManageSecurityOptions(const Timer1_ConfigType * Config_Ptr){
	while(stayhere == 0){
    2bba:	80 91 64 01 	lds	r24, 0x0164
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <ManageSecurityOptions+0x450>
    2bc2:	e5 cd       	rjmp	.-1078   	; 0x278e <ManageSecurityOptions+0x1a>
				counter = 0 ;
			}

		}
	}
}
    2bc4:	af 96       	adiw	r28, 0x2f	; 47
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <SendPassword>:
void SendPassword(void){
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <SendPassword+0x6>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(ReadyForPassone);
    2be0:	80 e2       	ldi	r24, 0x20	; 32
    2be2:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
	while(UART_recieveByte() != M2_READY);
    2be6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2bea:	81 31       	cpi	r24, 0x11	; 17
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <SendPassword+0x10>

	for(uint8 k = 0 ; k <= 4 ; k++)
    2bee:	1a 82       	std	Y+2, r1	; 0x02
    2bf0:	10 c0       	rjmp	.+32     	; 0x2c12 <SendPassword+0x3c>
	{
		UART_sendByte(First_Pass[k]);
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	ee 5a       	subi	r30, 0xAE	; 174
    2bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfe:	80 81       	ld	r24, Z
    2c00:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
		while (UART_recieveByte() != WAIT);
    2c04:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2c08:	86 31       	cpi	r24, 0x16	; 22
    2c0a:	e1 f7       	brne	.-8      	; 0x2c04 <SendPassword+0x2e>
void SendPassword(void){

	UART_sendByte(ReadyForPassone);
	while(UART_recieveByte() != M2_READY);

	for(uint8 k = 0 ; k <= 4 ; k++)
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	8f 5f       	subi	r24, 0xFF	; 255
    2c10:	8a 83       	std	Y+2, r24	; 0x02
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	85 30       	cpi	r24, 0x05	; 5
    2c16:	68 f3       	brcs	.-38     	; 0x2bf2 <SendPassword+0x1c>
		while (UART_recieveByte() != WAIT);
	}



	for(uint8 k = 0 ; k <= 4 ; k++)
    2c18:	19 82       	std	Y+1, r1	; 0x01
    2c1a:	10 c0       	rjmp	.+32     	; 0x2c3c <SendPassword+0x66>
	{
		UART_sendByte(Second_Pass[k]);
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	fc 01       	movw	r30, r24
    2c24:	e9 5a       	subi	r30, 0xA9	; 169
    2c26:	fe 4f       	sbci	r31, 0xFE	; 254
    2c28:	80 81       	ld	r24, Z
    2c2a:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>
		while (UART_recieveByte() != WAIT);
    2c2e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2c32:	86 31       	cpi	r24, 0x16	; 22
    2c34:	e1 f7       	brne	.-8      	; 0x2c2e <SendPassword+0x58>
		while (UART_recieveByte() != WAIT);
	}



	for(uint8 k = 0 ; k <= 4 ; k++)
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	85 30       	cpi	r24, 0x05	; 5
    2c40:	68 f3       	brcs	.-38     	; 0x2c1c <SendPassword+0x46>
	{
		UART_sendByte(Second_Pass[k]);
		while (UART_recieveByte() != WAIT);

	}
	UART_sendByte(Done);
    2c42:	85 e1       	ldi	r24, 0x15	; 21
    2c44:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>

}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <DetermineAccess>:
void DetermineAccess(void){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
	if(UART_recieveByte() == Matched)
    2c66:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UART_recieveByte>
    2c6a:	85 32       	cpi	r24, 0x25	; 37
    2c6c:	31 f4       	brne	.+12     	; 0x2c7a <DetermineAccess+0x28>
	{

		flag = 1 ;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	80 93 62 01 	sts	0x0162, r24
		stayhere = 0;
    2c74:	10 92 64 01 	sts	0x0164, r1
    2c78:	80 c0       	rjmp	.+256    	; 0x2d7a <DetermineAccess+0x128>

	}
	else
	{
		LCD_clearScreen();
    2c7a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"NOT MATCHING");
    2c7e:	29 ed       	ldi	r18, 0xD9	; 217
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	a9 01       	movw	r20, r18
    2c88:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	aa e7       	ldi	r26, 0x7A	; 122
    2c92:	b4 e4       	ldi	r27, 0x44	; 68
    2c94:	8b 87       	std	Y+11, r24	; 0x0b
    2c96:	9c 87       	std	Y+12, r25	; 0x0c
    2c98:	ad 87       	std	Y+13, r26	; 0x0d
    2c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8f 83       	std	Y+7, r24	; 0x07
    2cb6:	98 87       	std	Y+8, r25	; 0x08
    2cb8:	a9 87       	std	Y+9, r26	; 0x09
    2cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cbe:	78 85       	ldd	r23, Y+8	; 0x08
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <DetermineAccess+0x8c>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <DetermineAccess+0x10a>
	else if (__tmp > 65535)
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <DetermineAccess+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <DetermineAccess+0xec>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9c 83       	std	Y+4, r25	; 0x04
    2d26:	8b 83       	std	Y+3, r24	; 0x03
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <DetermineAccess+0xda>
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	9e 81       	ldd	r25, Y+6	; 0x06
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	9e 81       	ldd	r25, Y+6	; 0x06
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <DetermineAccess+0xce>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <DetermineAccess+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <DetermineAccess+0x116>
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		flag = 0 ;
    2d70:	10 92 62 01 	sts	0x0162, r1
		stayhere = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	80 93 64 01 	sts	0x0164, r24

	}
}
    2d7a:	2e 96       	adiw	r28, 0x0e	; 14
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <ValidatePassword>:
void ValidatePassword(void)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	ab 97       	sbiw	r28, 0x2b	; 43
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2da0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz Re-enter The");
    2da4:	26 ee       	ldi	r18, 0xE6	; 230
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	a9 01       	movw	r20, r18
    2dae:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Same Pass:");
    2db2:	27 ef       	ldi	r18, 0xF7	; 247
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	a9 01       	movw	r20, r18
    2dbc:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
	for (uint8 i = 0; i < 5; i++)
    2dc0:	1b a6       	std	Y+43, r1	; 0x2b
    2dc2:	01 c1       	rjmp	.+514    	; 0x2fc6 <ValidatePassword+0x23a>
	{

		key = KEYPAD_getPressedKey();
    2dc4:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    2dc8:	80 93 61 01 	sts	0x0161, r24
    2dcc:	76 c0       	rjmp	.+236    	; 0x2eba <ValidatePassword+0x12e>
		while (!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    2dce:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    2dd2:	80 93 61 01 	sts	0x0161, r24
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a8 e4       	ldi	r26, 0x48	; 72
    2ddc:	b2 e4       	ldi	r27, 0x42	; 66
    2dde:	8f a3       	std	Y+39, r24	; 0x27
    2de0:	98 a7       	std	Y+40, r25	; 0x28
    2de2:	a9 a7       	std	Y+41, r26	; 0x29
    2de4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	6f a1       	ldd	r22, Y+39	; 0x27
    2de8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dea:	89 a5       	ldd	r24, Y+41	; 0x29
    2dec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a ef       	ldi	r20, 0xFA	; 250
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8b a3       	std	Y+35, r24	; 0x23
    2e00:	9c a3       	std	Y+36, r25	; 0x24
    2e02:	ad a3       	std	Y+37, r26	; 0x25
    2e04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e06:	6b a1       	ldd	r22, Y+35	; 0x23
    2e08:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <ValidatePassword+0x9c>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9a a3       	std	Y+34, r25	; 0x22
    2e24:	89 a3       	std	Y+33, r24	; 0x21
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <ValidatePassword+0x11a>
	else if (__tmp > 65535)
    2e28:	6b a1       	ldd	r22, Y+35	; 0x23
    2e2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <ValidatePassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	6f a1       	ldd	r22, Y+39	; 0x27
    2e42:	78 a5       	ldd	r23, Y+40	; 0x28
    2e44:	89 a5       	ldd	r24, Y+41	; 0x29
    2e46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9a a3       	std	Y+34, r25	; 0x22
    2e66:	89 a3       	std	Y+33, r24	; 0x21
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <ValidatePassword+0xfc>
    2e6a:	88 ec       	ldi	r24, 0xC8	; 200
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	98 a3       	std	Y+32, r25	; 0x20
    2e70:	8f 8f       	std	Y+31, r24	; 0x1f
    2e72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e74:	98 a1       	ldd	r25, Y+32	; 0x20
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <ValidatePassword+0xea>
    2e7a:	98 a3       	std	Y+32, r25	; 0x20
    2e7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e80:	9a a1       	ldd	r25, Y+34	; 0x22
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	9a a3       	std	Y+34, r25	; 0x22
    2e86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	89 a1       	ldd	r24, Y+33	; 0x21
    2e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	69 f7       	brne	.-38     	; 0x2e6a <ValidatePassword+0xde>
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <ValidatePassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	6b a1       	ldd	r22, Y+35	; 0x23
    2e94:	7c a1       	ldd	r23, Y+36	; 0x24
    2e96:	8d a1       	ldd	r24, Y+37	; 0x25
    2e98:	9e a1       	ldd	r25, Y+38	; 0x26
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9a a3       	std	Y+34, r25	; 0x22
    2ea4:	89 a3       	std	Y+33, r24	; 0x21
    2ea6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eaa:	9e 8f       	std	Y+30, r25	; 0x1e
    2eac:	8d 8f       	std	Y+29, r24	; 0x1d
    2eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <ValidatePassword+0x126>
    2eb6:	9e 8f       	std	Y+30, r25	; 0x1e
    2eb8:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_displayStringRowColumn(1, 0, "Same Pass:");
	for (uint8 i = 0; i < 5; i++)
	{

		key = KEYPAD_getPressedKey();
		while (!((key >= 0) && (key <= 9)))
    2eba:	80 91 61 01 	lds	r24, 0x0161
    2ebe:	8a 30       	cpi	r24, 0x0A	; 10
    2ec0:	08 f0       	brcs	.+2      	; 0x2ec4 <ValidatePassword+0x138>
    2ec2:	85 cf       	rjmp	.-246    	; 0x2dce <ValidatePassword+0x42>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		Second_Pass[i]=key;
    2ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ec6:	88 2f       	mov	r24, r24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	20 91 61 01 	lds	r18, 0x0161
    2ece:	fc 01       	movw	r30, r24
    2ed0:	e9 5a       	subi	r30, 0xA9	; 169
    2ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed4:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    2ed6:	8a e2       	ldi	r24, 0x2A	; 42
    2ed8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_displayCharacter>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	aa e7       	ldi	r26, 0x7A	; 122
    2ee2:	b3 e4       	ldi	r27, 0x43	; 67
    2ee4:	89 8f       	std	Y+25, r24	; 0x19
    2ee6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee8:	ab 8f       	std	Y+27, r26	; 0x1b
    2eea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	69 8d       	ldd	r22, Y+25	; 0x19
    2eee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ef0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a ef       	ldi	r20, 0xFA	; 250
    2efa:	54 e4       	ldi	r21, 0x44	; 68
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8d 8b       	std	Y+21, r24	; 0x15
    2f06:	9e 8b       	std	Y+22, r25	; 0x16
    2f08:	af 8b       	std	Y+23, r26	; 0x17
    2f0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f10:	8f 89       	ldd	r24, Y+23	; 0x17
    2f12:	98 8d       	ldd	r25, Y+24	; 0x18
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <ValidatePassword+0x1a2>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9c 8b       	std	Y+20, r25	; 0x14
    2f2a:	8b 8b       	std	Y+19, r24	; 0x13
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <ValidatePassword+0x220>
	else if (__tmp > 65535)
    2f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f30:	7e 89       	ldd	r23, Y+22	; 0x16
    2f32:	8f 89       	ldd	r24, Y+23	; 0x17
    2f34:	98 8d       	ldd	r25, Y+24	; 0x18
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <ValidatePassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	69 8d       	ldd	r22, Y+25	; 0x19
    2f48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9c 8b       	std	Y+20, r25	; 0x14
    2f6c:	8b 8b       	std	Y+19, r24	; 0x13
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <ValidatePassword+0x202>
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9a 8b       	std	Y+18, r25	; 0x12
    2f76:	89 8b       	std	Y+17, r24	; 0x11
    2f78:	89 89       	ldd	r24, Y+17	; 0x11
    2f7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <ValidatePassword+0x1f0>
    2f80:	9a 8b       	std	Y+18, r25	; 0x12
    2f82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8b 89       	ldd	r24, Y+19	; 0x13
    2f86:	9c 89       	ldd	r25, Y+20	; 0x14
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9c 8b       	std	Y+20, r25	; 0x14
    2f8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f90:	9c 89       	ldd	r25, Y+20	; 0x14
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <ValidatePassword+0x1e4>
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <ValidatePassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	6d 89       	ldd	r22, Y+21	; 0x15
    2f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9c 8b       	std	Y+20, r25	; 0x14
    2faa:	8b 8b       	std	Y+19, r24	; 0x13
    2fac:	8b 89       	ldd	r24, Y+19	; 0x13
    2fae:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb0:	98 8b       	std	Y+16, r25	; 0x10
    2fb2:	8f 87       	std	Y+15, r24	; 0x0f
    2fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb6:	98 89       	ldd	r25, Y+16	; 0x10
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <ValidatePassword+0x22c>
    2fbc:	98 8b       	std	Y+16, r25	; 0x10
    2fbe:	8f 87       	std	Y+15, r24	; 0x0f
void ValidatePassword(void)
{
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz Re-enter The");
	LCD_displayStringRowColumn(1, 0, "Same Pass:");
	for (uint8 i = 0; i < 5; i++)
    2fc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc2:	8f 5f       	subi	r24, 0xFF	; 255
    2fc4:	8b a7       	std	Y+43, r24	; 0x2b
    2fc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc8:	85 30       	cpi	r24, 0x05	; 5
    2fca:	08 f4       	brcc	.+2      	; 0x2fce <ValidatePassword+0x242>
    2fcc:	fb ce       	rjmp	.-522    	; 0x2dc4 <ValidatePassword+0x38>
		Second_Pass[i]=key;
		LCD_displayCharacter('*');
		_delay_ms(250);

	}
	LCD_clearScreen();
    2fce:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    2fd2:	22 e0       	ldi	r18, 0x02	; 2
    2fd4:	31 e0       	ldi	r19, 0x01	; 1
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	a9 01       	movw	r20, r18
    2fdc:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    2fe0:	76 c0       	rjmp	.+236    	; 0x30ce <ValidatePassword+0x342>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    2fe2:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    2fe6:	80 93 61 01 	sts	0x0161, r24
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a8 e4       	ldi	r26, 0x48	; 72
    2ff0:	b2 e4       	ldi	r27, 0x42	; 66
    2ff2:	8b 87       	std	Y+11, r24	; 0x0b
    2ff4:	9c 87       	std	Y+12, r25	; 0x0c
    2ff6:	ad 87       	std	Y+13, r26	; 0x0d
    2ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3000:	9e 85       	ldd	r25, Y+14	; 0x0e
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a ef       	ldi	r20, 0xFA	; 250
    3008:	54 e4       	ldi	r21, 0x44	; 68
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8f 83       	std	Y+7, r24	; 0x07
    3014:	98 87       	std	Y+8, r25	; 0x08
    3016:	a9 87       	std	Y+9, r26	; 0x09
    3018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    301a:	6f 81       	ldd	r22, Y+7	; 0x07
    301c:	78 85       	ldd	r23, Y+8	; 0x08
    301e:	89 85       	ldd	r24, Y+9	; 0x09
    3020:	9a 85       	ldd	r25, Y+10	; 0x0a
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	2c f4       	brge	.+10     	; 0x303c <ValidatePassword+0x2b0>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	8d 83       	std	Y+5, r24	; 0x05
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <ValidatePassword+0x32e>
	else if (__tmp > 65535)
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	3f ef       	ldi	r19, 0xFF	; 255
    3048:	4f e7       	ldi	r20, 0x7F	; 127
    304a:	57 e4       	ldi	r21, 0x47	; 71
    304c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3050:	18 16       	cp	r1, r24
    3052:	4c f5       	brge	.+82     	; 0x30a6 <ValidatePassword+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	6b 85       	ldd	r22, Y+11	; 0x0b
    3056:	7c 85       	ldd	r23, Y+12	; 0x0c
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
    305a:	9e 85       	ldd	r25, Y+14	; 0x0e
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e2       	ldi	r20, 0x20	; 32
    3062:	51 e4       	ldi	r21, 0x41	; 65
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	0f c0       	rjmp	.+30     	; 0x309c <ValidatePassword+0x310>
    307e:	88 ec       	ldi	r24, 0xC8	; 200
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9c 83       	std	Y+4, r25	; 0x04
    3084:	8b 83       	std	Y+3, r24	; 0x03
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	9c 81       	ldd	r25, Y+4	; 0x04
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <ValidatePassword+0x2fe>
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	9e 83       	std	Y+6, r25	; 0x06
    309a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	8d 81       	ldd	r24, Y+5	; 0x05
    309e:	9e 81       	ldd	r25, Y+6	; 0x06
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	69 f7       	brne	.-38     	; 0x307e <ValidatePassword+0x2f2>
    30a4:	14 c0       	rjmp	.+40     	; 0x30ce <ValidatePassword+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	6f 81       	ldd	r22, Y+7	; 0x07
    30a8:	78 85       	ldd	r23, Y+8	; 0x08
    30aa:	89 85       	ldd	r24, Y+9	; 0x09
    30ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	8d 83       	std	Y+5, r24	; 0x05
    30ba:	8d 81       	ldd	r24, Y+5	; 0x05
    30bc:	9e 81       	ldd	r25, Y+6	; 0x06
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <ValidatePassword+0x33a>
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);

	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    30ce:	80 91 61 01 	lds	r24, 0x0161
    30d2:	8d 33       	cpi	r24, 0x3D	; 61
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <ValidatePassword+0x34c>
    30d6:	85 cf       	rjmp	.-246    	; 0x2fe2 <ValidatePassword+0x256>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}
}
    30d8:	ab 96       	adiw	r28, 0x2b	; 43
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <CreatePassword>:
void CreatePassword(void)
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	ab 97       	sbiw	r28, 0x2b	; 43
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    30fe:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Add 1st Pass :");
    3102:	2e e0       	ldi	r18, 0x0E	; 14
    3104:	31 e0       	ldi	r19, 0x01	; 1
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	a9 01       	movw	r20, r18
    310c:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>

	LCD_moveCursor(1,5);
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	65 e0       	ldi	r22, 0x05	; 5
    3114:	0e 94 01 11 	call	0x2202	; 0x2202 <LCD_moveCursor>
	for (uint8 i = 0; i < 5; i++)
    3118:	1b a6       	std	Y+43, r1	; 0x2b
    311a:	08 c1       	rjmp	.+528    	; 0x332c <CreatePassword+0x242>
	{

		key = KEYPAD_getPressedKey();
    311c:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    3120:	80 93 61 01 	sts	0x0161, r24
    3124:	76 c0       	rjmp	.+236    	; 0x3212 <CreatePassword+0x128>

		while (!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    3126:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    312a:	80 93 61 01 	sts	0x0161, r24
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a8 e4       	ldi	r26, 0x48	; 72
    3134:	b2 e4       	ldi	r27, 0x42	; 66
    3136:	8f a3       	std	Y+39, r24	; 0x27
    3138:	98 a7       	std	Y+40, r25	; 0x28
    313a:	a9 a7       	std	Y+41, r26	; 0x29
    313c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313e:	6f a1       	ldd	r22, Y+39	; 0x27
    3140:	78 a5       	ldd	r23, Y+40	; 0x28
    3142:	89 a5       	ldd	r24, Y+41	; 0x29
    3144:	9a a5       	ldd	r25, Y+42	; 0x2a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	4a ef       	ldi	r20, 0xFA	; 250
    314c:	54 e4       	ldi	r21, 0x44	; 68
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	8b a3       	std	Y+35, r24	; 0x23
    3158:	9c a3       	std	Y+36, r25	; 0x24
    315a:	ad a3       	std	Y+37, r26	; 0x25
    315c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    315e:	6b a1       	ldd	r22, Y+35	; 0x23
    3160:	7c a1       	ldd	r23, Y+36	; 0x24
    3162:	8d a1       	ldd	r24, Y+37	; 0x25
    3164:	9e a1       	ldd	r25, Y+38	; 0x26
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e8       	ldi	r20, 0x80	; 128
    316c:	5f e3       	ldi	r21, 0x3F	; 63
    316e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3172:	88 23       	and	r24, r24
    3174:	2c f4       	brge	.+10     	; 0x3180 <CreatePassword+0x96>
		__ticks = 1;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	9a a3       	std	Y+34, r25	; 0x22
    317c:	89 a3       	std	Y+33, r24	; 0x21
    317e:	3f c0       	rjmp	.+126    	; 0x31fe <CreatePassword+0x114>
	else if (__tmp > 65535)
    3180:	6b a1       	ldd	r22, Y+35	; 0x23
    3182:	7c a1       	ldd	r23, Y+36	; 0x24
    3184:	8d a1       	ldd	r24, Y+37	; 0x25
    3186:	9e a1       	ldd	r25, Y+38	; 0x26
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	3f ef       	ldi	r19, 0xFF	; 255
    318c:	4f e7       	ldi	r20, 0x7F	; 127
    318e:	57 e4       	ldi	r21, 0x47	; 71
    3190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3194:	18 16       	cp	r1, r24
    3196:	4c f5       	brge	.+82     	; 0x31ea <CreatePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3198:	6f a1       	ldd	r22, Y+39	; 0x27
    319a:	78 a5       	ldd	r23, Y+40	; 0x28
    319c:	89 a5       	ldd	r24, Y+41	; 0x29
    319e:	9a a5       	ldd	r25, Y+42	; 0x2a
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e2       	ldi	r20, 0x20	; 32
    31a6:	51 e4       	ldi	r21, 0x41	; 65
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	bc 01       	movw	r22, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	9a a3       	std	Y+34, r25	; 0x22
    31be:	89 a3       	std	Y+33, r24	; 0x21
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <CreatePassword+0xf6>
    31c2:	88 ec       	ldi	r24, 0xC8	; 200
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	98 a3       	std	Y+32, r25	; 0x20
    31c8:	8f 8f       	std	Y+31, r24	; 0x1f
    31ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31cc:	98 a1       	ldd	r25, Y+32	; 0x20
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <CreatePassword+0xe4>
    31d2:	98 a3       	std	Y+32, r25	; 0x20
    31d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d6:	89 a1       	ldd	r24, Y+33	; 0x21
    31d8:	9a a1       	ldd	r25, Y+34	; 0x22
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	9a a3       	std	Y+34, r25	; 0x22
    31de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e0:	89 a1       	ldd	r24, Y+33	; 0x21
    31e2:	9a a1       	ldd	r25, Y+34	; 0x22
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	69 f7       	brne	.-38     	; 0x31c2 <CreatePassword+0xd8>
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <CreatePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ea:	6b a1       	ldd	r22, Y+35	; 0x23
    31ec:	7c a1       	ldd	r23, Y+36	; 0x24
    31ee:	8d a1       	ldd	r24, Y+37	; 0x25
    31f0:	9e a1       	ldd	r25, Y+38	; 0x26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9a a3       	std	Y+34, r25	; 0x22
    31fc:	89 a3       	std	Y+33, r24	; 0x21
    31fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3200:	9a a1       	ldd	r25, Y+34	; 0x22
    3202:	9e 8f       	std	Y+30, r25	; 0x1e
    3204:	8d 8f       	std	Y+29, r24	; 0x1d
    3206:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3208:	9e 8d       	ldd	r25, Y+30	; 0x1e
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <CreatePassword+0x120>
    320e:	9e 8f       	std	Y+30, r25	; 0x1e
    3210:	8d 8f       	std	Y+29, r24	; 0x1d
	for (uint8 i = 0; i < 5; i++)
	{

		key = KEYPAD_getPressedKey();

		while (!((key >= 0) && (key <= 9)))
    3212:	80 91 61 01 	lds	r24, 0x0161
    3216:	8a 30       	cpi	r24, 0x0A	; 10
    3218:	08 f0       	brcs	.+2      	; 0x321c <CreatePassword+0x132>
    321a:	85 cf       	rjmp	.-246    	; 0x3126 <CreatePassword+0x3c>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,i+5,"*");
    321c:	8b a5       	ldd	r24, Y+43	; 0x2b
    321e:	98 2f       	mov	r25, r24
    3220:	9b 5f       	subi	r25, 0xFB	; 251
    3222:	20 e7       	ldi	r18, 0x70	; 112
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	69 2f       	mov	r22, r25
    322a:	a9 01       	movw	r20, r18
    322c:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
		First_Pass[i]=key;
    3230:	8b a5       	ldd	r24, Y+43	; 0x2b
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	20 91 61 01 	lds	r18, 0x0161
    323a:	fc 01       	movw	r30, r24
    323c:	ee 5a       	subi	r30, 0xAE	; 174
    323e:	fe 4f       	sbci	r31, 0xFE	; 254
    3240:	20 83       	st	Z, r18
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	aa e7       	ldi	r26, 0x7A	; 122
    3248:	b3 e4       	ldi	r27, 0x43	; 67
    324a:	89 8f       	std	Y+25, r24	; 0x19
    324c:	9a 8f       	std	Y+26, r25	; 0x1a
    324e:	ab 8f       	std	Y+27, r26	; 0x1b
    3250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8d 8b       	std	Y+21, r24	; 0x15
    326c:	9e 8b       	std	Y+22, r25	; 0x16
    326e:	af 8b       	std	Y+23, r26	; 0x17
    3270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3272:	6d 89       	ldd	r22, Y+21	; 0x15
    3274:	7e 89       	ldd	r23, Y+22	; 0x16
    3276:	8f 89       	ldd	r24, Y+23	; 0x17
    3278:	98 8d       	ldd	r25, Y+24	; 0x18
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <CreatePassword+0x1aa>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <CreatePassword+0x228>
	else if (__tmp > 65535)
    3294:	6d 89       	ldd	r22, Y+21	; 0x15
    3296:	7e 89       	ldd	r23, Y+22	; 0x16
    3298:	8f 89       	ldd	r24, Y+23	; 0x17
    329a:	98 8d       	ldd	r25, Y+24	; 0x18
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <CreatePassword+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	69 8d       	ldd	r22, Y+25	; 0x19
    32ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <CreatePassword+0x20a>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
    32de:	89 89       	ldd	r24, Y+17	; 0x11
    32e0:	9a 89       	ldd	r25, Y+18	; 0x12
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <CreatePassword+0x1f8>
    32e6:	9a 8b       	std	Y+18, r25	; 0x12
    32e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8b 89       	ldd	r24, Y+19	; 0x13
    32ec:	9c 89       	ldd	r25, Y+20	; 0x14
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <CreatePassword+0x1ec>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <CreatePassword+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3300:	7e 89       	ldd	r23, Y+22	; 0x16
    3302:	8f 89       	ldd	r24, Y+23	; 0x17
    3304:	98 8d       	ldd	r25, Y+24	; 0x18
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9c 8b       	std	Y+20, r25	; 0x14
    3310:	8b 8b       	std	Y+19, r24	; 0x13
    3312:	8b 89       	ldd	r24, Y+19	; 0x13
    3314:	9c 89       	ldd	r25, Y+20	; 0x14
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
    331a:	8f 85       	ldd	r24, Y+15	; 0x0f
    331c:	98 89       	ldd	r25, Y+16	; 0x10
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <CreatePassword+0x234>
    3322:	98 8b       	std	Y+16, r25	; 0x10
    3324:	8f 87       	std	Y+15, r24	; 0x0f
{
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Add 1st Pass :");

	LCD_moveCursor(1,5);
	for (uint8 i = 0; i < 5; i++)
    3326:	8b a5       	ldd	r24, Y+43	; 0x2b
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	8b a7       	std	Y+43, r24	; 0x2b
    332c:	8b a5       	ldd	r24, Y+43	; 0x2b
    332e:	85 30       	cpi	r24, 0x05	; 5
    3330:	08 f4       	brcc	.+2      	; 0x3334 <CreatePassword+0x24a>
    3332:	f4 ce       	rjmp	.-536    	; 0x311c <CreatePassword+0x32>
		LCD_displayStringRowColumn(1,i+5,"*");
		First_Pass[i]=key;
		_delay_ms(250);

	}
	LCD_clearScreen();
    3334:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    3338:	22 e0       	ldi	r18, 0x02	; 2
    333a:	31 e0       	ldi	r19, 0x01	; 1
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	a9 01       	movw	r20, r18
    3342:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    3346:	76 c0       	rjmp	.+236    	; 0x3434 <CreatePassword+0x34a>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    3348:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    334c:	80 93 61 01 	sts	0x0161, r24
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	a8 e4       	ldi	r26, 0x48	; 72
    3356:	b2 e4       	ldi	r27, 0x42	; 66
    3358:	8b 87       	std	Y+11, r24	; 0x0b
    335a:	9c 87       	std	Y+12, r25	; 0x0c
    335c:	ad 87       	std	Y+13, r26	; 0x0d
    335e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3360:	6b 85       	ldd	r22, Y+11	; 0x0b
    3362:	7c 85       	ldd	r23, Y+12	; 0x0c
    3364:	8d 85       	ldd	r24, Y+13	; 0x0d
    3366:	9e 85       	ldd	r25, Y+14	; 0x0e
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	4a ef       	ldi	r20, 0xFA	; 250
    336e:	54 e4       	ldi	r21, 0x44	; 68
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	8f 83       	std	Y+7, r24	; 0x07
    337a:	98 87       	std	Y+8, r25	; 0x08
    337c:	a9 87       	std	Y+9, r26	; 0x09
    337e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e8       	ldi	r20, 0x80	; 128
    338e:	5f e3       	ldi	r21, 0x3F	; 63
    3390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3394:	88 23       	and	r24, r24
    3396:	2c f4       	brge	.+10     	; 0x33a2 <CreatePassword+0x2b8>
		__ticks = 1;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	3f c0       	rjmp	.+126    	; 0x3420 <CreatePassword+0x336>
	else if (__tmp > 65535)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	3f ef       	ldi	r19, 0xFF	; 255
    33ae:	4f e7       	ldi	r20, 0x7F	; 127
    33b0:	57 e4       	ldi	r21, 0x47	; 71
    33b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	4c f5       	brge	.+82     	; 0x340c <CreatePassword+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	51 e4       	ldi	r21, 0x41	; 65
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	0f c0       	rjmp	.+30     	; 0x3402 <CreatePassword+0x318>
    33e4:	88 ec       	ldi	r24, 0xC8	; 200
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9c 83       	std	Y+4, r25	; 0x04
    33ea:	8b 83       	std	Y+3, r24	; 0x03
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <CreatePassword+0x306>
    33f4:	9c 83       	std	Y+4, r25	; 0x04
    33f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	69 f7       	brne	.-38     	; 0x33e4 <CreatePassword+0x2fa>
    340a:	14 c0       	rjmp	.+40     	; 0x3434 <CreatePassword+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340c:	6f 81       	ldd	r22, Y+7	; 0x07
    340e:	78 85       	ldd	r23, Y+8	; 0x08
    3410:	89 85       	ldd	r24, Y+9	; 0x09
    3412:	9a 85       	ldd	r25, Y+10	; 0x0a
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <CreatePassword+0x342>
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);

	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    3434:	80 91 61 01 	lds	r24, 0x0161
    3438:	8d 33       	cpi	r24, 0x3D	; 61
    343a:	09 f0       	breq	.+2      	; 0x343e <CreatePassword+0x354>
    343c:	85 cf       	rjmp	.-246    	; 0x3348 <CreatePassword+0x25e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}
}
    343e:	ab 96       	adiw	r28, 0x2b	; 43
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <main>:
int main()
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	a5 97       	sbiw	r28, 0x25	; 37
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    3464:	af e5       	ldi	r26, 0x5F	; 95
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	ef e5       	ldi	r30, 0x5F	; 95
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	80 81       	ld	r24, Z
    346e:	80 68       	ori	r24, 0x80	; 128
    3470:	8c 93       	st	X, r24
	LCD_init();
    3472:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <LCD_init>
	Timer1_ConfigType Timer_Config = {CLK_1024,TIMER1_CTC_OCR1A,0,6000};
    3476:	ce 01       	movw	r24, r28
    3478:	0f 96       	adiw	r24, 0x0f	; 15
    347a:	9d 8f       	std	Y+29, r25	; 0x1d
    347c:	8c 8f       	std	Y+28, r24	; 0x1c
    347e:	e9 e4       	ldi	r30, 0x49	; 73
    3480:	f1 e0       	ldi	r31, 0x01	; 1
    3482:	ff 8f       	std	Y+31, r31	; 0x1f
    3484:	ee 8f       	std	Y+30, r30	; 0x1e
    3486:	f6 e0       	ldi	r31, 0x06	; 6
    3488:	f8 a3       	std	Y+32, r31	; 0x20
    348a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    348c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    348e:	00 80       	ld	r0, Z
    3490:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3492:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	9f 8f       	std	Y+31, r25	; 0x1f
    3498:	8e 8f       	std	Y+30, r24	; 0x1e
    349a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    349c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    349e:	00 82       	st	Z, r0
    34a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	9d 8f       	std	Y+29, r25	; 0x1d
    34a8:	8c 8f       	std	Y+28, r24	; 0x1c
    34aa:	98 a1       	ldd	r25, Y+32	; 0x20
    34ac:	91 50       	subi	r25, 0x01	; 1
    34ae:	98 a3       	std	Y+32, r25	; 0x20
    34b0:	e8 a1       	ldd	r30, Y+32	; 0x20
    34b2:	ee 23       	and	r30, r30
    34b4:	51 f7       	brne	.-44     	; 0x348a <main+0x3a>
	Timer1_setCallBack(OpenDoor_Flag);
    34b6:	8a e8       	ldi	r24, 0x8A	; 138
    34b8:	91 e1       	ldi	r25, 0x11	; 17
    34ba:	0e 94 6d 06 	call	0xcda	; 0xcda <Timer1_setCallBack>
	Timer1_init(&Timer_Config);
    34be:	ce 01       	movw	r24, r28
    34c0:	0f 96       	adiw	r24, 0x0f	; 15
    34c2:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>

	UART_ConfigType UART_Config = {Eight_Bit, Disabled, One_Bit, 9600};
    34c6:	ce 01       	movw	r24, r28
    34c8:	45 96       	adiw	r24, 0x15	; 21
    34ca:	9a a3       	std	Y+34, r25	; 0x22
    34cc:	89 a3       	std	Y+33, r24	; 0x21
    34ce:	e2 e4       	ldi	r30, 0x42	; 66
    34d0:	f1 e0       	ldi	r31, 0x01	; 1
    34d2:	fc a3       	std	Y+36, r31	; 0x24
    34d4:	eb a3       	std	Y+35, r30	; 0x23
    34d6:	f7 e0       	ldi	r31, 0x07	; 7
    34d8:	fd a3       	std	Y+37, r31	; 0x25
    34da:	eb a1       	ldd	r30, Y+35	; 0x23
    34dc:	fc a1       	ldd	r31, Y+36	; 0x24
    34de:	00 80       	ld	r0, Z
    34e0:	8b a1       	ldd	r24, Y+35	; 0x23
    34e2:	9c a1       	ldd	r25, Y+36	; 0x24
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	9c a3       	std	Y+36, r25	; 0x24
    34e8:	8b a3       	std	Y+35, r24	; 0x23
    34ea:	e9 a1       	ldd	r30, Y+33	; 0x21
    34ec:	fa a1       	ldd	r31, Y+34	; 0x22
    34ee:	00 82       	st	Z, r0
    34f0:	89 a1       	ldd	r24, Y+33	; 0x21
    34f2:	9a a1       	ldd	r25, Y+34	; 0x22
    34f4:	01 96       	adiw	r24, 0x01	; 1
    34f6:	9a a3       	std	Y+34, r25	; 0x22
    34f8:	89 a3       	std	Y+33, r24	; 0x21
    34fa:	9d a1       	ldd	r25, Y+37	; 0x25
    34fc:	91 50       	subi	r25, 0x01	; 1
    34fe:	9d a3       	std	Y+37, r25	; 0x25
    3500:	ed a1       	ldd	r30, Y+37	; 0x25
    3502:	ee 23       	and	r30, r30
    3504:	51 f7       	brne	.-44     	; 0x34da <main+0x8a>
	UART_init(&UART_Config);
    3506:	ce 01       	movw	r24, r28
    3508:	45 96       	adiw	r24, 0x15	; 21
    350a:	0e 94 bf 09 	call	0x137e	; 0x137e <UART_init>

	LCD_clearScreen();
    350e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 3, "Door Locker ");
    3512:	2d e1       	ldi	r18, 0x1D	; 29
    3514:	31 e0       	ldi	r19, 0x01	; 1
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	63 e0       	ldi	r22, 0x03	; 3
    351a:	a9 01       	movw	r20, r18
    351c:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 1, "Security System");
    3520:	2a e2       	ldi	r18, 0x2A	; 42
    3522:	31 e0       	ldi	r19, 0x01	; 1
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	a9 01       	movw	r20, r18
    352a:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_displayStringRowColumn>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	aa ef       	ldi	r26, 0xFA	; 250
    3534:	b3 e4       	ldi	r27, 0x43	; 67
    3536:	8b 87       	std	Y+11, r24	; 0x0b
    3538:	9c 87       	std	Y+12, r25	; 0x0c
    353a:	ad 87       	std	Y+13, r26	; 0x0d
    353c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3540:	7c 85       	ldd	r23, Y+12	; 0x0c
    3542:	8d 85       	ldd	r24, Y+13	; 0x0d
    3544:	9e 85       	ldd	r25, Y+14	; 0x0e
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	8f 83       	std	Y+7, r24	; 0x07
    3558:	98 87       	std	Y+8, r25	; 0x08
    355a:	a9 87       	std	Y+9, r26	; 0x09
    355c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355e:	6f 81       	ldd	r22, Y+7	; 0x07
    3560:	78 85       	ldd	r23, Y+8	; 0x08
    3562:	89 85       	ldd	r24, Y+9	; 0x09
    3564:	9a 85       	ldd	r25, Y+10	; 0x0a
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <main+0x130>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <main+0x1ae>
	else if (__tmp > 65535)
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <main+0x190>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
    35ca:	8b 81       	ldd	r24, Y+3	; 0x03
    35cc:	9c 81       	ldd	r25, Y+4	; 0x04
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <main+0x17e>
    35d2:	9c 83       	std	Y+4, r25	; 0x04
    35d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <main+0x172>
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	9a 83       	std	Y+2, r25	; 0x02
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <main+0x1ba>
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	UART_sendByte(M1_READY);
    3612:	80 e1       	ldi	r24, 0x10	; 16
    3614:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_sendByte>

	while(1)
	{
		if(flag == 0)
    3618:	80 91 62 01 	lds	r24, 0x0162
    361c:	88 23       	and	r24, r24
    361e:	41 f4       	brne	.+16     	; 0x3630 <main+0x1e0>
		{
			CreatePassword();
    3620:	0e 94 75 18 	call	0x30ea	; 0x30ea <CreatePassword>
			ValidatePassword();
    3624:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ValidatePassword>
			SendPassword();
    3628:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <SendPassword>
			DetermineAccess();
    362c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <DetermineAccess>
		}
		if(flag == 1){
    3630:	80 91 62 01 	lds	r24, 0x0162
    3634:	81 30       	cpi	r24, 0x01	; 1
    3636:	81 f7       	brne	.-32     	; 0x3618 <main+0x1c8>
			ManageSecurityOptions(& Timer_Config);
    3638:	ce 01       	movw	r24, r28
    363a:	0f 96       	adiw	r24, 0x0f	; 15
    363c:	0e 94 ba 13 	call	0x2774	; 0x2774 <ManageSecurityOptions>
    3640:	eb cf       	rjmp	.-42     	; 0x3618 <main+0x1c8>

00003642 <__udivmodsi4>:
    3642:	a1 e2       	ldi	r26, 0x21	; 33
    3644:	1a 2e       	mov	r1, r26
    3646:	aa 1b       	sub	r26, r26
    3648:	bb 1b       	sub	r27, r27
    364a:	fd 01       	movw	r30, r26
    364c:	0d c0       	rjmp	.+26     	; 0x3668 <__udivmodsi4_ep>

0000364e <__udivmodsi4_loop>:
    364e:	aa 1f       	adc	r26, r26
    3650:	bb 1f       	adc	r27, r27
    3652:	ee 1f       	adc	r30, r30
    3654:	ff 1f       	adc	r31, r31
    3656:	a2 17       	cp	r26, r18
    3658:	b3 07       	cpc	r27, r19
    365a:	e4 07       	cpc	r30, r20
    365c:	f5 07       	cpc	r31, r21
    365e:	20 f0       	brcs	.+8      	; 0x3668 <__udivmodsi4_ep>
    3660:	a2 1b       	sub	r26, r18
    3662:	b3 0b       	sbc	r27, r19
    3664:	e4 0b       	sbc	r30, r20
    3666:	f5 0b       	sbc	r31, r21

00003668 <__udivmodsi4_ep>:
    3668:	66 1f       	adc	r22, r22
    366a:	77 1f       	adc	r23, r23
    366c:	88 1f       	adc	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	1a 94       	dec	r1
    3672:	69 f7       	brne	.-38     	; 0x364e <__udivmodsi4_loop>
    3674:	60 95       	com	r22
    3676:	70 95       	com	r23
    3678:	80 95       	com	r24
    367a:	90 95       	com	r25
    367c:	9b 01       	movw	r18, r22
    367e:	ac 01       	movw	r20, r24
    3680:	bd 01       	movw	r22, r26
    3682:	cf 01       	movw	r24, r30
    3684:	08 95       	ret

00003686 <__prologue_saves__>:
    3686:	2f 92       	push	r2
    3688:	3f 92       	push	r3
    368a:	4f 92       	push	r4
    368c:	5f 92       	push	r5
    368e:	6f 92       	push	r6
    3690:	7f 92       	push	r7
    3692:	8f 92       	push	r8
    3694:	9f 92       	push	r9
    3696:	af 92       	push	r10
    3698:	bf 92       	push	r11
    369a:	cf 92       	push	r12
    369c:	df 92       	push	r13
    369e:	ef 92       	push	r14
    36a0:	ff 92       	push	r15
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	cf 93       	push	r28
    36a8:	df 93       	push	r29
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	ca 1b       	sub	r28, r26
    36b0:	db 0b       	sbc	r29, r27
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	09 94       	ijmp

000036be <__epilogue_restores__>:
    36be:	2a 88       	ldd	r2, Y+18	; 0x12
    36c0:	39 88       	ldd	r3, Y+17	; 0x11
    36c2:	48 88       	ldd	r4, Y+16	; 0x10
    36c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    36cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    36d0:	b9 84       	ldd	r11, Y+9	; 0x09
    36d2:	c8 84       	ldd	r12, Y+8	; 0x08
    36d4:	df 80       	ldd	r13, Y+7	; 0x07
    36d6:	ee 80       	ldd	r14, Y+6	; 0x06
    36d8:	fd 80       	ldd	r15, Y+5	; 0x05
    36da:	0c 81       	ldd	r16, Y+4	; 0x04
    36dc:	1b 81       	ldd	r17, Y+3	; 0x03
    36de:	aa 81       	ldd	r26, Y+2	; 0x02
    36e0:	b9 81       	ldd	r27, Y+1	; 0x01
    36e2:	ce 0f       	add	r28, r30
    36e4:	d1 1d       	adc	r29, r1
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	ed 01       	movw	r28, r26
    36f2:	08 95       	ret

000036f4 <itoa>:
    36f4:	fb 01       	movw	r30, r22
    36f6:	9f 01       	movw	r18, r30
    36f8:	e8 94       	clt
    36fa:	42 30       	cpi	r20, 0x02	; 2
    36fc:	c4 f0       	brlt	.+48     	; 0x372e <itoa+0x3a>
    36fe:	45 32       	cpi	r20, 0x25	; 37
    3700:	b4 f4       	brge	.+44     	; 0x372e <itoa+0x3a>
    3702:	4a 30       	cpi	r20, 0x0A	; 10
    3704:	29 f4       	brne	.+10     	; 0x3710 <itoa+0x1c>
    3706:	97 fb       	bst	r25, 7
    3708:	1e f4       	brtc	.+6      	; 0x3710 <itoa+0x1c>
    370a:	90 95       	com	r25
    370c:	81 95       	neg	r24
    370e:	9f 4f       	sbci	r25, 0xFF	; 255
    3710:	64 2f       	mov	r22, r20
    3712:	77 27       	eor	r23, r23
    3714:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__udivmodhi4>
    3718:	80 5d       	subi	r24, 0xD0	; 208
    371a:	8a 33       	cpi	r24, 0x3A	; 58
    371c:	0c f0       	brlt	.+2      	; 0x3720 <itoa+0x2c>
    371e:	89 5d       	subi	r24, 0xD9	; 217
    3720:	81 93       	st	Z+, r24
    3722:	cb 01       	movw	r24, r22
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	a1 f7       	brne	.-24     	; 0x3710 <itoa+0x1c>
    3728:	16 f4       	brtc	.+4      	; 0x372e <itoa+0x3a>
    372a:	5d e2       	ldi	r21, 0x2D	; 45
    372c:	51 93       	st	Z+, r21
    372e:	10 82       	st	Z, r1
    3730:	c9 01       	movw	r24, r18
    3732:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <strrev>

00003736 <strrev>:
    3736:	dc 01       	movw	r26, r24
    3738:	fc 01       	movw	r30, r24
    373a:	67 2f       	mov	r22, r23
    373c:	71 91       	ld	r23, Z+
    373e:	77 23       	and	r23, r23
    3740:	e1 f7       	brne	.-8      	; 0x373a <strrev+0x4>
    3742:	32 97       	sbiw	r30, 0x02	; 2
    3744:	04 c0       	rjmp	.+8      	; 0x374e <strrev+0x18>
    3746:	7c 91       	ld	r23, X
    3748:	6d 93       	st	X+, r22
    374a:	70 83       	st	Z, r23
    374c:	62 91       	ld	r22, -Z
    374e:	ae 17       	cp	r26, r30
    3750:	bf 07       	cpc	r27, r31
    3752:	c8 f3       	brcs	.-14     	; 0x3746 <strrev+0x10>
    3754:	08 95       	ret

00003756 <__udivmodhi4>:
    3756:	aa 1b       	sub	r26, r26
    3758:	bb 1b       	sub	r27, r27
    375a:	51 e1       	ldi	r21, 0x11	; 17
    375c:	07 c0       	rjmp	.+14     	; 0x376c <__udivmodhi4_ep>

0000375e <__udivmodhi4_loop>:
    375e:	aa 1f       	adc	r26, r26
    3760:	bb 1f       	adc	r27, r27
    3762:	a6 17       	cp	r26, r22
    3764:	b7 07       	cpc	r27, r23
    3766:	10 f0       	brcs	.+4      	; 0x376c <__udivmodhi4_ep>
    3768:	a6 1b       	sub	r26, r22
    376a:	b7 0b       	sbc	r27, r23

0000376c <__udivmodhi4_ep>:
    376c:	88 1f       	adc	r24, r24
    376e:	99 1f       	adc	r25, r25
    3770:	5a 95       	dec	r21
    3772:	a9 f7       	brne	.-22     	; 0x375e <__udivmodhi4_loop>
    3774:	80 95       	com	r24
    3776:	90 95       	com	r25
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	08 95       	ret

0000377e <_exit>:
    377e:	f8 94       	cli

00003780 <__stop_program>:
    3780:	ff cf       	rjmp	.-2      	; 0x3780 <__stop_program>
